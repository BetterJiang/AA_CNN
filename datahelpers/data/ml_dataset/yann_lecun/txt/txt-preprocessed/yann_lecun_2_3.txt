Abstract

Invariant representations in object recognition systems
are generally obtained by pooling feature vectors over spa-
tially local neighborhoods. But pooling is not local in the
feature vector space, so that widely dissimilar features may
be pooled together if they are in nearby locations. Recent
approaches rely on sophisticated encoding methods and
more specialized codebooks (or dictionaries), e.g., learned
on subsets of descriptors which are close in feature space, to
circumvent this problem. In this work, we argue that a com-
mon trait found in much recent work in image recognition or
retrieval is that it leverages locality in feature space on top
of purely spatial locality. We propose to apply this idea in its
simplest form to an object recognition system based on the
spatial pyramid framework, to increase the performance of
small dictionaries with very little added engineering. State-
of-the-art results on several object recognition benchmarks
show the promise of this approach.

1. Introduction

Much recent work in image recognition has underscored
the importance of locality constraints for extracting good
image representations. Methods that incorporate some way
of taking locality into account dene the state of the art on
many challenging image classication benchmarks such as
Pascal VOC, Caltech-101, Caltech-256, and 15-Scenes [11,
39, 42, 43, 45].

The spatial pyramid [25] has emerged as a popular
framework to encapsulate more and more sophisticated fea-
ture extraction techniques [4, 11, 39, 41, 42, 45]. The global
representation of an image is obtained by extracting image
descriptors such as SIFT [28] or HOG [9] on a dense grid,
encoding them over some learned codebook or dictionary
(coding step), and then summarizing the distribution of the
codes in the cells of a spatial pyramid by some well-chosen
aggregation statistic (pooling step).



WILLOW project-team, Laboratoire dInformatique de lEcole Nor-

male Superieure, ENS/INRIA/CNRS UMR 8548.



SIERRA project-team, Laboratoire dInformatique de lEcole Nor-

male Superieure, ENS/INRIA/CNRS UMR 8548.

1

Several recent papers have focused on rening the cod-
ing step, one purpose of which is to produce representations
that can be aggregated (pooled) without losing too much in-
formation in the process. Pooling, which has long been part
of popular recognition architectures such as convolutional
networks [26], gives robustness to small transformations of
the image. It is related to Koenderinks concept of locally
orderless images
[24], and can be traced back to Hubel
and Wiesels seminal work on complex cells in the visual
cortex [18]. The simplest pooling operation consists in av-
eraging the feature vectors within a spatial neighborhood.
One fact that makes the coding step necessary is that de-
scriptors such as SIFT or HOG cannot be averaged with
their neighbors without losing a considerable amount of in-
formation: the average of several widely different SIFT fea-
tures doesnt tell us much about the content of the underly-
ing image. Hence, coding is generally designed to produce
representations that can be added with each other without
diluting the signal. The original spatial pyramid proposal
used vector quantization (K-means), which can be seen as a
way of turning SIFT vectors into very sparse, 1-of-K codes.
When obtained by averaging over spatial neighborhoods,
the pooled codes can be interpreted as local histograms of
visual words. Recent work has proposed to replace this
hard quantization step of individual SIFT descriptors by soft
vector quantization [36], or sparse coding [41], including
sparse coding of local groups of SIFT descriptors (macro-
features) instead of single ones, in our previous work [4].

While the pooling operations are often performed over
local spatial neighborhoods, the neighborhoods may con-
tain feature vectors that are very heterogeneous, possibly
leading to the loss of a large amount of information about
the distribution of features, as illustrated in Fig. (1). Re-
stricting the pooling to feature vectors that are similar in the
multidimensional input space (or nearby) [21, 45] remedies
this problem. The usefulness of considering similar inputs
for smoothing noisy data over a homogeneous sample to re-
duce noise without throwing out the signal has long been
recognized in the image processing and denoising commu-
nities [6, 8], and has been successfully incorporated to de-
noising methods using sparse coding [30].
It is interest-
ing to note that considerations of locality often pull cod-

2

f

2

f

f1

f1

Figure 1. Cartoon representation of a distribution of descriptors that has a high curvature and is invariant to the spatial location in the
image, with two feature components (left). The center and right gures show the samples projected across space in the 2D feature space.
Due to the curvature of the surface, global pooling (center) loses most of the information contained in the descriptors; the red cross (average
pooling of the samples) is far away from the lower-dimensional surface on which the samples lie. Clustering the samples and performing
pooling inside each cluster preserves information since the surface is locally at (right).

ing and pooling in opposite directions: they make coding
smoother (neighbors are used to regularize coding so that
noise is harder to represent) and pooling more restrictive
(only neighbors are used so that the signal does not get av-
eraged out). This can be viewed as an attempt to distribute
smoothing more evenly between coding and pooling.

Authors of locality-preserving methods have often at-
tributed their good results to the fact that the encoding uses
only dictionary atoms that resemble the input [39, 43], or
viewed them as a trick to learn huge specialized dictionar-
ies, whose computational cost would be prohibitive with
standard sparse coding [42]. However, this view may un-
derestimate how local coding also makes pooling more lo-
cal, by tying activation of a component more strongly to a
region of the multidimensional input conguration space.
We argue that more local pooling may be one factor in
the success of methods that incorporate locality constraints
into the training criterion of the codebook for sparse cod-
ing [11, 39, 43], or directly cluster the input data to learn
one local dictionary per cluster [39, 42]. The question we
attempt to answer in this paper is whether it is possible to
leverage locality in the descriptor space once the descriptors
have already been encoded. We argue that if the coding step
has not been designed in such a way that the pooling oper-
ation preserves as much information as possible about the
distribution of features, then the pooling step itself should
become more selective.

The contributions of this work are threefold. First, we
show how several recent feature extracting methods can be
viewed in a unied perspective as preventing pooling from
losing too much relevant information. Second, we demon-
strate empirically that restricting pools to codes that are
nearby not only in (2D) image space but also in descrip-
tor space, boosts the performance even with relatively small
dictionaries, yielding state-of-the-art performance or better
on several benchmarks, without resorting to more compli-
cated and expensive coding methods, or having to learn new
dictionaries. Third, we propose some promising extensions.
The paper is organized as follows. Sec. 2 introduces the

general classication pipeline that is used in this paper and
much previous work and motivates our approach. Sec. 3
presents related work. Experiments are presented in Sec. 4.

2. General image recognition architecture and

proposed approach

As argued in our previous work [4], many modern meth-
ods for image classication, such as convolutional and deep
belief networks [17, 20, 26, 32], bags of features [34], his-
tograms of gradients for pedestrian detection [9], or the spa-
tial pyramid [25], implement an alternating series of coding
and spatial pooling steps. Classication is then performed
with some standard classier such as a kernel or linear sup-
port vector machine (SVM), or logistic regression.

2.1. Feature extraction

Our setting for feature extraction is the following. Let 
denote an input image. First, low-level descriptors  (e.g.,
SIFT or HOG) are extracted densely at  locations identi-
ed with their indices  = 1, . . . , . Coding is performed
at each location by applying some operator that is chosen to
ensure that the resulting codes  retain useful information
(e.g., input data can be predicted from them), while hav-
ing some desirable properties (e.g., compactness). Here, we
focus on hard vector quantization and sparse coding, that
both minimize some regularized error between inputs and
the reconstructions that can be obtained from the codes.

Hard vector quantization is the simplest coding step,
used in the bag-of-features framework [34]. It models the
data with  clusters, representing each  by a one-of-
encoding of its cluster assignment:
  {0, 1} , , = 1 iff  = argmin


  d2
2,

(1)

where d denotes the -th codeword of a codebook that is
usually learned by an unsupervised algorithm such as K-
means. The extreme sparseness of the codes produced (only

one component per code is non-zero) may be ill-suited to
images, and in fact better results have been obtained by re-
placing hard vector quantization by a soft probabilistic ver-
sion [36], or by sparse coding [4, 41].

Sparse coding
combination of few codewords:

[31] reconstructs the input as a linear

(, D)    D2

2 + 1,



 = argmin

(2)
where 1 denotes the 1 norm of ,  is a parameter that
controls the sparsity of , and D is some dictionary, which
can be obtained by K-means, or for better performance,
trained by minimizing the average of (, D) over all
samples, alternatively over D and the . It is well known
that the 1 penalty induces sparsity and makes the problem
tractable (e.g., [27, 29]).

A pooling operator then takes the varying number of
codes that are located within  possibly overlapping re-
gions of interest (e.g., the cells of a spatial pyramid), and
summarizes them as a single vector of xed length. The
representation for the global image is obtained by concate-
nating the representations of each region of interest, pos-
sibly with a suitable weight. We denote by  the set of
locations/indices within region . Here, we use the two
common pooling strategies of average and max pooling.

Average pooling
computes a histogram or take the aver-
age of the codes over the region (these two methods are
equivalent after normalization):

 =

1






,

(3)

where  is the vector representing region .

Max pooling
computes the maximum of each compo-
nent instead of its average. It has recently gained popularity
due to its better performance when paired with sparse cod-
ing and simple linear classiers [4, 38, 41], and its statistical
properties which make it well suited to sparse representa-
tions [5]. In our notation, max pooling is written:

, = max


,, for  = 1, . . . , .

(4)

Max pooling is used for all experiments in this work,

except those in Sec. 4.2.3.

2.2. Pooling more locally across the input space

We propose to streamline the approach in [42], which
requires learning one different dictionary per cluster, and
show that simply making the pooling step more selective

can substantially enhance the performance of small dictio-
naries, and beat the state of the art on some object recog-
nition benchmarks when large dictionaries are used, with-
out requiring additional learning beyond obtaining an addi-
tional clustering codebook with -means. Comparing the
performance of our system with that obtained with individ-
ual dictionaries allows us to quantify the relative contribu-
tions of more selective pooling and more specialized, over-
complete dictionaries.

To clarify how our local pooling scheme differs from the
usual local spatial pooling, an image feature can be viewed
as a couple  = (, ), where   
2 denotes a pixel
location, and   
 is a vector, or conguration, encoding
the local image structure at  (e.g., a SIFT descriptor, with
 = 128). A feature set  is associated with each image, its
size potentially varying from one picture to the next.

Spatial pooling considers a xed  that is, predetermined
and image-independent  set of  possibly overlapping im-
age regions (spatial bins) 1 to  . To these, we add a
xed set of  (multi-dimensional) bins 1 to  in the
conguration space. In this work, the spatial bins are the
cells in a spatial pyramid, and the conguration space bins
are the Voronoi cells of clusters obtained using -means.

Denoting by  the pooling operator (average or max in

the previous section), the pooled feature is obtained as:

(,) = (,)((,)).

(5)

Bags of features can be viewed as a special case of this in
two ways: either by considering the 1-of- encoding pre-
sented above, followed by global pooling in the congura-
tion space ( = 1), or with a simplistic encoding that maps
all inputs to 1, but does ne conguration space binning
( = ). Accordingly, the feature extraction in this paper
can be viewed either as extending the sparse coding spatial
pyramid by making conguration space pooling local, or as
extending the hard-vector-quantized spatial pyramid by re-
placing the simplistic code by sparse coding: descriptors are
rst decomposed by sparse coding over a dictionary of size
; the same descriptors are also clustered over a -means
dictionary of size  ; nally, pooling of the sparse codes is
then performed separately for each cluster (as in aggregated
coding [21]  see Sec. 3 , but with sparse codes), yielding
a feature of size      if there are  spatial bins.

While this does not apply to max pooling, local pool-
ing can be viewed as implementing local bilinear classica-
tion when using average pooling and linear classication:
the pooling operator and the classier may be swapped,
and classication of local features then involves computing
 , where  is a ( )- dimensional binary vector

that selects a subset of classiers corresponding to the con-
guration space and spatial bins, and  is a (   )  
matrix containing one -dimensional local classier per
row.

3. Related work about locality in feature space

We start our review of previous work with a caveat about
word choice. There exists an unfortunate divergence in the
vocabulary used by different communities when it comes
to naming methods leveraging neighborhood relationships
in feature space: what is called non-local in work in the
vein of signal processing [6, 30] bears a close relationship to
local tting and density estimation [11, 33, 39, 43]. Thus,
non-local means [6] and locally-linear embedding [33] actu-
ally perform the same type of initial grouping of input data
by minimal Euclidean distance. This discrepancy stems
from the implicit understanding of local as either spa-
tially local, or local in translation-invariant conguration
space.

3.1. Preserving neighborhood relationships during

coding

Previous work has shown the effectiveness of preserving
conguration space locality during coding, so that similar
inputs lead to similar codes. This can be done by explicitly
penalizing codes that differ for neighbors. The DrLIM sys-
tem of siamese networks in [16], and neighborhood com-
ponent analysis [13], learn a mapping that varies smoothly
with some property of the input by minimizing a cost which
encourages similar inputs to have similar codes (similarity
can be dened arbitrarily, as locality in input space, or shar-
ing the same illumination, orientation, etc.) Exploiting im-
age self-similarities has also been used successfully for de-
noising [6, 8, 30].

Locality constraints imposed on the coding step have
been adapted to classication tasks with good results.
Laplacian sparse coding [11] uses a modied sparse coding
step in the spatial pyramid framework. A similarity matrix
of input SIFT descriptors is obtained by computing their in-
tersection kernel, and used in an added term to the sparse
coding cost. The penalty to pay for the discrepancy be-
tween a pair of codes is proportional to the similarity of the
corresponding inputs. This method obtains state-of-the-art
results on several object recognition benchmarks. Locality-
constrained linear coding [39] (LLC) projects each descrip-
tor on the space formed by its  nearest neighbors ( is
small, e.g.,  = 5). This procedure corresponds to per-
forming the rst two steps of the locally linear embedding
algorithm [33] (LLE), except that the neighbors are selected
among the atoms of a dictionary rather than actual descrip-
tors, and the weights are used as features instead of being
mere tools to learn an embedding.

Sparse coding methods incorporating a locality con-
straint share the property of indirectly limiting activation
of a given component of the vectors representing descrip-
tors to a certain region of the conguration space. This
may play a role in their good performance. For example, in
LLC coding, the component corresponding to a given dic-
tionary atom will be non-zero only if that atom is one of

the  nearest neighbors of the descriptor being encoded; the
non-zero values aggregated during pooling then only come
from these similar descriptors. Several approaches have im-
plemented this strategy directly during the pooling step, and
are presented in the next section.

3.2. Letting only neighbors vote during pooling

Pooling involves extracting an ensemble statistic from
a potentially large group of inputs. However, pooling too
drastically can damage performance, as shown in the spa-
tial domain by the better performance of spatial pyramid
pooling [25] compared to whole-image pooling.

Different groups have converged to a procedure involv-
ing preclustering of the input to create independent bins
over which to pool the data. In fact, dividing the feature
space into bins to compute correspondences has been pro-
posed earlier by the pyramid match kernel approach [14].
However, newer work does not tile the feature space evenly,
relying instead on unsupervised clustering techniques to
adaptively produce the bins.

The methods described here all perform an initial (hard
or soft) clustering to partition the training data according
to appearance, as in the usual bag-of-words framework, but
then assigning a vector to each cluster instead of a scalar.
The representation is then a super-vector that concate-
nates these vectors instead of being a vector that concate-
nates scalars.

Aggregated coding [21] and super-vector coding [45]
both compute, for each cluster, the average difference be-
tween the inputs in the cluster, and its centroid: (1) SIFT
descriptors x are extracted at regions of interest, (2) visual
words c are learned over the whole data by -means, (3)
descriptors of each image are clustered, (4) for each cluster
(x  c) is computed, (5) the image
, the sum
descriptor is obtained by concatenating the representations
for each cluster.

x



If the centroids were computed using only the descrip-
tors in a query image, the representation would be all ze-
ros, because the centroids in K-means are also obtained by
averaging the descriptors in each cluster. Instead, the cen-
troids are computed using descriptors from the whole data,
implicitly representing a baseline image against which
each query image is compared. Thus, encoding relatively to
the cluster centroid removes potentially complex but non-
discriminative information. This representation performs
very well on retrieval [21] and image classication [45]
(Pascal VOC2009) benchmarks.

Another related method [42] that obtains high accuracy
on the Pascal datasets combines the preclustering step of
aggregated and super-vector coding, with sparse decompo-
sition over individual local dictionaries learned inside each
cluster. Both approaches using preclustering for image clas-
sication [42, 45] have only reported results using gigantic
global descriptors for each image. Indeed, the high results
obtained in [42] are attributed to the possibility of learning

a very large overcomplete dictionary (more than 250,000
atoms) which would be computationally infeasible without
preclustering, but can be done by assembling a thousand or
more smaller local dictionaries. The experiments presented
in the next section seek to isolate the effect of local pooling
that is inherent in this scheme.

4. Experiments

We perform experiments on three image recognition
datasets: 15-Scenes [25], Caltech-101 [10] and Caltech-
256 [15]. All features are extracted from grayscale images.
Large images are resized to t inside a 300 300 box. SIFT
descriptors are extracted densely over the image, and en-
coded into sparse vectors using the SPAMS toolbox [1].
We adopt the denser 2  2 macrofeatures of our previous
work [4], extracted every 4 pixels, for the Caltech-256 and
Caltech-101 databases, and every 8 pixels for the Scenes,
except for some experiments on Caltech-256 where stan-
dard features extracted every 8 pixels are used for faster
processing. The sparse codes are pooled inside the cells of a
three-level pyramid (4 4, 2 2 and 1 1 grids); max pool-
ing is used for all experiments except those in Sec. 4.2.3,
which compare it to other pooling schemes. We apply an
1.5 normalization to each vector, since it has shown slightly
better performance than no normalization in our experi-
ments (by contrast, normalizing by 1 or 2 norms worsens
performance). One-versus-all classication is performed by
training one linear SVM for each class using LIBSVM [7],
and then taking the highest score to assign a label to the in-
put. When local pooling in the conguration space is used
(  1), clustering is performed using the -means algo-
rithm to obtain cluster centers. Following the usual prac-
tice [15, 25, 39], we use 30 training images on the Caltech-
101 and Caltech-256 datasets, 100 training images on the
Scenes dataset; the remaining images are used for testing,
with a maximum of 50 and 20 test images for Caltech-
101 and Caltech-256, respectively. Experiments are run ten
times on ten random splits of training and testing data, and
the reported result is the mean accuracy and standard devi-
ation of these runs. Hyperparameters of the model (such as
the regularization parameter of the SVM or the  parameter
of sparse coding) are selected by cross-validation within the
training set. Patterns of results are very similar for all three
datasets, so results are shown only on Caltech-101 for some
of the experiments; more complete numerical results on all
three datasets can be found in the supplemental material



.

4.1. Pooling locally in conguration space yields

state-of-the-art performance

Experiments presented in Table 1 and 2 compare the per-
formance of sparse coding with a variety of conguration
space pooling schemes, with a list of published results of
http://cs.nyu.edu/ylan/les/publi/boureau-iccv-11-supplemental.pdf



Boiman et al. [3]
Boureau et al. [4]
Gao et al. [11]
Jain et al. [19]
Lazebnik et al. [25]
van Gemert et al. [36]
Wang et al. [39]
Yang et al. [41]
Zhang et al. [44]
Zhou et al. [46]
 = 256, Pre,  = 1
 = 16
 = 64
 = 128
 = 1 + 16
 = 1 + 64

 = 256, Post, = 16
 = 64
 = 128

 = 1024,Pre,  = 1
 = 16
 = 64
 = 1 + 16
 = 1 + 64

 = 1024,Post, = 16
 = 64

Caltech 30 tr.
70.4
75.7  1.1

69.6
64.4  0.8
64.1  1.2
73.44
73.2  0.5
66.2  0.5

70.5  0.8
74.0  1.0
75.0  0.8
75.5  0.8
74.2  1.1
75.6  0.6
75.1  0.8
76.4  0.8
76.7  0.8
75.6  0.9
76.3  1.1
76.2  0.8
76.9  1.0
77.3  0.6
77.0  0.8
77.1  0.7

Scenes
-
85.6  0.2
89.8  0.5
-
81.4  0.5
76.7  0.4

80.3  0.9
-
84.1  0.5
78.8  0.6
81.5  0.8
81.1  0.5
81.0  0.3
81.5  0.8
81.9  0.7
80.9  0.6
81.1  0.6
81.1  0.5
82.7  0.7
82.7  0.9
81.4  0.7
83.3  1.0
83.1  0.7
82.9  0.6
82.4  0.7

Table 1. Results on Caltech-101 (30 training samples per class)
and 15-scenes for various methods. Results for our method are
given as a function of whether clustering is performed before (Pre)
or after (Post) the encoding, : dictionary size, and  : number of
conguration space bins.

methods using grayscale images and a single type of de-
scriptor. Local pooling always improves results, except on
the Scenes for a dictionary of size  = 1024. On the
Caltech-256 benchmark, our performance of 41.7% accu-
racy with 30 training examples is similar to the best re-
ported result of 41.2% that we are aware of (for methods
using a single type of descriptors over grayscale), obtained
by locality-constrained linear codes [39], using three scales
of SIFT descriptors and a dictionary of size  = 4096.

4.1.1 Using pyramids in conguration space

We examine whether it is advantageous to combine ne and
coarse clustering, in a way reminiscent of the levels of the
spatial pyramid. With large dictionaries, local pooling in
the conguration space does not always perform better than
standard global pooling (see Tables 1 and 2). However,
combining levels of different coarseness gives performance
better than or similar to that of the best individual level, as
has been observed with the spatial pyramid [25].

This signicantly improves performance on the Caltech-
101 dataset. To the best of our knowledge, our perfor-
mance of 77.3% on the Caltech-101 benchmark, is above
all previously published results for a single descriptor type

Boiman et al. [3]
Gao et al. [11] ( = 1024)
Kim et al. [23]
van Gemert et al. [36] ( = 128)
Wang et al. [39] ( = 4096)
Yang et al. [41] ( = 1024)
 = 256,

Pre,

 = 1
 = 16
 = 64
 = 128
 = 16
 = 64
 = 128
 = 1
 = 16
 = 64
 = 16

 = 256,

Post,

 = 1024,

Pre,

 = 1024,

Post,

36.3

37.0

41.2

Accuracy
35.7  0.1
27.2  0.5
34.0  0.4
32.3  0.8
38.0  0.5
39.2  0.5
39.7  0.6
36.9  0.7
39.6  0.5
40.3  0.6
38.1  0.6
41.6  0.6
41.7  0.8
40.4  0.6

Table 2. Recognition accuracy on Caltech 256, 30 training exam-
ples, for several methods using a single descriptor over grayscale.
For our method, results are shown as a function of whether clus-
tering is performed before (Pre) or after (Post) the encoding, :
dictionary size, and  : number of conguration space bins.

using grayscale images  although better performance has
been reported with color images (e.g., 78.5%  0.4 with
a saliency-based approach [22]), multiple descriptor types
(e.g., methods using multiple kernel learning have achieved
77.7%  0.3 [12], 78.0%  0.3 [2, 37] and 84.3% [40]
on Caltech-101 with 30 training examples), or subcategory
learning (83% on Caltech-101 [35]). On the Scenes bench-
mark, preclustering does improve results for small dictio-
naries (  256, see supplemental material), but not for
larger ones ( = 1024). While our method outperforms
the Laplacian sparse coding approach [11] on the Caltech
256 dataset, our performance is much below that of Lapla-
cian sparse coding on the Scenes database.

4.1.2 Pre- vs. Post-Clustering

One advantage of using the same dictionary for all fea-
tures is that the clustering can be performed after the en-
coding. The instability of sparse coding could cause fea-
tures similar in descriptor space to be mapped to dissimilar
codes, which would then be pooled together. This does not
happen if clustering is performed on the codes themselves.
While pre-clustering may perform better for few clusters,
post-clustering yields better results when enough clusters
are used (  64); a dictionary of size  = 1024 reaches
77.1  0.7 accuracy on Caltech-101 with  = 64 bins (to
be compared to 76.2  0.8 when clustering before coding),
while a dictionary of size  = 256 yields 76.7  0.8 with
 = 128 bins (to be compared to 75.50.8 with precluster-
ing). Fig. 2 also shows that performance drops for larger  ,
irrespective of whether the clustering is performed before
or after the encoding.

77

76

75

74

73

72

71

y
c
a
r
u
c
c
A

1

Dictionary
size

1024
256

Clustering

After coding
Before coding

4

256
Configuration bins, log scale

16

64

1024

Figure 2. Recognition accuracy on Caltech-101, for clustering be-
fore or after encoding. Clustering after the encoding generally per-
forms better; for both schemes, binning too nely in conguration
space (large  ) hurts performance. Best viewed in color.

4.2. Gaining a ner understanding of local congu-

ration space pooling

In this section, we investigate how much local congu-
ration space pooling can enhance the performance of small
dictionaries, how it compares to learning one local dictio-
nary per conguration bins, and what pooling and weight-
ing schemes work best in our pipeline.

4.2.1 Local pooling boosts small dictionaries

Fig. 3(a) shows results for various assignments of compo-
nents between atoms () and centroids ( ). Pooling more
locally in conguration space ( > 1) can considerably
boost the performance of small dictionaries.

Unsurprisingly,

larger dictionaries consistently beat
smaller ones combined with preclustering-driven pooling,
at same total number of components; this can be seen from
the downwards slope of the gray dashed lines in Fig. 3(a)
linking data points at constant    . However, if  is
allowed to grow more, small dictionaries can outperform
larger ones. This leads to good performance with a small
dictionary; e.g., a dictionary of just  = 64 atoms cou-
pled with a preclustering along  = 64 centroids achieves
73.0  0.6% on Caltech-101.

4.2.2 Comparison with cluster-specic dictionaries

In addition to learning richer, more local dictionaries, learn-
ing one dictionary per cluster as done in [39, 42] inherently
leads to more local pooling. Experiments in this section
seek to disentangle these effects. As shown in Fig. 3(b),
more than half of the improvement compared to no preclus-
tering is usually due to the separate clustering rather than
more specic dictionaries. The smaller the dictionary, the

y
c
a
r
u
c
c
A

70

60

50

40

30

Dictionary

4 dics, 4 bins
1 dic, 4 bins
1 dic,
1 bin

y
c
a
r
u
c
c
A

70

60

50

40

30

20

10

0

Dictionary
size

1024
256
64
16
4

75

70

65

y
c
a
r
u
c
c
A

60

55

50

45

Pooling
Avg
Max

Weighting
1
Ni N
Ni N

1
Configuration bins, log scale

16

4

64

4

16
Dictionary size

64

256

1024

4

16

Dictionary size, log scale

64

256

(a)

(b)

(c)

Figure 3. Recognition accuracy on Caltech-101. Left: pooling locally in ner conguration space bins can boost the performance of small
dictionaries. Dotted gray lines indicate constant product of dictionary size  number of conguration bins. Middle: a substantial part of
the improvement observed when using multiple local dictionaries can be achieved without changing the encoding, by pooling locally in
conguration space.  = 4 conguration space bins are used. Right: the best performance is obtained with max pooling and uniform
weighting. Max pooling consistently outperforms average pooling for all weighting schemes. With average pooling, weighting by the
square root of the cluster weight performs best.  = 16 conguration space bins are used. Results on the Caltech-256 and Scenes datasets
show similar patterns (see supplemental material). Best viewed in color.

larger the proportion of the improvement due to clustering.
This may be due to the fact that smaller dictionaries do not
have enough atoms to implicitly link activation of an atom
to cluster membership during coding, leaving more of that
task to the explicit local conguration space pooling than
when large dictionaries are used.

4.2.3 Pooling operator and cluster weighting

When concatenating the vectors corresponding to each
pool, it is not clear whether they should be weighted accord-
ing to the prominence of the cluster, measured as the ratio
/ of the number  of inputs falling into cluster , over
the total number  of inputs. Denoting by  the weight
for cluster , we compare three weighting schemes: iden-
tical weight ( = 1), a weight proportional to the square
root of the ratio ( =
/) as proposed by Zhou et
al. [45], or the ratio itself ( = /).



As shown in Fig. 3(c), the weighting scheme assign-
ing the same weight to each cluster performs better when
max pooling is used, except for very small dictionaries.
When average pooling is used, the best weighting scheme
is the square root weighting, which empirically validates
the choice in [45], but performance is below that of max
pooling. Based on these results, max pooling with identical
weighting for all clusters has been used for all other experi-
ments in the paper.

5. Conclusion

While there is no question that making coding more sta-
ble and more specic is advantageous, the simple procedure

of clustering the data in order to make pooling local in con-
guration space is a powerful tool for image recognition.
The main conclusions of this work are that (1) more local
conguration space pooling in itself boosts performance,
dramatically so with smaller dictionaries; (2) it is advan-
tageous to use pyramids rather than grids, analogously to
spatial pooling; (3) with enough conguration space bins,
better performance may be obtained when the clustering is
performed just before the pooling step, rather than before
the coding step; (4) performance drops if too many bins are
added.

Our ongoing efforts are focused on adapting the same
ideas to pooling across features when there is a topogra-
phy on the feature extractors, instead of simply pooling each
component separately. We hope that considerating locality
in all dimensions simultaneously (feature space, between
feature extractors, and space itself) will lead to even more
robust invariant recognition.

Acknowledgments. This work was supported by ONR
contract N00014-09-1-0473 and NSF grant EFRI/COPN-
0835878 to NYU, and by the European Research Council
(VideoWorld and Sierra grants).

