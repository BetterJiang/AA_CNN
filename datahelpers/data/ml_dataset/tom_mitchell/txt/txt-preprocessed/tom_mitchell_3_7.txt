Abstract

We consider the problem of performing learn-
ing and inference in a large scale knowledge
base containing imperfect knowledge with
incomplete coverage. We show that a soft
inference procedure based on a combination
of constrained, weighted,
random walks
through the knowledge base graph can be
used to reliably infer new beliefs for the
knowledge base. More specically, we
show that
the system can learn to infer
different target relations by tuning the weights
associated with random walks that follow
different paths through the graph, using a
version of the Path Ranking Algorithm (Lao
and Cohen, 2010b). We apply this approach to
a knowledge base of approximately 500,000
beliefs extracted imperfectly from the web
by NELL, a never-ending language learner
(Carlson et al., 2010).
This new system
improves signicantly over NELLs earlier
Horn-clause learning and inference method:
it obtains nearly double the precision at rank
100, and the new learning method is also
applicable to many more inference tasks.

1

Introduction

Although there is a great deal of recent research
on extracting knowledge from text (Agichtein and
Gravano, 2000; Etzioni et al., 2005; Snow et
al., 2006; Pantel and Pennacchiotti, 2006; Banko
et al., 2007; Yates et al., 2007), much less
progress has been made on the problem of drawing
reliable inferences from this imperfectly extracted
knowledge.
logical

In particular,

traditional

inference methods are too brittle to be used to make
complex inferences from automatically-extracted
knowledge, and probabilistic inference methods
(Richardson and Domingos, 2006) suffer
from
scalability problems.
This paper considers the
problem of constructing inference methods that can
scale to large knowledge bases (KBs), and that are
robust to imperfect knowledge. The KB we consider
is a large triple store, which can be represented as a
labeled, directed graph in which each entity a is a
node, each binary relation R(a, b) is an edge labeled
R between a and b, and unary concepts C(a) are
represented as an edge labeled isa between the
node for the entity a and a node for the concept
C. We present a trainable inference method that
learns to infer relations by combining the results of
different random walks through this graph, and show
that the method achieves good scaling properties and
robust inference in a KB containing over 500,000
triples extracted from the web by the NELL system
(Carlson et al., 2010).

1.1 The NELL Case Study
To evaluate our approach experimentally, we study
it
in the context of the NELL (Never Ending
Language Learning) research project, which is an
effort to develop a never-ending learning system that
operates 24 hours per day, for years, to continuously
improve its ability to read (extract structured facts
from) the web (Carlson et al., 2010). NELL began
operation in January 2010. As of March 2011,
NELL had built a knowledge base containing several
million candidate beliefs which it had extracted from
the web with varying condence. Among these,

NELL had fairly high condence in approximately
half a million, which we refer to as NELLs
(condent) beliefs. NELL had lower condence in a
few million others, which we refer to as its candidate
beliefs.

NELL is given as input an ontology that denes
hundreds of categories (e.g., person, beverage,
athlete, sport) and two-place typed relations among
these categories (e.g., atheletePlaysSport((cid:104)athlete(cid:105),
(cid:104)sport(cid:105))), which it must learn to extract from the
web. It is also provided a set of 10 to 20 positive
seed examples of each such category and relation,
along with a downloaded collection of 500 million
web pages from the ClueWeb2009 corpus (Callan
and Hoy, 2009) as unlabeled data, and access to
100,000 queries each day to Googles search engine.
Each day, NELL has two tasks:
(1) to extract
additional beliefs from the web to populate its
growing knowledge base (KB) with instances of the
categories and relations in its ontology, and (2) to
learn to perform task 1 better today than it could
yesterday. We can measure its learning competence
by allowing it to consider the same text documents
today as it did yesterday, and recording whether it
extracts more beliefs, more accurately today.1

NELL uses a large-scale semi-supervised multi-
task learning algorithm that couples the training
of over 1500 different classiers and extraction
methods (see (Carlson et al., 2010)). Although
many of the details of NELLs learning method
are not central to this paper,
two points should
be noted. First, NELL is a multistrategy learning
system, with components that learn from different
views of the data (Blum and Mitchell, 1998): for
instance, one view uses orthographic features of
a potential entity name (like contains capitalized
words), and another uses free-text contexts in
which the noun phrase is found (e.g., X frequently
follows the bigram mayor of ). Second, NELL
is a bootstrapping system, which self-trains on its
growing collection of condent beliefs.

1.2 Knowledge Base Inference: Horn Clauses
Although NELL has now grown a sizable knowl-
edge base, its ability to perform inference over this

1NELLs

current

KB

is

available

online

at

http://rtw.ml.cmu.edu.

Figure 1: An example subgraph.

knowledge base is currently very limited. At present
its only inference method beyond simple inheritance
involves applying rst order Horn clause rules to
infer new beliefs from current beliefs. For example,
it may use a Horn clause such as

AthletePlaysForTeam(a, b)
 TeamPlaysInLeague(b, c)
 AthletePlaysInLeague(a,c)

(1)

to infer that AthletePlaysInLeague(HinesWard,NFL),
if
it has already extracted the beliefs in the
preconditions of the rule, with variables a, b and c
bound to HinesWard, PittsburghSteelers and NFL
respectively as shown in Figure 1. NELL currently
has a set of approximately 600 such rules, which
it has learned by data mining its knowledge base
of beliefs. Each learned rule carries a conditional
probability that its conclusion will hold, given that
its preconditions are satised.

of

a

rules

1993),

examples

NELL learns these Horn clause rules using
a variant of the FOIL algorithm (Quinlan and
Cameron-Jones,
henceforth N-FOIL.
N-FOIL takes as input a set of positive and
negative
consequent
+AthletePlaysInLeague(HinesWard,NFL),
(e.g.,
AthletePlaysInLeague(HinesWard,NBA)),
and
uses a separate-and-conquer strategy to learn a
set of Horn clauses that t the data well. Each
Horn clause is learned by starting with a general
rule and progressively specializing it, so that it
still covers many positive examples but covers few
negative examples. After a clause is learned, the
examples covered by that clause are removed from
the training set, and the process repeats until no
positive examples remain.

Learning rst-order Horn clauses is computation-
ally expensivenot only is the search space large,
but some Horn clauses can be costly to evaluate
(Cohen and Page, 1995). N-FOIL uses two tricks
to improve its scalability. First, it assumes that
the consequent predicate is functionale.g., that

Eli ManningGiantsAthletePlaysForTeamHinesWardSteelersAthletePlaysForTeamNFLTeamPlaysInLeagueMLBTeamPlaysInLeagueTeamPlaysInLeaguee.g.,

each Athlete plays in at most one League. This
means that explicit negative examples need not
if Ath-
be provided (Zelle et al., 1995):
letePlaysInLeague(HinesWard,NFL) is a positive
example, then AthletePlaysInLeague(HinesWard,c(cid:48))
for any other value of c(cid:48) is negative.
In general,
this constraint guides the search algorithm toward
Horn clauses that have fewer possible instantiations,
and hence are less expensive to match. Second,
N-FOIL uses relational pathnding (Richards
and Mooney, 1992) to produce general rulesi.e.,
the starting point
for a predicate R is found
by looking at positive instances R(a, b) of the
consequent, and nding a clause that corresponds
to a bounded-length path of binary relations that
link a to b.
In the example above, a start clause
might be the clause (1). As in FOIL, the clause
is then (potentially) specialized by greedily adding
additional conditions (like ProfessionalAthlete(a))
or by replacing variables with constants (eg,
replacing c with NFL).
For each N-FOIL rule, an estimated conditional
probability P (conclusion|preconditions) is calcu-
lated using a Dirichlet prior according to

P = (N+ + m  prior)/(N+ + N + m)

(2)
where N+ is the number of positive instances
matched by this rule in the FOIL training data,
N is the number of negative instances matched,
m = 5 and prior = 0.5. As the results below
show, N-FOIL generally learns a small number of
high-precision inference rules. One important role
of these inference rules is that they contribute to
the bootstrapping procedure, as inferences made by
N-FOIL increase either the number of candidate
beliefs, or (if the inference is already a candidate)
improve NELLs condence in candidate beliefs.

1.3 Knowledge Base Inference: Graph

Random Walks

In this paper, we consider an alternative approach,
based on the Path Ranking Algorithm (PRA) of Lao
and Cohen (2010b), described in detail below. PRA
learns to rank graph nodes b relative to a query
node a. PRA begins by enumerating a large set of
bounded-length edge-labeled path types, similar to
the initial clauses used in NELLs variant of FOIL.
These path types are treated as ranking experts,

each performing a random walk through the graph,
constrained to follow that sequence of edge types,
and ranking nodes b by their weights in the resulting
distribution. Finally, PRA combines the weights
contributed by different experts using logistic
regression to predict the probability that the relation
R(a, b) is satised.
As an example, consider a path from a to b via
the sequence of edge types isa, isa1 (the inverse of
isa), and AthletePlaysInLeague, which corresponds
to the Horn clause

(3)

isa(a, c)  isa1(c, a(cid:48))

 AthletePlaysInLeague(a(cid:48), b)
 AthletePlaysInLeague(a, b)

Suppose a random walk starts at a query node a
(say a=HinesWard). If HinesWard is linked to the
single concept node ProfessionalAthlete via isa, the
walk will reach that node with probability 1 after
If A is the set of ProfessionalAthletes
one step.
in the KB, then after two steps, the walk will have
probability 1/|A| of being at any a(cid:48)  A. If L is
the set of athletic leagues and (cid:96)  L, let A(cid:96) be the
set of athletes in league (cid:96): after three steps, the walk
will have probability |A(cid:96)|/|A| of being at any point
b  L.
In short, the ranking associated with this
path gives the prior probability of a value b being an
athletic league for awhich is useful as a feature in
a combined ranking method, although not by itself a
high-precision inference rule.

Note that the rankings produced by this expert
will change as the knowledge base evolvesfor
instance, if the system learns about proportionally
more soccer players than hockey players over time,
then the league rankings for the path of clause (3)
will change. Also, the ranking is specic to the
query node a. For instance, suppose the KB contains
facts which reect the ambiguity of the team name
Giants2 as in Figure 1. Then the path for clause (1)
above will give lower weight to b = NFL for a =
EliManning than to b = NFL for a = HinesWard.

The main contribution of this paper is to introduce
and evaluate PRA as an algorithm for making
probabilistic inference in large KBs. Compared to
Horn clause inference, the key characteristics of this
new inference method are as follows:

2San Franciscos Major-League Baseball and New Yorks

National Football League teams are both called the Giants.

 The evidence in support of inferring a relation
instance R(a, b) is based on many existing
paths between a and b in the current KB,
combined using a learned logistic function.

 The condence in an inference is sensitive to
the current state of the knowledge base, and the
specic entities being queried (since the paths
used in the inference have these properties).

 Experimentally,

the inference method yields
inferences

many more moderately-condent
than the Horn clauses learned by N-FOIL.

 The learning and inference are more efcient
than N-FOIL, in part because we can exploit
efcient approximation schemes for random
walks (Lao and Cohen, 2010a). The resulting
inference is as fast as 10 milliseconds per query
on average.

that

The Path Ranking Algorithm (PRA) we use is
similar to that described elsewhere (Lao and Cohen,
2010b), except
to achieve efcient model
learning, the paths between a and b are determined
by the statistics from a population of training
queries rather than enumerated completely. PRA
uses random walks to generate relational features
on graph data, and combine them with a logistic
regression model. Compared to other relational
models (e.g. FOIL, Markov Logic Networks), PRA
is extremely efcient at link prediction or retrieval
tasks, in which we are interested in identifying top
links from a large number of candidates, instead of
focusing on a particular node pair or joint inferences.

1.4 Related Work
The TextRunner system (Cafarella et al., 2006)
answers list queries on a large knowledge base
produced by open domain information extrac-
tion.
Spreading activation is used to measure
the closeness of any node to the query term
nodes. This approach is similar to the random
walk with restart approach which is used as a
baseline in our experiment. The FactRank system
(Jain and Pantel, 2010) compares different ways of
constructing random walks, and combining them
with extraction scores. However, the shortcoming
of both approaches is that they ignore edge type

information, which is important for achieving high
accuracy predictions.

The HOLMES system (Schoenmackers et al.,
2008) derives new assertions using a few manually
written inference rules.
A Markov network
corresponding to the grounding of these rules to
the knowledge base is constructed for each query,
and then belief propagation is used for inference.
In comparison, our proposed approach discovers
inference rules automatically from training data.

Similarly, the Markov Logic Networks (Richard-
son and Domingos, 2006) are Markov networks
constructed corresponding to the grounding of rules
to knowledge bases. In comparison, our proposed
approach is much more efcient by avoiding the
harder problem of joint inferences and by leveraging
efcient random walk schemes (Lao and Cohen,
2010a).

Below we describe our approach in greater detail,
provide experimental evidence of its value for
performing inference in NELLs knowledge base,
and discuss implications of this work and directions
for future research.

2 Approach

In this section, we rst describe how we formulate
link (relation) prediction on a knowledge base as
a ranking task. Then we review the Path Ranking
Algorithm (PRA) introduced by Lao and Cohen
(2010b; 2010a). After that, we describe two
improvements to the PRA method to make it more
suitable for the task of link prediction in knowledge
bases.
improvement helps PRA deal
with the large number of relations typical of large
knowledge bases. The second improvement aims at
improving the quality of inference by applying low
variance sampling.

The rst

2.1 Learning with NELLs Knowledge Base
For each relation R in the knowledge base we train a
model for the link prediction task: given a concept a,
nd all other concepts b which potentially have the
relation R(a, b). This prediction is made based on an
existing knowledge base extracted imperfectly from
the web. Although a model can potentially benet
from predicting multiple relations jointly, such joint
inference is beyond the scope of this work.

To ensure a reasonable number of

training
instances, we generate labeled training example
queries from 48 relations which have more than
100 instances in the knowledge base. We create
two tasks for each relationi.e., predicting b given
a and predicting a given b yielding 96 tasks in
all. Each node a which has relation R in the
knowledge base with any other node is treated as a
training query, the actual nodes b in the knowledge
base known to satisfy R(a, b) are treated as labeled
positive examples, and any other nodes are treated
as negative examples.

R1 . . .

2.2 Path Ranking Algorithm Review
We now review the Path Ranking Algorithm
introduced by Lao and Cohen (2010b). A relation
path P is dened as a sequence of
relations
R1 . . . R(cid:96), and in order to emphasize the types
associated with each step, P can also be written as
R(cid:96) T(cid:96), where Ti = range(Ri) =
T0
domain(Ri+1), and we also dene domain(P ) 
T0, range(P )  T(cid:96).
In the experiments in this
paper, there is only one type of node which we call
a concept, which can be connected through different
types of relations. In this notation, relations like the
team a certain player plays for, and the league a
certain players team is in can be expressed by the
paths below (respectively):

P1 : concept

P2 : concept

AtheletePlayesForTeam

 concept
 concept

AtheletePlayesForTeam

TeamPlaysInLeagure

 concept

For any relation path P = R1 . . . R(cid:96) and a
seed node s  domain(P ), a path constrained
random walk denes a distribution hs,P recursively
as follows. If P is the empty path, then dene

hs,P (e) =

if e = s

0, otherwise

(4)

(cid:26) 1,

then let P (cid:48) =

If P = R1 . . . R(cid:96) is nonempty,
R1 . . . R(cid:96)1, and dene

(cid:88)

hs,P (e) =

e(cid:48)range(P (cid:48))

hs,P (cid:48)(e(cid:48))  P (e|e(cid:48); R(cid:96)),

(5)

where P (e|e(cid:48); R(cid:96)) = R(cid:96)(e(cid:48),e)
|R(cid:96)(e(cid:48),)| is the probability of
reaching node e from node e(cid:48) with a one step random

walk with edge type R(cid:96). R(e(cid:48), e) indicates whether
there exists an edge with type R that connect e(cid:48) to e.
More generally, given a set of paths P1, . . . , Pn,
one could treat each hs,Pi(e) as a path feature for
the node e, and rank nodes by a linear model

1hs,P1(e) + 2hs,P2(e) + . . . nhs,Pn(e)

where i are appropriate weights for the paths. This
gives a ranking of nodes e related to the query node
s by the following scoring function

score(e; s) =

hs,P (e)P ,

(6)

(cid:88)

PP(cid:96)

where P(cid:96) is the set of relation paths with length  (cid:96).
Given a relation R and a set of node pairs
{(si, ti)} for which we know whether R(si, ti) is
true or not, we can construct a training dataset
D = {(xi, yi)}, where xi is a vector of all the
path features for the pair (si, ti)i.e.,
the j-th
component of xi is hsi,Pj (ti), and where yi is a
boolean variable indicating whether R(si, ti) is true.
We then train a logistic function to predict the
conditional probability P (y|x; ). The parameter
vector  is estimated by maximizing a regularized
form of the conditional likelihood of y given x. In
particular, we maximize the objective function
oi()  1||1  2||2,

(cid:88)

O() =

(7)

i

where 1 controls L1-regularization to help struc-
ture selection, and 2 controls L2-regularization
to prevent overtting.
oi() is the per-instance
weighted log conditional likelihood given by
oi() = wi[yi ln pi + (1  yi) ln(1  pi)],

(8)

is the predicted probability p(yi =
where pi
1|xi; ) = exp(T xi)
1+exp(T xi), and wi is an importance
weight
A biased sampling
procedure selects only a small subset of negative
samples to be included in the objective (see (Lao and
Cohen, 2010b) for detail).

to each example.

2.3 Data-Driven Path Finding
In prior work with PRA, P(cid:96) was dened as all
relation paths of length at most (cid:96). When the number
of edge types is small, one can generate P(cid:96) by

Table 1: Number of paths in PRA models of maximum
path length 3 and 4. Averaged over 96 tasks.

Table 2: Comparing PRA with RWR models. MRRs and
training times are averaged over 96 tasks.

all paths up to length L
+query support  = 0.01
+ever reach a target entity
+L1 regularization

(cid:96)=3
15, 376
522
136
63

(cid:96)=4
1, 906, 624
5016
792
271

(cid:96)=2

(cid:96)=3

MRR Time MRR Time
0.271
0.280
0.307

0.456
0.471
0.516

9.2s
15.4s

3.7s
5.7s

RWR(no train)
RWR
PRA

enumeration; however, for domains with a large
number of edge types (e.g., a knowledge base), it is
impractical to enumerate all possible relation paths
even for small (cid:96). For instance, if the number of
edge types related to each node type is 100, even
the number of length three paths types easily reaches
millions. For other domains like parsed natural
language sentences, useful relation paths can be as
long as ten relations (Minkov and Cohen, 2008). In
this case, even with smaller number of possible edge
types, the total number of relation paths is still too
large for systematic enumeration.

In order to apply PRA to these domains, we
modify the path generation procedure in PRA to
produce only relation paths which are potentially
useful for the task. Dene a query s to be supporting
a path P if hs,P (e) (cid:54)= 0 for any entity e. We require
that any path node created during path nding needs
to be supported by at least a fraction  of the training
queries si, as well as being of length no more than
(cid:96) (In the experiments, we set  = 0.01) We also
require that in order for a relation path to be included
in the PRA model, it must retrieve at least one target
entity ti in the training set. As we can see from
Table 1, together these two constraints dramatically
reduce the number of relation paths that need to be
considered, relative to systematically enumerating
all possible relation paths. L1 regularization reduces
the size of the model even more.

The idea of nding paths that connects nodes in a
graph is not new. It has been embodied previously in
rst-order learning systems (Richards and Mooney,
1992) as well as N-FOIL, and relational database
searching systems (Bhalotia et al., 2002). These
approaches consider a single query during path
nding. In comparison, the data-driven path nding
method we described here uses statistics from a
population of queries, and therefore can potentially
determine the importance of a path more reliably.

2.4 Low-Variance Sampling

Lao and Cohen (2010a) previously showed that
sampling techniques like nger printing and particle
ltering can signicantly speedup random walk
without sacricing retrieval quality. However, the
sampling procedures can induce a loss of diversity
in the particle population. For example, consider a
node in the graph with just two out links with equal
weights, and suppose we are required to generate
two walkers starting from this node. A disappointing
result is that with 50 percent chance both walkers
will follow the same branch, and leave the other
branch with no probability mass.

To overcome this problem, we apply a technique
called Low-Variance Sampling (LVS) (Thrun et
al., 2005), which is commonly used in robotics
to improve the quality of sampling.
Instead of
generating independent samples from a distribution,
LVS uses a single random number to generate all
samples, which are evenly distributed across the
(cid:80)
whole distribution. Note that given a distribution
P (x), any number r in [0, 1] points to exactly one
m=1..j P (m) 
x value, namely x = arg minj
r. Suppose we want to generate M samples from
P (x). LVS rst generates a random number r in
the interval [0, M1]. Then LVS repeatedly adds
the xed amount M1 to r and chooses x values
corresponding to the resulting numbers.

3 Results

This section reports empirical results of applying
random walk inference to NELLs knowledge base
after the 165th iteration of its learning process. We
rst investigate PRAs behavior by cross validation
on the training queries. Then we compare PRA and
N-FOILs ability to reliably infer new beliefs, by
leveraging the Amazon Mechanical Turk service.

3.1 Cross Validation on the Training Queries

Random Walk with Restart (RWR) (also called
personalized PageRank (Haveliwala, 2002)) is a
general-purpose graph proximity measure which
has been shown to be fairly successful for many
types of tasks. We compare PRA to two versions
of RWR on the 96 tasks of link prediction with
NELLs knowledge base. The two baseline methods
are an untrained RWR model and a trained RWR
model as described by Lao and Cohen (2010b). (In
brief, in the trained RWR model, the walker will
probabilistically prefer to follow edges associated
with different labels, where the weight for each edge
label is chosen to minimize a loss function, such as
Equation 7. In the untrained model, edge weights
are uniform.) We explored a range of values for
the regularization parameters L1 and L2 using cross
validation on the training data, and we x both
L1 and L2 parameters to 0.001 for all tasks. The
maximum path length is xed to 3.3

is relevant,

Table 2 compares the three methods using
5-fold cross validation and the Mean Reciprocal
Rank (MRR)4 measure, which is dened as the
inverse rank of the highest ranked relevant result
If the the rst returned
in a set of results.
result
then MRR is 1.0, otherwise,
it is smaller than 1.0.
Supervised training can
signicantly improve retrieval quality (p-value=9 
108 comparing untrained and trained RWR), and
leveraging path information can produce further
improvement (p-value=4  104 comparing trained
RWR with PRA). The average training time for a
predicate is only a few seconds.

We also investigate the effect of low-variance
sampling on the quality of prediction. Figure 2 com-
pares independent and low variance sampling when
applied to nger printing and particle ltering (Lao
and Cohen, 2010a). The horizontal axis corresponds
to the speedup of random walk compared with
exact inference, and the vertical axis measures the
quality of prediction by MRR with three fold cross
validation on the training query set. Low-variance

3Results with maximum length 4 are not reported here.
Generally models with length 4 paths produce slightly better
results, but are 4-5 times slower to train

M RR = 1|Q|

qQ

rank of the rst correct answer for q

1

4For a set of queries Q,

(cid:80)

Figure 2: Compare inference speed and quality over 96
tasks. The speedup is relative to exact inference, which is
on average 23ms per query.

sampling can improve prediction for both nger
printing and particle ltering. The numbers on the
curves indicate the number of particles (or walkers).
When using a large number of particles, the particle
ltering methods converge to the exact inference.
Interestingly, when using a large number of walkers,
the nger printing methods produce even better
prediction quality than exact inference. Lao and
Cohen noticed a similar improvement on retrieval
tasks, and conjectured that it is because the sampling
inference imposes a regularization penalty on longer
relation paths (2010a).

3.2 Evaluation by Mechanical Turk
The cross-validation result above assumes that the
knowledge base is complete and correct, which
we know to be untrue. To accurately compare
PRA and N-FOILs ability to reliably infer new
beliefs from an imperfect knowledge base, we
use human assessments obtained from Amazon
Mechanical Turk.
labeling costs, and
since our goal is to improve the performance of
NELL, we do not include RWR-based approaches
in this comparison. Among all the 24 functional
predicates, N-FOIL discovers condent rules for
8 of them (it produces no result for the other 16
predicates). Therefore, we compare the quality
of PRA to N-FOIL on these 8 predicates only.
Among all the 72 non-functional predicateswhich

To limit

0.40.5012345MRRRandom Walk SpeedupExactIndependent FingerprintingLow Variance FingerprintingIndependent FilteringLow Variance Filtering10k1k10010k1k100kTable 3: The top two weighted PRA paths for tasks on which N-FOIL discovers condent rules. c stands for concept.
ID

PRA Path (Comment)

athletePlaysForTeam

 c (teams with many players in the athletes league)
 c (teams that play against many teams in the athletes league)

teamAgainstTeam

players

leagueTeams

leaguePlayers

athletePlaysSport

athletePlaysInLeague

athletePlaysInLeague

 c

 c
 c

athletePlaysForTeam
 c
athletePlaysInLeague
c
 c
c
athletePlaysInLeague
 c
c
c isa c isa1 c
athletePlaysSport
c isa c isa1 c
 c
c
stadiumLocatedInCity
 c teamHomeStadium
c stadiumHomeTeam
 c
latitudeLongitude
c
teamHomeStadium
 c
c
 c
c teamMember
teamPlaysInCity
 c
c teamHomeStadium
 c stadiumHomeTeam
c teamHomeStadium
teamPlaysInLeague
 c
c
 c
c
teamPlaysSport
c isa c isa1 c
 c
c

 c

 c

teamPlaysAgainstTeam

teamPlaysInLeague

teamPlaysInCity

teamPlaysSport

leagueTeams

players

1
2

3
4

5
6

7
8

9
10

11
12

13
14

15
16

athletePlaysInLeague

 c (the league that players of a certain sport belong to)

athletePlaysInLeague

 c (popular leagues with many players)

athletePlaysSport

 c (popular sports of all the athletes)

superpartOfOrganization

 c

teamPlaysSport

 c (popular sports of a certain league)

 c
 c

latitudeLongitudeOf

stadiumLocatedInCity

 c (city of the stadium with the same team)
 c (city of the stadium with the same location)

stadiumLocatedInCity

cityStadiums

 c (stadiums located in the same city with the query team)

athletePlaysForTeam

 c teamHomeStadium

 c (home stadium of teams which share players with the query)

stadiumLocatedInCity

 c (city of the teams home stadium)
 c

teamPlaysInCity

 c (city of teams with the same home stadium as the query)

athletePlaysInLeague

 c (the league that the query teams members belong to)

teamPlaysInLeague

 c (the league that the query teams competing team belongs to)

teamPlaysSport

 c (sports played by many teams)

teamPlaysSport

 c (the sport played by other teams in the league)

Table 4: Amazon Mechanical Turk evaluation for the promoted knowledge. Using paired t-test at task level, PRA is
not statistically different from N-FOIL for p@10 (p-value=0.3), but is signicantly better for p@100 (p-value=0.003)

Pmajority #Paths p@10 p@100 p@1000 #Rules #Query p@10 p@100 p@1000

Task
athletePlaysForTeam
athletePlaysInLeague
athletePlaysSport
stadiumLocatedInCity
teamHomeStadium
teamPlaysInCity
teamPlaysInLeague
teamPlaysSport
average
teamMember
companiesHeadquarteredIn
publicationJournalist
producedBy
competesWith
hasOfceInCity
teamWonTrophy
worksFor
average

0.07
0.60
0.73
0.05
0.02
0.10
0.26
0.42
0.28
0.01
0.05
0.02
0.19
0.19
0.03
0.24
0.13
0.11

PRA

0.46
0.4
0.84
1.0
0.78
1.0
0.62
0.9
0.48
0.3
0.86
1.0
0.70
1.0
0.60
0.7
0.668
0.79
0.64
0.8
0.54
0.6
0.70
0.7
0.58
0.5
0.56
0.6
0.84
0.9
0.50
0.5
0.6
0.60
0.650 0.620

125
15
34
18
66
29
36
21
43
203
42
25
13
74
262
56
62
92

0.66
0.80
0.70
0.54
0.34
0.62
0.64
0.62
0.615
0.48
0.60
0.64
0.68
0.72
0.60
0.46
0.74
0.615

N-FOIL

0.6
0.9
1.0
0.7
0.2
0.9
0.9
0.9
0.76

0.08
0.80
0.82
0.16
0.02
0.56
0.18
0.42
0.38

1(+1)
3(+30)
2(+30)
1(+0)
1(+0)
1(+0)
4(+151)
4(+86)

7
332
224
25
2
60
30
48
91

0.01
0.24
0.18
0.00
0.00
0.06
0.02
0.02
0.07

N-FOIL does not produce results

for non-functional predicates

N-FOIL cannot be applied toPRA exhibits a wide
range of performance in cross-validation. The are 43
tasks for which PRA obtains MRR higher than 0.4
and builds a model with more than 10 path features.
We randomly sampled 8 of these predicates to be
evaluated by Amazon Mechanical Turk.

Table 3 shows the top two weighted PRA features
for each task on which N-FOIL can successfully
learn rules. These PRA rules can be categorized into
broad coverage rules which behave like priors over
correct answers (e.g. 1-2, 4-6, 15), accurate rules
which leverage specic relation sequences (e.g. 9,
11, 14), rules which leverage information about the
synonyms of the query node (e.g. 7-8, 10, 12),
and rules which leverage information from a local
neighborhood of the query node (e.g. 3, 12-13, 16).
The synonym paths are useful, because an entity
may have multiple names on the web. We nd
that all 17 general rules (no specialization) learned
by N-FOIL can be expressed as length two relation
paths such as path 11. In comparison, PRA explores
a feature space with many length three paths.

For each relation R to be evaluated, we generate
test queries s which belong to domain(R). Queries
which appear in the training set are excluded. For
each query node s, we applied a trained model
(either PRA or N-FOIL) to generate a ranked list
of candidate t nodes. For PRA, the candidates
are sorted by their scores as in Eq. (6).
For
N-FOIL, the candidates are sorted by the estimated
accuracies of the rules as in Eq. (2) (which generate
the candidates). Since there are about 7 thousand
(and 13 thousand) test queries s for each functional
(and non-functional) predicate R, and there are
(potentially) thousands of candidates t returned for
each query s, we cannot evaluate all candidates of
all queries. Therefore, we rst sort the queries s for
each predicate R by the scores of their top ranked
candidate t in descending order, and then calculate
precisions at top 10, 100 and 1000 positions for the
list of result R(sR,1, tR,1
), ..., where
sR,1 is the rst query for predicate R, tR,1
is its rst
candidate, sR,2 is the second query for predicate R,
tR,2
is its rst candidate, so on and so forth. To
1
reduce the labeling load, we judge all top 10 queries
for each predicate, but randomly sample 50 out of
the top 100, and randomly sample 50 out of the

), R(sR,2, tR,2

1

1

1

Table 5: Comparing Mechanical Turk workers voted
assessments with our gold standard labels based on 100
samples.

AMT=F AMT=T

Gold=F
Gold=T

25%
11%

15%
49%

top 1000. Each belief is evaluated by 5 workers
at Mechanical Turk, who are given assertions like
Hines Ward plays for the team Steelers, as well
as Google search links for each entity, and the
combination of both entities.
Statistics shows
that the workers spend on average 25 seconds to
judge each belief. We also remove some workers
judgments which are obviously incorrect5. We
sampled 100 beliefs, and compared their voted result
to gold-standard labels produced by one author of
this paper. Table 5 shows that 74% of the time the
workers voted result agrees with our judgement.

Table 4 shows the evaluation result.

The
Pmajority column shows for each predicate the
accuracy achieved by the majority prediction: given
a query R(a, ?), predict
the b that most often
satises R over all possible a in the knowledge
base. Thus, the higher Pmajority is, the simpler
the task.
Predicting the functional predicates
is generally easier predicting the non-functional
predicates. The #Query column shows the number
of queries on which N-FOIL is able to match any
of its rules, and hence produce a candidate belief.
For most predicates, N-FOIL is only able to produce
results for at most a few hundred queries.
In
comparison, PRA is able to produce results for 6,599
queries on average for each functional predicate, and
12,519 queries on average for each non-functional
predicate. Although the precision at 10 (p@10) of
N-FOIL is comparable to that of PRA, precision
at 10 and at 1000 (p@100 and p@1000) are much
lower6.

The #Path column shows the number of paths
learned by PRA, and the #Rule column shows the
number of rules learned by N-FOIL, with the num-
bers before brackets correspond to unspecialized
rules, and the numbers in brackets correspond to

5Certain workers label all the questions with the same

answer

6If a method makes k predictions, and k < n, then p@n is

the number correct out of the k predictions, divided by n

specialized rules. Generally, specialized rules have
much smaller recall than unspecialized rules. There-
fore, the PRA approach achieves high recall partially
by combining a large number of unspecialized paths,
which correspond to unspecialized rules. However,
learning more accurate specialized paths is part of
our future work.

A signicant advantage of PRA over N-FOIL is
that it can be applied to non-functional predicates.
The last eight
rows of Table 4 show PRAs
performance on eight of these predicates. Compared
to the result on functional predicates, precisions
at 10 and at 100 of non-functional predicates
are slightly lower, but precisions at 1000 are
comparable. We note that for some predicates
precision at 1000 is better than at 100. After
some investigation we found that for many relations,
the top portion of the result list is more diverse:
i.e. showing products produced by different com-
panies, journalist working at different publications.
While the lower half of the result
is more
homogeneous: i.e. showing relations concentrated
on one or two companies/publications. On the
other hand,
through the process of labeling the
Mechanical Turk workers seem to build up a prior
about which company/publication is likely to have
correct beliefs, and their judgments are positively
biased towards these companies/publications. These
two factors combined together result in positive bias
towards the lower portion of the result list. In future
work we hope to design a labeling strategy which
avoids this bias.

list

4 Conclusions and Future Work

We have shown that a soft inference procedure based
on a combination of constrained, weighted, random
walks through the knowledge base graph can be
used to reliably infer new beliefs for the knowledge
base. We applied this approach to a knowledge
base of approximately 500,000 beliefs extracted
imperfectly from the web by NELL. This new
system improves signicantly over NELLs earlier
Horn-clause learning and inference method:
it
obtains nearly double the precision at rank 100. The
inference and learning are both very efcientour
experiment shows that the inference time is as fast
as 10 milliseconds per query on average, and the

training for a predicate takes only a few seconds.

There are several prominent directions for future
work. First, inference starting from both the query
nodes and target nodes (Richards and Mooney,
1992) can be much more efcient in discovering
long paths than just inference from the query nodes.
Second,
inference starting from the target nodes
of training queries is a potential way to discover
specialized paths (with grounded nodes). Third,
generalizing inference paths to inference trees or
graphs can produce more expressive random walk
inference models. Overall, we believe that random
walk is a promising way to scale up relational
learning to domains with very large data sets.

Acknowledgments
This work was supported by NIH under grant
R01GM081293, by NSF under grant IIS0811562,
by DARPA under awards FA8750-08-1-0009 and
AF8750-09-C-0179, and by a gift from Google.
We thank Geoffrey J. Gordon for the suggestion
of applying low variance sampling to random walk
inference. We also thank Bryan Kisiel for help with
the NELL system.

