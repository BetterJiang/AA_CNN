inspired by google sets , we consider the problem of retrieving items from a concept or cluster , given a query consisting of a few items from that cluster .
we formulate this as a bayesian inference problem and de - scribe a very simple algorithm for solving it .
our algorithm uses a model - based concept of a cluster and ranks items using a score which evaluates the marginal probability that each item belongs to a cluster containing the query items .
for exponential family models with conjugate priors this marginal probability is a simple function of sufcient statistics .
we focus on sparse binary data and show that our score can be evaluated ex - actly using a single sparse matrix multiplication , making it possible to apply our algorithm to very large datasets .
we evaluate our algorithm on three datasets : retrieving movies from eachmovie , nding completions of author sets from the nips dataset , and nding completions of sets of words appearing in the grolier encyclopedia .
we compare to google sets and show that bayesian sets gives very reasonable set completions .
what do jesus and darwin have in common ? other than being associated with two different views on the origin of man , they also have colleges at cambridge univer - sity named after them .
if these two names are entered as a query into google sets ( http : / / labs . google . com / sets ) it returns a list of other colleges at cambridge .
google sets is a remarkably useful tool which encapsulates a very practical and interest - ing problem in machine learning and information retrieval . 123 consider a universe of items d .
depending on the application , the set d may consist of web pages , movies , people , words , proteins , images , or any other object we may wish to form queries on .
the user provides a query in the form of a very small subset of items dc d .
the assumption is that the elements in dc are examples of some concept / class / cluster in the data .
the algorithm then has to provide a completion to the set dcthat is , some set d123 c d which presumably includes all the elements in dc and other elements in d which are also in this concept / class / cluster123
zg is also at cald , carnegie mellon university , pittsburgh pa 123
123google sets is a large - scale clustering algorithm that uses many millions of data instances extracted from web data ( simon tong , personal communication ) .
we are unable to describe any details of how the algorithm works due its proprietary nature .
123from here on , we will use the term cluster to refer to the target concept .
we can view this problem from several perspectives .
first , the query can be interpreted as elements of some unknown cluster , and the output of the algorithm is the completion of that cluster .
whereas most clustering algorithms are completely unsupervised , here the query provides supervised hints or constraints as to the membership of a particular cluster .
we call this view clustering on demand , since it involves forming a cluster once some elements of that cluster have been revealed .
an important advantage of this approach over traditional clustering is that the few elements in the query can give useful information as to the features which are relevant for forming the cluster .
for example , the query bush , nixon , reagan suggests that the features republican and us president are relevant to the cluster , while the query bush , putin , blair suggests that current and world leader are relevant .
given the huge number of features in many real world data sets , such hints as to feature relevance can produce much more sensible clusters .
second , we can think of the goal of the algorithm to be to solve a particular information re - trieval problem ( 123 , 123 , 123 ) .
as in other retrieval problems , the output should be relevant to the query , and it makes sense to limit the output to the top few items ranked by relevance to the query .
in our experiments , we take this approach and report items ranked by relevance .
our relevance criterion is closely related to a bayesian framework for understanding patterns of generalization in human cognition ( 123 ) .
123 bayesian sets let d be a data set of items , and x d be an item from this set .
assume the user provides a query set dc which is a small subset of d .
our goal is to rank the elements of d by how well they would t into a set which includes dc .
intuitively , the task is clear : if the set d is the set of all movies , and the query set consists of two animated disney movies , we expect other animated disney movies to be ranked highly .
we use a model - based probabilistic criterion to measure how well items t into dc .
having observed dc as belonging to some concept , we want to know how probable it is that x also belongs with dc .
this is measured by p ( x|dc ) .
ranking items simply by this probability is not sensible since some items may be more probable than others , regardless of dc .
for example , under most sensible models , the probability of a string decreases with the number of characters , the probability of an image decreases with the number of pixels , and the probability of any continuous variable decreases with the precision to which it is measured .
we want to remove these effects , so we compute the ratio :
score ( x ) = p ( x|dc )
where the denominator is the prior probability of x and under most sensible models will scale exactly correctly with number of pixels , characters , discretization level , etc .
using bayes rule , this score can be re - written as :
score ( x ) = p ( x , dc )
which can be interpreted as the ratio of the joint probability of observing x and dc , to the probability of independently observing x and dc .
intuitively , this ratio compares the prob - ability that x and dc were generated by the same model with the same , though unknown , parameters , to the probability that x and dc came from models with different parameters and 123 ( see gure 123 ) .
finally , up to a multiplicative constant independent of x , the score can be written as : score ( x ) = p ( dc|x ) , which is the probability of observing the query set given x ( i . e .
the likelihood of x ) .
from the above discussion , it is still not clear how one would compute quantities such as p ( x|dc ) and p ( x ) .
a natural model - based way of dening a cluster is to assume that
figure 123 : our bayesian score compares the hypotheses that the data was generated by each of the above graphical models .
the data points in the cluster all come independently and identically distributed from some simple parameterized statistical model .
assume that the parameterized model is p ( x| ) where are the parameters .
if the data points in dc all belong to one cluster , then under this denition they were generated from the same setting of the parameters; however , that setting is unknown , so we need to average over possible parameter values weighted by some prior density on parameter values , p ( ) .
using these considerations and the basic rules of probability we arrive at :
p ( x| ) p ( ) d
p ( xi| ) p ( ) d
p ( x| ) p ( |dc ) d
p ( |dc ) = p ( dc| ) p ( )
we are now fully equipped to describe the bayesian sets algorithm :
bayesian sets algorithm
x d , a prior on the model parameters p ( )
background : a set of items d , a probabilistic model p ( x| ) where input : a query dc = ( xi ) d for all x d do
score ( x ) = p ( x|dc )
output : return elements of d sorted by decreasing score
we mention two properties of this algorithm to assuage two common worries with bayesian methodstractability and sensitivity to priors :
for the simple models we will consider , the integrals ( 123 ) - ( 123 ) are analytical .
in fact , for the model we consider in section 123 computing all the scores can be reduced to a single sparse matrix multiplication .
although it clearly makes sense to put some thought into choosing sensible mod - els p ( x| ) and priors p ( ) , we will show in 123 that even with very simple models and almost no tuning of the prior one can get very competitive retrieval results .
in practice , we use a simple empirical heuristic which sets the prior to be vague but centered on the mean of the data in d .
123 sparse binary data
we now derive in more detail the application of the bayesian sets algorithm to sparse binary data .
this type of data is a very natural representation for the large datasets we used in our evaluations ( section 123 ) .
applications of bayesian sets to other forms of data ( real - valued , discrete , ordinal , strings ) are also possible , and especially practical if the statistical model is a member of the exponential family ( section 123 ) .
assume each item xi dc is a binary vector xi = ( xi123 , .
, xij ) where xij ( 123 , 123 ) , and that each element of xi has an independent bernoulli distribution :
the conjugate prior for the parameters of a bernoulli distribution is the beta distribution :
p ( | , ) =
( j + j )
where and are hyperparameters , and the gamma function is a generalization of the factorial function .
for a query dc = ( xi ) consisting of n vectors it is easy to show that :
p ( dc| , ) =y i=123 xij and j = j + n pn
( j + j )
where j = j +pn
( j + j )
i=123 xij .
for an item x = ( x123
the score , written with the hyperparameters explicit , can be computed as follows : ( j +xj ) ( j +123xj )
( j +j +n )
score ( x ) = p ( x|dc , , )
( j +j +n +123 )
( j +j )
( j +j +123 )
( j ) ( j )
( j +xj ) ( j +123xj )
( j ) ( j )
this daunting expression can be dramatically simplied .
we use the fact that ( x ) = ( x 123 ) ( x 123 ) for x > 123
for each j we can consider the two cases xj = 123 and xj = 123 and separately .
for xj = 123 we have a contribution .
for xj = 123 we have a contribution j +j
putting these together we get :
j +j +n
j +j +n
log score ( x ) = c +x
j + j + n
the log of the score is linear in x :
log ( j + j ) log ( j + j + n ) + log j log j
if we put the entire data set d into one large matrix x with j columns , we can compute the vector s of log scores for all points using a single matrix vector multiplication
qj = log j log j log j + log j
for sparse data sets this linear operation can be implemented very efciently .
each query dc corresponds to computing the vector q and scalar c .
this can also be done efciently if the query is also sparse , since most elements of q will equal log j log ( j + n ) which is independent of the query .
s = c + xq
123 exponential families
we generalize the above result to models in the exponential family .
the distribution for such models can be written in the form p ( x| ) = f ( x ) g ( ) exp ( >u ( x ) ) , where u ( x ) is a k - dimensional vector of sufcient statistics , are the natural parameters , and f and g are non - negative functions .
the conjugate prior is p ( | , ) = h ( , ) g ( ) exp ( > ) , where and are hyperparameters , and h normalizes the distribution .
given a query dc = ( xi ) with n items , and a candidate x , it is not hard to show that the score for the candidate is :
score ( x ) = h ( + 123 , + u ( x ) ) h ( + n , +p h ( , ) h ( + n + 123 , + u ( x ) +p
this expression helps us understand when the score can be computed efciently .
first of all , the score only depends on the size of the query ( n ) , the sufcient statistics computed from each candidate , and from the whole query .
it therefore makes sense to precompute u , a matrix of sufcient statistics corresponding to x .
second , whether the score is a linear operation on u depends on whether log h is linear in the second argument .
this is the case for the bernoulli distribution , but not for all exponential family distributions .
however , for many distributions , such as diagonal covariance gaussians , even though the score is nonlinear in u , it can be computed by applying the nonlinearity elementwise to u .
for sparse matrices , the score can therefore still be computed in time linear in the number of non - zero elements of u .
we ran our bayesian sets algorithm on three different datasets : the groliers encyclo - pedia dataset , consisting of the text of the articles in the encyclopedia , the eachmovie dataset , consisting of movie ratings by users of the eachmovie service , and the nips au - thors dataset , consisting of the text of articles published in nips volumes 123 - 123 ( spanning the 123 - 123 conferences ) .
the groliers dataset is 123 articles by 123 words , where the entries are the number of times each word appears in each document .
we preprocess ( binarize ) the data by column normalizing each word , and then thresholding so that a ( ar - ticle , word ) entry is 123 if that word has a frequency of more than twice the article mean .
we do essentially no tuning of the hyperparameters .
we use broad empirical priors , where = cm , = c ( 123m ) where m is a mean vector over all articles , and c = 123
the analogous priors are used for both other datasets .
the eachmovie dataset was preprocessed , rst by removing movies rated by less than 123 people , and people who rated less than 123 movies .
then the dataset was binarized so that a ( person , movie ) entry had value 123 if the person gave the movie a rating above 123 stars ( from a possible 123 - 123 stars ) .
the data was then column normalized to account for overall movie popularity .
the size of the dataset after preprocessing was 123 people by 123 movies .
finally the nips author dataset ( 123 words by 123 authors ) , was preprocessed very similarly to the grolier dataset .
it was binarized by column normalizing each author , and then thresholding so that a ( word , author ) entry is 123 if the author uses that word more fre - quently than twice the word mean across all authors .
the results of our experiments , and comparisons with google sets for word and movie queries are given in tables 123 and 123
unfortunately , nips authors have not yet achieved the kind of popularity on the web necessary for google sets to work effectively .
instead we list the top words associated with the cluster of authors given by our algorithm ( table 123 ) .
the running times of our algorithm on all three datasets are given in table 123
all experi - ments were run in matlab on a 123ghz pentium 123 , toshiba laptop .
our algorithm is very fast both at pre - processing the data , and answering queries ( about 123 sec per query ) .
table 123 : for each dataset we give the size of that dataset along with the time taken to do the ( one - time ) preprocessing and the time taken to make a query ( both in seconds ) .
query : warrior , soldier
query : fish , water , coral
table 123 : clusters of words found by google sets and bayesian sets based on the given queries .
the top few are shown for each query and each algorithm .
bayesian sets was run using grolier
it is very difcult to objectively evaluate our results since there is no ground truth for this task .
one persons idea of a good query cluster may differ drastically from another persons .
we chose to compare our algorithm to google sets since it was our main inspiration and it is currently the most public and commonly used algorithm for performing this task .
since we do not have access to the google sets algorithm it was impossible for us to run their method on our datasets .
moreover , google sets relies on vast amounts of web data , which we do not have .
despite those two important caveats , google sets clearly knows a lot about movies123 and words , and the comparison to bayesian sets is informative .
we found that google sets performed very well when the query consisted of items which can be found listed on the web ( e . g .
cambridge colleges ) .
on the other hand , for more abstract concepts ( e . g .
soldier and warrior , see table 123 ) our algorithm returned more while we believe that most of our results are self - explanatory , there are a few details that we would like to elaborate on .
the top query in table 123 consists of two classic romantic movies ,
123in fact , one of the example queries on the google sets website is a query of movie titles .
query : gone with the wind , casablanca
gone with the wind ( 123 )
ernest saves christmas ( 123 )
citizen kane ( 123 ) pet detective ( 123 )
wizard of oz ( 123 ) the godfather ( 123 )
lawrence of arabia ( 123 ) on the waterfront ( 123 ) query : mary poppins , toy story
gone with the wind ( 123 )
the african queen ( 123 )
the philadelphia story ( 123 )
my fair lady ( 123 )
the adventures of robin hood ( 123 )
the maltese falcon ( 123 )
singing in the rain ( 123 )
it happened one night ( 123 )
query : cutthroat island , last action hero
toy story 123
the fast and the furious
winnie the pooh
the love bug
last action hero
end of days
bedknobs and broomsticks
the color of night
but im a cheerleader
the parent trap
who framed roger rabbit
the sound of music
addams family i addams family ii
last action hero
kull the conqueror vampire in brooklyn
village of the damned
table 123 : clusters of movies found by google sets and bayesian sets based on the given queries .
the top 123 are shown for each query and each algorithm .
bayesian sets was run using the eachmovie
and while most of the movies returned by bayesian sets are also classic romances , hardly any of the movies returned by google sets are romances , and it would be difcult to call ernest saves christmas either a romance or a classic .
both cutthroat island and last action hero are action movie ops , as are many of the movies given by our algorithm for that query .
all the bayes sets movies associated with the query mary poppins and toy story are childrens movies , while 123 of google sets movies are not .
but im a cheerleader , while appearing to be a childrens movie , is actually an r rated movie involving lesbian and gay teens .
query : a . smola , b . scholkopf
query : l . saul , t . jaakkola
query : a . ng , r . sutton
table 123 : nips authors found by bayesian sets based on the given queries .
the top 123 are shown for each query along with the top 123 words associated with that cluster of authors .
bayesian sets was run using nips data from vol 123 - 123 ( 123 - 123 conferences ) .
the nips author dataset is rather small , and co - authors of nips papers appear very similar to each other .
therefore , many of the authors found by our algorithm are co - authors of a nips paper with one or more of the query authors .
an example where this is not the case is wim wiegerinck , who we do not believe ever published a nips paper with lawrence saul or tommi jaakkola , though he did have a nips paper on variational learning and graphical
as part of the evaluation of our algorithm , we showed 123 nave subjects the unlabeled results of bayesian sets and google sets for the queries shown from the eachmovie and groliers encyclopedia datasets , and asked them to choose which they preferred .
the results of this study are given in table 123
gone with the wind
% bayes sets
table 123 : for each evaluated query ( listed by rst query item ) , we give the percentage of re - spondents who preferred the results given by bayesian sets and the p - value rejecting the null hypothesis that google sets is preferable to bayesian sets on that particular query .
