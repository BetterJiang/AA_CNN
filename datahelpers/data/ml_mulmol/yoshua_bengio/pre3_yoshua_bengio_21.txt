abs the is a com for mat exp in pyt tha com the con of num syn wit the spe of opt nat mac lan .
the use com mat exp in a hig - lev des tha mim num syn and sem , whi bei sta typ and fun ( as opp to imp ) .
the exp all the to pro sym dif .
bef per com , the opt the cho of exp , tra the int c++ ( or cud for gpu ) , com the int dyn loa pyt mod , all aut .
com mac lea - ing alg imp wit the are fro 123 to 123 fas tha com alt ( inc tho imp wit c / c++ , num / sci and mat ) whe com for the cpu and bet 123 and 123 fas whe com for the gpu .
thi pap ill how to use the , out the sco of the com , pro ben on bot cpu and gpu pro , and exp its ove des .
pyt is a pow and exi lan for des lar - sca mat cal , but the pyt int - pre is in man cas a poo eng for exe the .
one rea is tha pyt use ful - edg pyt obj on the hea to rep sim num sca .
to red the ove in num cal , it is imp to use arr typ suc as num nda so tha sin pyt obj on the hea can sta for mul arr of num sca , eac sto efc in the hos pro
( num ) pro an n - dim arr dat typ , and man fun for ind , res , and per ele - men com ( exp , log , sin , etc . ) on ent arr at onc .
the fun are imp in c for use wit pyt pro .
how , the com of man suc num fun can be unn slo whe eac cal is dom by the cos of tra mem rat tha the cos of per cal ( alt ) .
( num ) goe one ste fur by pro a loo fus opt tha can glu sev ele - wis com tog .
unf - tun , num req an unu syn ( the exp mus be enc as a str wit the cod ) , and at the tim of thi wri , num is lim to opt ele - wis com .
( cyt ) and ( sci . wea ) add pyt per iss by off a sim way to han - wri cru seg of cod in c ( or a dia of pyt whi can be eas com to c , in cyt cas ) .
whi thi app can yie sig spe gai , it is lab - int : if the bot of a pro is a lar mat exp - sio com hun of ele ope , man
the cor aut
is wit uni de mon , e - mai :
pro opt can be tim - con and err - pro , mak an aut app to per opt
the , on the oth han , wor on a sym rep - tat of mat exp , pro by the use in a num - lik syn .
acc to the ful com gra of an exp ope the doo to adv fea suc as sym dif of com exp , but mor imp all the to per loc gra tra - tio tha can cor man unn , slo or num uns exp pat .
onc opt , the sam gra can be use to gen cpu as wel as gpu imp ( the lat usi cud ) wit req cha to use
the is sim to ( sym ) , in tha bot lib ma - nip sym mat gra , but the two pro hav a dis dif foc .
whi sym imp a ric set of mat ope of the kin exp in a mod com alg sys , the foc on fas , efc eva of pri arr - val exp .
the is fre ope sou sof , lic und the new ( 123 - cla ) bsd lic .
it dep upo num , and can opt use sci .
the inc man cus c and cud cod gen whi are abl to spe for par typ , siz , and sha of inp lev the cod gen req gcc ( cpu ) and nvc ( gpu ) com , res .
the can be ext wit cus gra exp , whi can lev sci . wea , py - cud , cyt , and oth num lib and com tec at the use dis .
the has bee act and con dev and use sin jan 123
it has bee use in the pre of num sci pap and as a tea pla for mac lea in gra cou at lun de mon .
doc and ins ins can be fou on the web ( the ) .
all the use sho sub to the ann mai lis ( low tra ) .
the are med tra mai lis for dev dis and use sup
thi pap is div as fol : cas stu : log reg sho how the can be use to sol a sim - ple pro in sta pre .
ben res pre som res of per ben on pro - lem rel to mac lea and exp eva .
wha in the giv an ove of the des of the .
lim and fut wor out cur lim of our imp and cur pla add to the .
of the 123 pyt in sci con .
( sci 123 )
cas stu : log reg
to get a sen of how the fee fro a use per - tiv , we wil loo at how to sol a bin log reg pro .
bin log reg is a cla mod par by a wei mat w and bia vec b .
the mod est the pro p ( y = 123 ) ( whi we wil den wit sho p ) tha the inp x bel to cla y = 123 as :
p ( y = 123 ( i ) ) = p ( i ) =
123 + ew x ( i ) +b
the goa is to opt the log pro of n tra exa , d = ( ( x ( i ) , y ( i ) ) , 123 < i n ) ) , wit res to w and b .
to max the log lik we wil ins min the ( ave ) neg log lik :
( cid : 123 ) ( w , b ) = 123
y ( i ) log p ( i ) + ( 123 y ( i ) ) log ( 123 p ( i ) )
to mak it a bit mor int , we can als inc an ( cid : 123 ) 123 pen on w , giv a cos fun e ( w , b ) den as :
e ( w , b ) = ( cid : 123 ) ( w , b ) + 123
in thi exa ,
tun par w and b wil be don thr sto gra des ( sgd ) on e ( w , b ) .
sto gra des is a met for min a dif los fun whi is the exp of som per - exa los ove a set of tra exa .
sgd est - mat thi exp wit an ave ove one or sev exa and per a ste in the app dir of ste des .
tho mor sop alg for num opt exi , in par for smo con fun suc as e ( w , b ) , sto gra des rem the met of cho whe the num of tra exa is too lar to t in mem , or in the set whe tra exa arr in a con str .
eve wit rel man dat siz , sgd can be par adv - geo for non - con los fun ( suc as tho exp in ben res ) , whe the sto can all the opt to esc sha loc min ( bot ) .
acc to the sgd alg , the upd on w is
w w 123
whe = 123 is the ste siz and n is the num of exa wit whi we wil app the gra ( i . e .
the num of row of x ) .
the upd on b is lik
b b 123
imp thi min pro in the in - vol the fol fou con ste : ( 123 ) dec sym - bol var , ( 123 ) usi the var to bui a sym exp gra , ( 123 ) com the fun , and ( 123 )
123 tak the mea in thi fas dec the cho of the reg coe and the sto gra ste siz fro the num of tra
cal sai fun to per num com .
the cod lis in fig 123 - 123 ill the ste wit a wor pro tha ts a log reg mod to
fig 123 : log reg , par 123 : dec var .
the cod in fig 123 dec fou sym var x , y w , and b to rep the dat and par of the mod .
eac ten var is str typ to inc its dat typ , its num of dim , and the dim alo whi it may bro ( lik num bro ) in ele - wis exp .
the var x is a mat of the def dat typ ( flo ) , and y is a vec of typ lon ( or int ) .
eac row of x wil sto an exa x ( i ) , and eac ele of y wil sto the cor lab y ( i ) .
the num of exa to use at onc rep a tra bet com and
the sha ( ) fun cre sha var for w and b and ass the ini val .
sha var beh muc lik oth the var , wit the exc tha the als hav a per val .
a sha var val is mai thr the exe of the pro and can be acc wit . get ( ) and . set ( ) , as sho in lin 123
fig 123 : log reg , par 123 : the com gra .
the cod in fig 123 spe the com gra req to per sto gra des on the pa - ram of our cos fun .
sin the int sha muc in com wit tha of num , lin 123 - 123 sho be sel - exp for any fam wit tha mod .
on lin 123 , we sta by den p ( y = 123 ( i ) ) = 123 as the sym - bol var p_1
not tha the mat mul and ele - wis exp fun are sim cal via the t . dot and t . exp fun , ana to num . dot and num . exp .
xen den the cro - ent los fun , whi is the com wit the ( cid : 123 ) 123 pen on lin 123 , to for the cos fun of eq ( 123 ) and den by cos .
lin 123 is cru to our imp of sgd , as it per sym dif of the sca - val cos var wit res to var w and b .
t . gra ope by ite bac ove the exp gra , app the cha rul of dif and bui sym exp for the gra on w and b .
as suc , gw and gb are als
123 : imp num : imp the . ten as t12 : fro the imp sha , fun : 123 : x = t . mat ( ) 123 : y = t . lve ( ) 123 : w = sha ( num . ran . ran ( 123 ) ) 123 : b = sha ( num . zer ( ( ) ) ) 123 : pri " ini mod : " 123 : pri w . get ( ) , b . get ( ) 123 : p_1 = 123 / ( 123 + t . exp ( - t . dot ( x , w ) - b ) ) 123 : xen = - y*t . log ( p_1 ) - ( 123 - y ) *t . log ( 123 - p_1 ) 123 : cos = xen . mea ( ) + 123 ( w** ) . sum ( ) 123 : gw , gb = t . gra ( cos , ( w , b ) ) 123 : pre = p_1 > 123 the : a cpu and gpu mat com in pyt
sym the var , rep e / w and e / b lin 123 den the act pre ( pre ) of the log reg by thr p ( y = 123 ( i ) ) .
fig 123 : log reg , par 123 : com .
the cod of fig 123 cre the two fun req to tra and tes our log reg mod .
the fun are cal obj tha com zer or mor out fro val giv for one or mor sym inp .
for exa , the pre fun com and ret the val of pre for a giv val of x .
par w and b are pas imp - all sha var are ava as inp to all fun as a con to the use .
lin 123 ( fig 123 ) whi cre the tra fun hig two oth imp fea of the fun : the pot for mul out and upd .
in our exa , tra com bot the pre ( pre ) of the cla as wel as the cro - ent err fun ( xen ) .
com bot out tog is com efc sin it all for the reu of int com , suc as dot ( x , w ) .
the opt upd par ena fun to hav sid - eff on sha var .
the upd arg is a dic whi spe how sha var sho be upd aft all oth com for the fun tak pla , jus bef the fun ret .
in our exa , cal the tra fun wil upd the par w and b wit new val as per the sgd alg .
fig 123 : log reg , par 123 : com .
our exa con ( fig 123 ) by usi the fun tra and pre to t the log reg mod .
our dat d in thi exa is jus fou ran vec and lab .
rep cal the tra fun ( lin 123 - 123 ) ts our par to the dat .
not tha cal a the fun is no dif tha cal a sta pyt fun : the gra tra , opt , com and cal of efc c - fun ( whe tar for the cpu or gpu ) hav all bee don und the hoo .
the arg and ret val of the fun are num nda obj tha int nor wit oth sci pyt lib and
fig 123 : fit a mul - lay per to sim dat wit var imp of sto gra des .
the mod hav 123 inp , 123 hid uni , a 123 - way cla , and are tra 123 exa at a tim .
the was dev to sim the imp of com hig - per mac lea alg .
thi sec pre per in two pro - int tas fro tha dom : tra a mul - lay per ( mlp ) and tra a con net .
we cho the arc bec of the pop in the mac lea com and the dif com dem .
lar mat - mat mul dom in the mlp exa and two - dim ima con wit sma ker are the maj bot in a con net .
mor inf abo the mod and the ass lea alg is ava fro the dee lea tut ( dlt ) .
the imp use in the ben are ava onl
cpu tim was car out on an an int ( r ) cor ( tm ) 123 duo cpu e12 @ 123 wit 123 gb of ram .
all imp wer lin aga the bla imp in the int mat ker lib , ver 123 . 123 and all to use onl one thr .
gpu tim was don on a gef gtx 123
cpu com wer don at dou - pre , whe gpu com wer don at sin -
our rst ben inv tra a sin lay mlp by sto gra des .
eac imp rep car out the fol ste : ( 123 ) mul 123 123 - ele inp vec by a 123 123 wei mat , ( 123 ) app an ele - wis hyp tan ope ( tan ) to the res , ( 123 ) mul the res of the tan ope by a 123 123 mat , ( 123 ) cla the res usi a mul - cla gen of log reg , ( 123 ) com the gra by per sim cal but in rev , and nal ( 123 ) add the gra to the par .
thi pro str ele - wis com and the use of bla rou .
fig 123 com the num of exa pro per sec acr dif imp .
we com
123 : pre = fun ( inp ( x ) , 123 : out ) 123 : tra = fun ( 123 : inp ( x , y ) , 123 : out ( pre , xen ) , 123 : upd ( w : w - 123 , b : b - 123 ) ) 123 : n = 123 : fea = 123 : d = ( num . ran . ran ( n , fea ) , 123 : num . ran . ran ( siz , low , hig ) ) 123 : tra = 123 : for i in ran ( tra ) : 123 : pre , err = tra ( d ( 123 ) , d ( 123 ) ) 123 : pri " fin mod : " , 123 : pri w . get ( ) , b . get ( ) 123 : pri " tar val for d " , d ( 123 ) 123 : pri " pre on d " , pre ( d ( 123 ) ) 123
of the 123 pyt in sci con .
( sci 123 )
fig 123 : fit a con net usi dif sof .
the ben str con of med - siz ( 123 by 123 ) ima wit sma ( 123 by 123 ) lte .
fig 123 : spe com bet num , num , and the for dif siz of inp on fou ele - wis for .
in eac sub , the sol blu lin rep the , the das red lin rep num , and per is plo wit res to num .
the ( rev #ec ) aga num 123 . 123 , mat - lab 123 . 123 , and tor 123 ( a mac lea lib wri in c / c++ ) ( tor ) on the cpu and gpu 123 for mat ( ( gpu ) ) on the gpu .
whe run on the cpu , the is 123 fas tha num , 123 fas tha mat , and 123 fas tha tor 123 the spe inc 123 on the gpu fro the cpu , a tot inc of 123 ove num ( cpu ) and 123 ove tor 123 ( cpu ) .
gpu bri abo a spe inc of onl 123 whe swi to the gpu for the mat imp , far les tha the 123 inc the ach thr cud
bec of the dif in imp efc con - tio net , we onl ben aga kno lib tha off a pre - exi imp .
we com aga ebl ( ebl ) and tor , two lib wri in c++ .
ebl was imp by yan lec lab at nyu , who hav don ext res in con net .
to put the res int per , we imp app hal ( no gra cal ) of the alg usi sci sig . con fun .
thi ben use con - vol of med siz ima ( 123 123 ) wit sma lte ( 123 123 ) .
fig 123 com the per of the ( bot cpu and gpu ) wit tha of com imp .
on the cpu , the is 123 fas tha ebl , its bes com .
thi adv is owe to the fac tha the com mor spe con rou .
the spe inc 123 on the gpu fro the cpu , a tot of 123 ove ebl ( cpu ) .
on the cpu , the is 123 fas tha sci eve tho sci is doi onl hal the com .
thi is bec sci con rou has not bee opt for thi app .
we als com the wit num and num for eva ele - wis exp on the cpu ( fig 123 ) .
123 tor was des and imp wit exi in min , not spe
( ron col , p . c . ) .
for sma amo of dat , the ext fun - cal ove of num and the mak the slo .
for lar amo of dat , and for mor com exp , the is fas bec it use an imp spe for eac
wha kin of wor doe the sup ?
the exp typ cov muc of the sam fun - tio as num , and inc som of wha can be fou in sci .
tab 123 lis som of the mos - use exp in the .
mor ext ref doc is ava
the str sui is its sup for str n - dim arr of int and oat poi val .
sig and uns int of all nat bit wid are sup , as are bot sin - pre and dou - pre oat .
sin - pre and dou - pre com num are als sup , but les so - for exa , gra thr sev mat fun are not imp .
rou 123 of exp for sin - pre n - dim arr hav gpu imp .
our goa is to pro gpu imp - tat for all exp sup by the .
ran num are pro in two way : via num ran mod , and via an int gen fro the mrg fam ( ecu ) .
the ran rep the num . ran . ran int , and act as a pro to num ran num gen and the var ran dis tha use it .
the mrg cla imp a dif ran num gen alg - rit ( cal mrg ) tha map nat to gpu arc - tec .
it is imp for bot the cpu and gpu so tha pro can pro the sam res on eit arc wit sac spe .
the mrg cla
123 up vs num + b** + 123 . 123 . 123 . 123 . 123 + 123 of vec a and b12 . 123 . 123 . 123 . 123 . 123 up vs num of vec a and b12 + b** the : a cpu and gpu mat com in pyt
+ , - , / , * , ** , / / , eq , neq , < , <= , > , >= , & , | , ^
all , eye , ( one , zer ) _li ,
bas sli ( see set and inc for sli lva ) ; lim - ite sup for adv ind
exp , log , tan ( h ) , cos ( h ) , sin ( h ) , rea , ima , sqr , flo , cei ,
all , any , mea , sum , min , max , var , pro , arg , arg , res ,
cho , inv , sol
con , fft , max
com row / col sto , lim ope - tor sup , dot , tra , con
sig , sof , mul - cla hin los
tab i . : ove of the cor fun .
thi lis is not exh , and is sup by the onl doc .
mor det are giv in tex for ite mar wit an ast .
dim is lik num . swa .
off a mor lim sel of ran num dis tha num tho : uni , nor , and mul .
spa vec and mat are sup via sci spa mod .
onl com - row and com - col for are sup by mos exp .
the are exp for pac and unp the spa typ , som ope sup ( e . g .
sca , neg ) , mat tra - sit , and mat mul wit bot spa and den mat .
spa exp cur hav no gpu equ -
the is als sup in the for arb pyt obj .
how , the are ver few exp tha mak use of tha sup bec the com pip wor on the bas of inf pro of int res .
if an int res can be an arb pyt obj , ver lit can be inf .
sti , it is occ use to hav suc obj in
the has bee dev to sup mac lea
fig 123 : the com pip for fun com for gpu .
fun com for the cpu omi the gpu tra ste
res , and tha has mot the inc of mor spe - ize exp typ suc as the log sig , the sof fun , and mul - cla hin los .
com by the . fun
wha hap und the hoo whe cre a fun ? thi sec out , in bro str , the sta of the com - pil pip .
pri to the sta , the exp gra is cop so tha the com pro doe not cha any in the gra bui by the use .
as ill in fig 123 , the exp gra is sub to sev tra : ( 123 ) can , ( 123 ) sta , ( 123 ) spe , ( 123 ) opt gpu tra , ( 123 ) cod gen .
the is som ove bet the tra , but at a hig lev the hav dif obj .
( the int rea sho not tha the tra cor rou , but not exa to the opt obj tha are imp in the pro
can : the can tra put the use exp gra int a sta for .
for exa , dup exp are mer int a sin exp .
two exp are con dup if the car out the sam ope and hav the sam inp .
sin the ex - pre are pur fun ( i . e . , can hav sid eff ) , the exp mus ret the sam val and thu it is saf to per the ope onc and reu the res .
the sym gra mec oft int red , so thi ste is qui imp .
for ano exa , sub - exp inv onl mul and div are int a sta fra for ( e . g .
a / ( ( ( a * b ) / c ) / d ) - > ( a * c * d ) / ( a * b ) - > ( c * d ) / ( b ) ) .
som use cal are eli in thi pha , for ins can out use of the a ter in the pre exa , but als red exp ( log ( x ) ) to x , and com out the val of any exp who inp are ful kno at com tim .
can sim and opt the gra to som ext , but fun is to col man dif exp int a sin
can tra gen 123
of the 123 pyt in sci con .
( sci 123 )
nor for so tha it is eas to rec exp pat in sub com sta .
sta : the sta tra imp the num sta of the com imp by the ex - pre gra .
for ins , con the fun log ( 123 + exp ( x ) ) , whi ten tow zer as lim , and x as lim .
due to lim in the rep of dou pre num , the com as wri yie inn for x > 123
the sta pha rep pat lik one wit an exp tha sim ret x whe x is suf lar ( usi dou , thi is acc bey the lea sig dig ) .
it sho be not tha can gua the sta of com .
it hel in som cas , but the use is sti adv to be war of num
spe : the spe tra rep exp wit fas one .
exp lik pow ( x , 123 ) be - com sqr ( x ) .
the als per mor ela spe - iza : for exa , exp inv sca - mul mat add and mul may bec bla gen mat mul ( gem ) nod and res , tra , and sub exp ( whi cre cop by def ) are rep by con - tim ver tha wor by ali mem .
exp sub in - vol ele - wis ope are fus tog ( as in num ) in ord to avo the cre and use of unn - ess tem var .
for ins , if we den the a + b ope on ten as map ( + , a , b ) , the an exp suc as map ( + , map ( * , a , b ) , c ) wou bec map ( lam ai , bi , ci : ai* , a , b , c ) .
if the use des to use the gpu , exp wit cor - spo gpu imp are sub in , and tra exp are int whe nee .
spe als int exp tha tre inp as wor buf .
suc exp use les mem and mak bet use of hie mem , but the mus be use wit car bec the eff des int res .
man exp ( e . g .
gem and all ele - wis one ) hav suc equ .
reu mem thi way all mor com to tak pla on gpu , whe mem is at a pre .
mov com to the gpu : eac exp in the is ass wit an imp tha run on eit the hos ( a hos exp ) or a gpu dev ( a gpu exp ) .
the gpu - tra tra rep hos exp wit gpu exp .
the maj of hos exp typ hav gpu equ and the pro is
the heu tha gui gpu all is sim : if any inp or out of an exp res on the gpu and the exp has a gpu equ , the the gpu equ is sub in .
sha var sto flo ten def to gpu sto , and the exp der fro the con def to usi gpu imp .
it is pos to exp for any flo var to res on the gpu , so one can sta the cha rea of opt and use the gpu eve in gra wit no sha var .
it is pos ( tho awk , and dis ) to spe exa whi com to per on the gpu by dis the
def gpu opt .
ten sto on the gpu use a spe int dat typ wit an int sim to the nda .
thi dat ful sup str ten , and arb num of dim .
the sup for str mea tha sev ope suc as the tra and sim sli ind can be per in
cod gen : the cod gen pha of the com - pil pro pro and loa dyn - com pyt mod wit spe imp for the exp in the com gra .
not all exp hav c ( tec c++ ) imp , but man ( rou 123 ) of the exp gen and com c or cud cod dur the . fun .
the maj of exp tha gen c cod spe the cod bas on the dty , bro pat , and num of dim of the arg .
a few exp , suc as the sma - lte con ( con ) , fur spe cod bas on the siz the arg wil hav .
why is it so imp to spe c cod in thi way ? mod x12 arc are rel for of cod tha doe not mak goo use tec suc as loo unr and pre con blo of mem , and onl the con exp goe to any gre len to gen man spe cas imp for the cpu .
by com , gpu arc are muc les for of cod tha is not car spe for the siz and phy lay of fun arg .
con , the cod gen for gpu exp lik gpu , gpu , and gpu gen a wid var of imp tha the res hos exp .
wit the cur gen of gra car , the dif in spe bet a nav imp and an opt imp of an exp - sio as sim as mat row sum can be an ord of mag or mor .
the fac tha the gpu nda - lik typ sup str ten mak it eve mor imp for the gpu cod gen to sup a var of mem lay .
the com - tim spe cud ker are int to the gpu per .
lim and fut wor
whi mos of the dev eff has bee dir at mak the pro fas cod , not as muc att has bee pai to the opt of the com pro its .
at pre , the com tim ten to gro sup - lin wit the siz of the exp gra .
the can dea wit gra up to a few tho nod , wit com tim typ on the ord of sec .
bey tha , it can be imp slo , unl som of the mor exp opt are dis , or pie of the gra are com -
a the fun cal als req mor ove ( on the ord of mic ) tha a nat pyt fun cal .
for thi rea , the is sui to app whe fun cor to exp tha are not too sma ( see fig
the set of typ and ope tha the pro con to gro , but it doe not cov all the fun -
the : a cpu and gpu mat com in pyt
the has ben fro the con of man mem of yos ben mac lea gro in the com sci dep ( dpa din et de rec ope ) at lun de mon , esp arn ber , thi ber - mah , oli del , dou eck , dum erh , phi ham , si - mon lem , pie - ant man , and fra sav .
the aut ack the sup of the fol age for res fun and com sup : nse , rqc , cif , sha and clu .
ali of num and cov onl a few fea of sci .
wra fun fro the and oth lib is oft str , but imp the gra or rel gra tra can be mor dif .
the doe not yet hav exp for spa or den mat inv , nor lin alg dec , alt wor on the is und out of the the tru .
sup for com num is als not as wid imp or as wel - tes as for int and oat poi num .
num arr wit non - num dty ( str , uni , pyt obj ) are not sup at pre .
we exp to imp sup for adv ind and lin alg in the com mon .
doc onl des how to add new ope and new gra tra - for .
the is cur an exp gpu ver of the sca ope , use for loo , and an exp laz - eva sch for bra con .
the lib has bee tun tow exp rel to mac lea wit neu net , and it is not as wel tes out of thi dom .
the is not a pow com alg sys , and it is an imp are of fut wor to imp its abi to rec num ins in com ele - wis exp gra .
deb the fun can req non - sta tec - niq and the spe too .
the rea is two - fol : 123 ) den of the exp is sep fro the exe , and 123 ) opt can int man cha to the com gra .
the thu pro sep exe mod for the fun , whi all for aut - mat deb and pro .
deb ent aut san che , whi ens tha all opt and gra tra are saf ( the com the res bef and aft the app ) , as wel as com the out of bot c and pyt imp .
we pla to ext gpu sup to the ful ran of c dat typ , but onl oat ten are sup as of thi wri .
the is als no sup for spa vec or mat on the gpu , alt alg fro the cus pac sho mak it eas to add at lea bas sup for spa
the is a mat exp com for pyt tra hig lev num - lik cod int mac lan for efc cpu and gpu com .
the ach goo per by min the use of tem - por var , min pre on fas mem cac , mak ful use of gem and gem bla sub , and gen fas c cod tha is spe to siz and con in the exp gra .
the imp of mac lea alg rel to neu net on one cor of an e12 cpu are up to 123 tim fas tha imp in num , 123 tim fas tha mat , and 123 tim fas tha a rel c++ lib .
usi a nvi gef gtx gpu , the is an add 123 tim fas .
one of the gre str is its abi to gen cus - mad cud ker , whi can not onl sig out cpu imp but alt gpu imp as wel .
( sci . wea ) sci wea mod .
htt : / / doc . sci .
