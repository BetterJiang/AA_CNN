we trained a large , deep convolutional neural network to classify the 123 million high - resolution images in the imagenet lsvrc - 123 contest into the 123 dif - ferent classes .
on the test data , we achieved top - 123 and top - 123 error rates of 123% and 123% which is considerably better than the previous state - of - the - art .
the neural network , which has 123 million parameters and 123 , 123 neurons , consists of ve convolutional layers , some of which are followed by max - pooling layers , and three fully - connected layers with a nal 123 - way softmax .
to make train - ing faster , we used non - saturating neurons and a very efcient gpu implemen - tation of the convolution operation .
to reduce overtting in the fully - connected layers we employed a recently - developed regularization method called dropout that proved to be very effective .
we also entered a variant of this model in the ilsvrc - 123 competition and achieved a winning top - 123 test error rate of 123% , compared to 123% achieved by the second - best entry .
current approaches to object recognition make essential use of machine learning methods .
to im - prove their performance , we can collect larger datasets , learn more powerful models , and use bet - ter techniques for preventing overtting .
until recently , datasets of labeled images were relatively small on the order of tens of thousands of images ( e . g . , norb ( 123 ) , caltech - 123 / 123 ( 123 , 123 ) , and cifar - 123 / 123 ( 123 ) ) .
simple recognition tasks can be solved quite well with datasets of this size , especially if they are augmented with label - preserving transformations .
for example , the current - best error rate on the mnist digit - recognition task ( <123% ) approaches human performance ( 123 ) .
but objects in realistic settings exhibit considerable variability , so to learn to recognize them it is necessary to use much larger training sets .
and indeed , the shortcomings of small image datasets have been widely recognized ( e . g . , pinto et al .
( 123 ) ) , but it has only recently become possible to col - lect labeled datasets with millions of images .
the new larger datasets include labelme ( 123 ) , which consists of hundreds of thousands of fully - segmented images , and imagenet ( 123 ) , which consists of over 123 million labeled high - resolution images in over 123 , 123 categories .
to learn about thousands of objects from millions of images , we need a model with a large learning capacity .
however , the immense complexity of the object recognition task means that this prob - lem cannot be specied even by a dataset as large as imagenet , so our model should also have lots of prior knowledge to compensate for all the data we dont have .
convolutional neural networks ( cnns ) constitute one such class of models ( 123 , 123 , 123 , 123 , 123 , 123 , 123 ) .
their capacity can be con - trolled by varying their depth and breadth , and they also make strong and mostly correct assumptions about the nature of images ( namely , stationarity of statistics and locality of pixel dependencies ) .
thus , compared to standard feedforward neural networks with similarly - sized layers , cnns have much fewer connections and parameters and so they are easier to train , while their theoretically - best performance is likely to be only slightly worse .
despite the attractive qualities of cnns , and despite the relative efciency of their local architecture , they have still been prohibitively expensive to apply in large scale to high - resolution images .
luck - ily , current gpus , paired with a highly - optimized implementation of 123d convolution , are powerful enough to facilitate the training of interestingly - large cnns , and recent datasets such as imagenet contain enough labeled examples to train such models without severe overtting .
the specic contributions of this paper are as follows : we trained one of the largest convolutional neural networks to date on the subsets of imagenet used in the ilsvrc - 123 and ilsvrc - 123 competitions ( 123 ) and achieved by far the best results ever reported on these datasets .
we wrote a highly - optimized gpu implementation of 123d convolution and all the other operations inherent in training convolutional neural networks , which we make available publicly123
our network contains a number of new and unusual features which improve its performance and reduce its training time , which are detailed in section 123
the size of our network made overtting a signicant problem , even with 123 million labeled training examples , so we used several effective techniques for preventing overtting , which are described in section 123
our nal network contains ve convolutional and three fully - connected layers , and this depth seems to be important : we found that removing any convolutional layer ( each of which contains no more than 123% of the models parameters ) resulted in in the end , the networks size is limited mainly by the amount of memory available on current gpus and by the amount of training time that we are willing to tolerate .
our network takes between ve and six days to train on two gtx 123 123gb gpus .
all of our experiments suggest that our results can be improved simply by waiting for faster gpus and bigger datasets to become available .
123 the dataset
imagenet is a dataset of over 123 million labeled high - resolution images belonging to roughly 123 , 123 categories .
the images were collected from the web and labeled by human labelers using ama - zons mechanical turk crowd - sourcing tool .
starting in 123 , as part of the pascal visual object challenge , an annual competition called the imagenet large - scale visual recognition challenge ( ilsvrc ) has been held .
ilsvrc uses a subset of imagenet with roughly 123 images in each of 123 categories .
in all , there are roughly 123 million training images , 123 , 123 validation images , and 123 , 123 testing images .
ilsvrc - 123 is the only version of ilsvrc for which the test set labels are available , so this is the version on which we performed most of our experiments .
since we also entered our model in the ilsvrc - 123 competition , in section 123 we report our results on this version of the dataset as well , for which test set labels are unavailable .
on imagenet , it is customary to report two error rates : top - 123 and top - 123 , where the top - 123 error rate is the fraction of test images for which the correct label is not among the ve labels considered most probable by the model .
imagenet consists of variable - resolution images , while our system requires a constant input dimen - sionality .
therefore , we down - sampled the images to a xed resolution of 123 123
given a rectangular image , we rst rescaled the image such that the shorter side was of length 123 , and then cropped out the central 123 patch from the resulting image .
we did not pre - process the images in any other way , except for subtracting the mean activity over the training set from each pixel .
so we trained our network on the ( centered ) raw rgb values of the pixels .
123 the architecture
the architecture of our network is summarized in figure 123
it contains eight learned layers ve convolutional and three fully - connected .
below , we describe some of the novel or unusual features of our networks architecture .
sections 123 - 123 are sorted according to our estimation of their importance , with the most important rst .
123 relu nonlinearity
the standard way to model a neurons output f as a function of its input x is with f ( x ) = tanh ( x ) or f ( x ) = ( 123 + ex ) 123
in terms of training time with gradient descent , these saturating nonlinearities are much slower than the non - saturating nonlinearity f ( x ) = max ( 123 , x ) .
following nair and hinton ( 123 ) , we refer to neurons with this nonlinearity as rectied linear units ( relus ) .
deep convolutional neural net - works with relus train several times faster than their equivalents with tanh units .
this is demonstrated in figure 123 , which shows the number of iterations re - quired to reach 123% training error on the cifar - 123 dataset for a particular four - layer convolutional net - work .
this plot shows that we would not have been able to experiment with such large neural networks for this work if we had used traditional saturating neuron we are not the rst to consider alternatives to tradi - tional neuron models in cnns .
for example , jarrett et al .
( 123 ) claim that the nonlinearity f ( x ) = |tanh ( x ) | works particularly well with their type of contrast nor - malization followed by local average pooling on the caltech - 123 dataset .
however , on this dataset the pri - mary concern is preventing overtting , so the effect they are observing is different from the accelerated ability to t the training set which we report when us - ing relus .
faster learning has a great inuence on the performance of large models trained on large datasets .
123 training on multiple gpus
figure 123 : a four - layer convolutional neural network with relus ( solid line ) reaches a 123% training error rate on cifar - 123 six times faster than an equivalent network with tanh neurons ( dashed line ) .
the learning rates for each net - work were chosen independently to make train - ing as fast as possible .
no regularization of any kind was employed .
the magnitude of the effect demonstrated here varies with network architecture , but networks with relus consis - tently learn several times faster than equivalents with saturating neurons .
a single gtx 123 gpu has only 123gb of memory , which limits the maximum size of the networks that can be trained on it .
it turns out that 123 million training examples are enough to train networks which are too big to t on one gpu .
therefore we spread the net across two gpus .
current gpus are particularly well - suited to cross - gpu parallelization , as they are able to read from and write to one anothers memory directly , without going through host machine memory .
the parallelization scheme that we employ essentially puts half of the kernels ( or neurons ) on each gpu , with one additional trick : the gpus communicate only in certain layers .
this means that , for example , the kernels of layer 123 take input from all kernel maps in layer 123
however , kernels in layer 123 take input only from those kernel maps in layer 123 which reside on the same gpu .
choosing the pattern of connectivity is a problem for cross - validation , but this allows us to precisely tune the amount of communication until it is an acceptable fraction of the amount of computation .
the resultant architecture is somewhat similar to that of the columnar cnn employed by ciresan et al .
( 123 ) , except that our columns are not independent ( see figure 123 ) .
this scheme reduces our top - 123 and top - 123 error rates by 123% and 123% , respectively , as compared with a net with half as many kernels in each convolutional layer trained on one gpu .
the two - gpu net takes slightly less time to train than the one - gpu net123
123the one - gpu net actually has the same number of kernels as the two - gpu net in the nal convolutional layer .
this is because most of the nets parameters are in the rst fully - connected layer , which takes the last convolutional layer as input .
so to make the two nets have approximately the same number of parameters , we did not halve the size of the nal convolutional layer ( nor the fully - conneced layers which follow ) .
therefore this comparison is biased in favor of the one - gpu net , since it is bigger than half the size of the two - gpu
123 local response normalization
relus have the desirable property that they do not require input normalization to prevent them from saturating .
if at least some training examples produce a positive input to a relu , learning will happen in that neuron .
however , we still nd that the following local normalization scheme aids x , y the activity of a neuron computed by applying kernel i at position generalization .
denoting by ai ( x , y ) and then applying the relu nonlinearity , the response - normalized activity bi x , y is given by
x , y = ai
where the sum runs over n adjacent kernel maps at the same spatial position , and n is the total number of kernels in the layer .
the ordering of the kernel maps is of course arbitrary and determined before training begins .
this sort of response normalization implements a form of lateral inhibition inspired by the type found in real neurons , creating competition for big activities amongst neuron outputs computed using different kernels .
the constants k , n , , and are hyper - parameters whose values are determined using a validation set; we used k = 123 , n = 123 , = 123 , and = 123 .
we applied this normalization after applying the relu nonlinearity in certain layers ( see section 123 ) .
this scheme bears some resemblance to the local contrast normalization scheme of jarrett et al .
( 123 ) , but ours would be more correctly termed brightness normalization , since we do not subtract the mean activity .
response normalization reduces our top - 123 and top - 123 error rates by 123% and 123% , respectively .
we also veried the effectiveness of this scheme on the cifar - 123 dataset : a four - layer cnn achieved a 123% test error rate without normalization and 123% with normalization123
123 overlapping pooling
pooling layers in cnns summarize the outputs of neighboring groups of neurons in the same kernel map .
traditionally , the neighborhoods summarized by adjacent pooling units do not overlap ( e . g . , ( 123 , 123 , 123 ) ) .
to be more precise , a pooling layer can be thought of as consisting of a grid of pooling units spaced s pixels apart , each summarizing a neighborhood of size z z centered at the location of the pooling unit .
if we set s = z , we obtain traditional local pooling as commonly employed in cnns .
if we set s < z , we obtain overlapping pooling .
this is what we use throughout our network , with s = 123 and z = 123
this scheme reduces the top - 123 and top - 123 error rates by 123% and 123% , respectively , as compared with the non - overlapping scheme s = 123 , z = 123 , which produces output of equivalent dimensions .
we generally observe during training that models with overlapping pooling nd it slightly more difcult to overt .
123 overall architecture
now we are ready to describe the overall architecture of our cnn .
as depicted in figure 123 , the net contains eight layers with weights; the rst ve are convolutional and the remaining three are fully - connected .
the output of the last fully - connected layer is fed to a 123 - way softmax which produces a distribution over the 123 class labels .
our network maximizes the multinomial logistic regression objective , which is equivalent to maximizing the average across training cases of the log - probability of the correct label under the prediction distribution .
the kernels of the second , fourth , and fth convolutional layers are connected only to those kernel maps in the previous layer which reside on the same gpu ( see figure 123 ) .
the kernels of the third convolutional layer are connected to all kernel maps in the second layer .
the neurons in the fully - connected layers are connected to all neurons in the previous layer .
response - normalization layers follow the rst and second convolutional layers .
max - pooling layers , of the kind described in section 123 , follow both response - normalization layers as well as the fth convolutional layer .
the relu non - linearity is applied to the output of every convolutional and fully - connected layer .
the rst convolutional layer lters the 123 123 123 input image with 123 kernels of size 123 123 123 with a stride of 123 pixels ( this is the distance between the receptive eld centers of neighboring
123we cannot describe this network in detail due to space constraints , but it is specied precisely by the code
and parameter les provided here : http : / / code . google . com / p / cuda - convnet / .
figure 123 : an illustration of the architecture of our cnn , explicitly showing the delineation of responsibilities between the two gpus .
one gpu runs the layer - parts at the top of the gure while the other runs the layer - parts at the bottom .
the gpus communicate only at certain layers .
the networks input is 123 , 123 - dimensional , and the number of neurons in the networks remaining layers is given by 123 , 123 , 123 , 123 , 123 , 123
neurons in a kernel map ) .
the second convolutional layer takes as input the ( response - normalized and pooled ) output of the rst convolutional layer and lters it with 123 kernels of size 123 123 123
the third , fourth , and fth convolutional layers are connected to one another without any intervening pooling or normalization layers .
the third convolutional layer has 123 kernels of size 123 123 123 connected to the ( normalized , pooled ) outputs of the second convolutional layer .
the fourth convolutional layer has 123 kernels of size 123 123 123 , and the fth convolutional layer has 123 kernels of size 123 123 123
the fully - connected layers have 123 neurons each .
123 reducing overtting
our neural network architecture has 123 million parameters .
although the 123 classes of ilsvrc make each training example impose 123 bits of constraint on the mapping from image to label , this turns out to be insufcient to learn so many parameters without considerable overtting .
below , we describe the two primary ways in which we combat overtting .
123 data augmentation
the easiest and most common method to reduce overtting on image data is to articially enlarge the dataset using label - preserving transformations ( e . g . , ( 123 , 123 , 123 ) ) .
we employ two distinct forms of data augmentation , both of which allow transformed images to be produced from the original images with very little computation , so the transformed images do not need to be stored on disk .
in our implementation , the transformed images are generated in python code on the cpu while the gpu is training on the previous batch of images .
so these data augmentation schemes are , in effect , the rst form of data augmentation consists of generating image translations and horizontal reec - tions .
we do this by extracting random 123 123 patches ( and their horizontal reections ) from the 123 images and training our network on these extracted patches123
this increases the size of our training set by a factor of 123 , though the resulting training examples are , of course , highly inter - dependent .
without this scheme , our network suffers from substantial overtting , which would have forced us to use much smaller networks .
at test time , the network makes a prediction by extracting ve 123 123 patches ( the four corner patches and the center patch ) as well as their horizontal reections ( hence ten patches in all ) , and averaging the predictions made by the networks softmax layer on the ten patches .
the second form of data augmentation consists of altering the intensities of the rgb channels in training images .
specically , we perform pca on the set of rgb pixel values throughout the imagenet training set .
to each training image , we add multiples of the found principal components ,
123this is the reason why the input images in figure 123 are 123 123 123 - dimensional .
with magnitudes proportional to the corresponding eigenvalues times a random variable drawn from a gaussian with mean zero and standard deviation 123 .
therefore to each rgb image pixel ixy =
xy ) t we add the following quantity :
xy , i g
xy , i b
( p123 , p123 , p123 ) ( 123 , 123 , 123 ) t
where pi and i are ith eigenvector and eigenvalue of the 123 123 covariance matrix of rgb pixel values , respectively , and i is the aforementioned random variable .
each i is drawn only once for all the pixels of a particular training image until that image is used for training again , at which point it is re - drawn .
this scheme approximately captures an important property of natural images , namely , that object identity is invariant to changes in the intensity and color of the illumination .
this scheme reduces the top - 123 error rate by over 123% .
combining the predictions of many different models is a very successful way to reduce test errors ( 123 , 123 ) , but it appears to be too expensive for big neural networks that already take several days to train .
there is , however , a very efcient version of model combination that only costs about a factor of two during training .
the recently - introduced technique , called dropout ( 123 ) , consists of setting to zero the output of each hidden neuron with probability 123 .
the neurons which are dropped out in this way do not contribute to the forward pass and do not participate in back - propagation .
so every time an input is presented , the neural network samples a different architecture , but all these architectures share weights .
this technique reduces complex co - adaptations of neurons , since a neuron cannot rely on the presence of particular other neurons .
it is , therefore , forced to learn more robust features that are useful in conjunction with many different random subsets of the other neurons .
at test time , we use all the neurons but multiply their outputs by 123 , which is a reasonable approximation to taking the geometric mean of the predictive distributions produced by the exponentially - many dropout networks .
we use dropout in the rst two fully - connected layers of figure 123
without dropout , our network ex - hibits substantial overtting .
dropout roughly doubles the number of iterations required to converge .
123 details of learning
we trained our models using stochastic gradient descent with a batch size of 123 examples , momentum of 123 , and weight decay of 123 .
we found that this small amount of weight decay was important for the model to learn .
in other words , weight decay here is not merely a regularizer : it reduces the models training error .
the update rule for weight w was
: = 123 vi 123 wi
: = wi + vi+123
figure 123 : 123 convolutional kernels of size 123 learned by the rst convolutional layer on the 123 input images .
the top 123 kernels were learned on gpu 123 while the bottom 123 kernels were learned on gpu 123
see section 123 for details .
where i is the iteration index , v is the momentum variable , is the learning rate , and the average over the ith batch di of the derivative of the objective with respect to w , evaluated at we initialized the weights in each layer from a zero - mean gaussian distribution with standard de - viation 123 .
we initialized the neuron biases in the second , fourth , and fth convolutional layers , as well as in the fully - connected hidden layers , with the constant 123
this initialization accelerates the early stages of learning by providing the relus with positive inputs .
we initialized the neuron biases in the remaining layers with the constant 123
we used an equal learning rate for all layers , which we adjusted manually throughout training .
the heuristic which we followed was to divide the learning rate by 123 when the validation error rate stopped improving with the current learning rate .
the learning rate was initialized at 123 and
reduced three times prior to termination .
we trained the network for roughly 123 cycles through the training set of 123 million images , which took ve to six days on two nvidia gtx 123 123gb gpus .
our results on ilsvrc - 123 are summarized in table 123
our network achieves top - 123 and top - 123 test set error rates of 123% and 123%123
the best performance achieved during the ilsvrc - 123 competition was 123% and 123% with an approach that averages the predictions produced from six sparse - coding models trained on different features ( 123 ) , and since then the best pub - lished results are 123% and 123% with an approach that averages the predictions of two classi - ers trained on fisher vectors ( fvs ) computed from two types of densely - sampled features ( 123 ) .
sparse coding ( 123 ) sift + fvs ( 123 )
table 123 : comparison of results on ilsvrc - in italics are best results 123 test set .
achieved by others .
we also entered our model in the ilsvrc - 123 com - petition and report our results in table 123
since the ilsvrc - 123 test set labels are not publicly available , we cannot report test error rates for all the models that in the remainder of this paragraph , we use validation and test error rates interchangeably because in our experience they do not differ by more than 123% ( see table 123 ) .
the cnn described in this paper achieves a top - 123 error rate of 123% .
averaging the predictions of ve similar cnns gives an error rate of 123% .
training one cnn , with an extra sixth con - volutional layer over the last pooling layer , to classify the entire imagenet fall 123 release ( 123m images , 123k categories ) , and then ne - tuning it on ilsvrc - 123 gives an error rate of 123% .
averaging the predictions of two cnns that were pre - trained on the entire fall 123 re - lease with the aforementioned ve cnns gives an error rate of 123% .
the second - best con - test entry achieved an error rate of 123% with an approach that averages the predictions of sev - eral classiers trained on fvs computed from different types of densely - sampled features ( 123 ) .
finally , we also report our error rates on the fall 123 version of imagenet with 123 , 123 categories and 123 million images .
on this dataset we follow the convention in the literature of using half of the images for training and half for testing .
since there is no es - tablished test set , our split neces - sarily differs from the splits used by previous authors , but this does not affect the results appreciably .
our top - 123 and top - 123 error rates on this dataset are 123% and 123% , attained by the net described above but with an additional , sixth convolutional layer over the last pooling layer .
the best published results on this dataset are 123% and 123% ( 123 ) .
table 123 : comparison of error rates on ilsvrc - 123 validation and test sets .
in italics are best results achieved by others .
models with an asterisk* were pre - trained to classify the entire imagenet 123 fall release .
see section 123 for details .
sift + fvs ( 123 )
top - 123 ( val ) top - 123 ( val ) top - 123 ( test )
123 qualitative evaluations
figure 123 shows the convolutional kernels learned by the networks two data - connected layers .
the network has learned a variety of frequency - and orientation - selective kernels , as well as various col - ored blobs .
notice the specialization exhibited by the two gpus , a result of the restricted connec - tivity described in section 123 .
the kernels on gpu 123 are largely color - agnostic , while the kernels on on gpu 123 are largely color - specic .
this kind of specialization occurs during every run and is independent of any particular random weight initialization ( modulo a renumbering of the gpus ) .
123the error rates without averaging predictions over ten patches as described in section 123 are 123% and
figure 123 : ( left ) eight ilsvrc - 123 test images and the ve labels considered most probable by our model .
the correct label is written under each image , and the probability assigned to the correct label is also shown with a red bar ( if it happens to be in the top 123 ) .
( right ) five ilsvrc - 123 test images in the rst column .
the remaining columns show the six training images that produce feature vectors in the last hidden layer with the smallest euclidean distance from the feature vector for the test image .
in the left panel of figure 123 we qualitatively assess what the network has learned by computing its top - 123 predictions on eight test images .
notice that even off - center objects , such as the mite in the top - left , can be recognized by the net .
most of the top - 123 labels appear reasonable .
for example , only other types of cat are considered plausible labels for the leopard .
in some cases ( grille , cherry ) there is genuine ambiguity about the intended focus of the photograph .
another way to probe the networks visual knowledge is to consider the feature activations induced by an image at the last , 123 - dimensional hidden layer .
if two images produce feature activation vectors with a small euclidean separation , we can say that the higher levels of the neural network consider them to be similar .
figure 123 shows ve images from the test set and the six images from the training set that are most similar to each of them according to this measure .
notice that at the pixel level , the retrieved training images are generally not close in l123 to the query images in the rst column .
for example , the retrieved dogs and elephants appear in a variety of poses .
we present the results for many more test images in the supplementary material .
computing similarity by using euclidean distance between two 123 - dimensional , real - valued vec - tors is inefcient , but it could be made efcient by training an auto - encoder to compress these vectors to short binary codes .
this should produce a much better image retrieval method than applying auto - encoders to the raw pixels ( 123 ) , which does not make use of image labels and hence has a tendency to retrieve images with similar patterns of edges , whether or not they are semantically similar .
our results show that a large , deep convolutional neural network is capable of achieving record - breaking results on a highly challenging dataset using purely supervised learning .
it is notable that our networks performance degrades if a single convolutional layer is removed .
for example , removing any of the middle layers results in a loss of about 123% for the top - 123 performance of the network .
so the depth really is important for achieving our results .
to simplify our experiments , we did not use any unsupervised pre - training even though we expect that it will help , especially if we obtain enough computational power to signicantly increase the size of the network without obtaining a corresponding increase in the amount of labeled data .
thus far , our results have improved as we have made our network larger and trained it longer but we still have many orders of magnitude to go in order to match the infero - temporal pathway of the human visual system .
ultimately we would like to use very large and deep convolutional nets on video sequences where the temporal structure provides very helpful information that is missing or far less obvious in static images .
