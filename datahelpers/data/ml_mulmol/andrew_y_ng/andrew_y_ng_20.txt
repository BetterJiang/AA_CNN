we are at the beginning of the multicore era .
computers will have increasingly many cores ( processors ) , but there is still no good programming framework for these architectures , and thus no simple and unied way for machine learning to take advantage of the potential speed up .
in this paper , we develop a broadly ap - plicable parallel programming method , one that is easily applied to many different learning algorithms .
our work is in distinct contrast to the tradition in machine learning of designing ( often ingenious ) ways to speed up a single algorithm at a time .
specically , we show that algorithms that t the statistical query model ( 123 ) can be written in a certain summation form , which allows them to be easily par - allelized on multicore computers .
we adapt googles map - reduce ( 123 ) paradigm to demonstrate this parallel speed up technique on a variety of learning algorithms including locally weighted linear regression ( lwlr ) , k - means , logistic regres - sion ( lr ) , naive bayes ( nb ) , svm , ica , pca , gaussian discriminant analysis ( gda ) , em , and backpropagation ( nn ) .
our experimental results show basically linear speedup with an increasing number of processors .
frequency scaling on siliconthe ability to drive chips at ever higher clock ratesis beginning to hit a power limit as device geometries shrink due to leakage , and simply because cmos consumes power every time it changes state ( 123 , 123 ) .
yet moores law ( 123 ) , the density of circuits doubling every generation , is projected to last between 123 and 123 more years for silicon based circuits ( 123 ) .
by keeping clock frequency xed , but doubling the number of processing cores on a chip , one can maintain lower power while doubling the speed of many applications .
this has forced an industry - wide shift to multicore .
we thus approach an era of increasing numbers of cores per chip , but there is as yet no good frame - work for machine learning to take advantage of massive numbers of cores .
there are many parallel programming languages such as orca , occam abcl , snow , mpi and parlog , but none of these approaches make it obvious how to parallelize a particular algorithm .
there is a vast literature on distributed learning and data mining ( 123 ) , but very little of this literature focuses on our goal : a gen - eral means of programming machine learning on multicore .
much of this literature contains a long
and distinguished tradition of developing ( often ingenious ) ways to speed up or parallelize individ - ual learning algorithms , for instance cascaded svms ( 123 ) .
but these yield no general parallelization technique for machine learning and , more pragmatically , specialized implementations of popular algorithms rarely lead to widespread use .
some examples of more general papers are : caregea et .
( 123 ) give some general data distribution conditions for parallelizing machine learning , but restrict the focus to decision trees; jin and agrawal ( 123 ) give a general machine learning programming ap - proach , but only for shared memory machines .
this doesnt t the architecture of cellular or grid type multiprocessors where cores have local cache , even if it can be dynamically reallocated .
in this paper , we focuses on developing a general and exact technique for parallel programming of a large class of machine learning algorithms for multicore processors .
the central idea of this approach is to allow a future programmer or user to speed up machine learning applications by throwing more cores at the problem rather than search for specialized optimizations .
this papers ( i ) we show that any algorithm tting the statistical query model may be written in a certain sum - mation form .
this form does not change the underlying algorithm and so is not an approximation , but is instead an exact implementation .
( ii ) the summation form does not depend on , but can be easily expressed in a map - reduce ( 123 ) framework which is easy to program in .
( iii ) this technique achieves basically linear speed - up with the number of cores .
we attempt to develop a pragmatic and general framework .
what we do not claim : ( i ) we make no claim that our technique will necessarily run faster than a specialized , one - off so - lution .
here we achieve linear speedup which in fact often does beat specic solutions such as cascaded svm ( 123 ) ( see section 123; however , they do handle kernels , which we have not addressed ) .
( ii ) we make no claim that following our framework ( for a specic algorithm ) always leads to a novel parallelization undiscovered by others .
what is novel is the larger , broadly applicable frame - work , together with a pragmatic programming paradigm , map - reduce .
( iii ) we focus here on exact implementation of machine learning algorithms , not on parallel approximations to algorithms ( a worthy topic , but one which is beyond this papers scope ) .
in section 123 we discuss the statistical query model , our summation form framework and an example of its application .
in section 123 we describe how our framework may be implemented in a google - like map - reduce paradigm .
in section 123 we choose 123 frequently used machine learning algorithms as examples of what can be coded in this framework .
this is followed by experimental runs on 123 moderately large data sets in section 123 , where we show a good match to our theoretical computational complexity results .
basically , we often achieve linear speedup in the number of cores .
section 123 concludes the paper .
123 statistical query and summation form
for multicore systems , sutter and larus ( 123 ) point out that multicore mostly benets concurrent applications , meaning ones where there is little communication between cores .
the best match is thus if the data is subdivided and stays local to the cores .
to achieve this , we look to kearns statistical query model ( 123 ) .
the statistical query model is sometimes posed as a restriction on the valiant pac model ( 123 ) , in which we permit the learning algorithm to access the learning problem only through a statistical query oracle .
given a function f ( x , y ) over instances , the statistical query oracle returns an estimate of the expectation of f ( x , y ) ( averaged over the training / test distribution ) .
algorithms that calculate sufcient statistics or gradients t this model , and since these calculations may be batched , they are expressible as a sum over data points .
this class of algorithms is large; we show 123 popular algorithms in section 123 below .
an example that does not t is that of learning an xor over a subset of bits .
( 123 , 123 ) .
however , when an algorithm does sum over the data , we can easily distribute the calculations over multiple cores : we just divide the data set into as many pieces as there are cores , give each core its share of the data to sum the equations over , and aggregate the results at the end .
we call this form of the algorithm the summation form .
as an example , consider ordinary least squares ( linear regression ) , which ts a model of the form i=123 ( t xi yi ) 123 the parameter is typically solved for by y = t x by solving : = min
figure 123 : multicore map - reduce framework
dening the design matrix x rmn to be a matrix whose rows contain the training instances x123 , .
, xm , letting ( cid : 123 ) y = ( y123 , .
, ym ) m be the vector of target labels , and solving the normal equa - tions to obtain = ( x t x ) 123x t ( cid : 123 ) y .
to put this computation into summation form , we reformulate it into a two phase algorithm where we rst compute sufcient statistics by summing over the data , and then aggregate those statistics and solve to get = a123b .
concretely , we compute a = x t x and b = x t ( cid : 123 ) y as follows : i=123 ( xiyi ) .
the computation of a and b can now be divided into equal size pieces and distributed among the cores .
we next discuss an architecture that lends itself to the summation form : map - reduce .
i ) and b =
many programming frameworks are possible for the summation form , but inspired by googles success in adapting a functional programming construct , map - reduce ( 123 ) , for wide spread parallel programming use inside their company , we adapted this same construct for multicore use .
googles map - reduce is specialized for use over clusters that have unreliable communication and where indi - vidual computers may go down .
these are issues that multicores do not have; thus , we were able to developed a much lighter weight architecture for multicores , shown in figure 123
figure 123 shows a high level view of our architecture and how it processes the data .
in step 123 , the map - reduce engine is responsible for splitting the data by training examples ( rows ) .
the engine then caches the split data for the subsequent map - reduce invocations .
every algorithm has its own engine instance , and every map - reduce task will be delegated to its engine ( step 123 ) .
similar to the original map - reduce architecture , the engine will run a master ( step 123 ) which coordinates the mappers and the reducers .
the master is responsible for assigning the split data to different mappers , and then collects the processed intermediate data from the mappers ( step 123 . 123 and 123 . 123 ) .
after the intermediate data is collected , the master will in turn invoke the reducer to process it ( step 123 . 123 ) and return nal results ( step 123 . 123 ) .
note that some mapper and reducer operations require additional scalar information from the algorithms .
in order to support these operations , the mapper / reducer can obtain this information through the query info interface , which can be customized for each different algorithm ( step 123 . 123 and 123 . 123 ) .
123 adopted algorithms
in this section , we will briey discuss the algorithms we have implemented based on our framework .
these algorithms were chosen partly by their popularity of use in nips papers , and our goal will be to illustrate how each algorithm can be expressed in summation form .
we will defer the discussion of the theoretical improvement that can be achieved by this parallelization to section 123 .
in the following , x or xi denotes a training vector and y or yi denotes a training label .
algorithmenginereducermaster123 . 123 : reduce123 : run123 . 123 : query_info123 . 123 : query_info123 . 123 . 123 . 123mappermappermappermapper123 : run123 . 123 : map ( split data ) 123 . 123 : intermediate data123 . 123 : resultdata123 : data input ( cid : 123 ) m
results to get the nal result for the parameters .
the solution of the normal equations a = b , where a =
locally weighted linear regression ( lwlr ) lwlr ( 123 , 123 ) is solved by nding i ) and b = i=123 wi ( xiyi ) .
for the summation form , we divide the computation among different map - i ) and another pers .
in this case , one set of mappers is used to compute subgroup wi ( xiyi ) .
two reducers respectively sum up the partial values set to compute for a and b , and the algorithm nally computes the solution = a123b .
note that if wi = 123 , the algorithm reduces to the case of ordinary least squares ( linear regression ) .
naive bayes ( nb ) in nb ( 123 , 123 ) , we have to estimate p ( xj = k|y = 123 ) , p ( xj = k|y = 123 ) , and p ( y ) from the training data .
in order to do so , we need to sum over xj = k for each y label in the training data to calculate p ( x|y ) .
we specify different sets of mappers subgroup 123 ( xj = k|y = 123 ) , subgroup 123 ( xj = k|y = 123 ) , to calculate the following : subgroup 123 ( y = 123 ) .
the reducer then sums up intermediate subgroup 123 ( y = 123 ) and gaussian discriminative analysis ( gda ) the classic gda algorithm ( 123 ) needs to learn the following four statistics p ( y ) , 123 , 123 and .
for all the summation forms involved in these computations , we may leverage the map - reduce framework to parallelize the process .
each mapper will handle the summation ( i . e .
123 ( yi = 123 ) , 123 ( yi = 123 ) , 123 ( yi = 123 ) xi , etc ) for a subgroup of the training samples .
finally , the reducer will aggregate the intermediate sums and calculate the nal result for the parameters .
k - means in k - means ( 123 ) , it is clear that the operation of computing the euclidean distance between the sample vectors and the centroids can be parallelized by splitting the data into individual subgroups and clustering samples in each subgroup separately ( by the mapper ) .
in recalculating new centroid vectors , we divide the sample vectors into subgroups , com - pute the sum of vectors in each subgroup in parallel , and nally the reducer will add up the partial sums and compute the new centroids .
logistic regression ( lr ) for logistic regression ( 123 ) , we choose the form of hypothesis as h ( x ) = g ( t x ) = 123 / ( 123 + exp ( t x ) ) learning is done by tting to the training data where the likelihood function can be optimized by using newton - raphson to update : = h123 ( cid : 123 ) ( ) .
( cid : 123 ) ( ) is the gradient , which can be computed in parallel by each nr step i .
the computation mappers summing up of the hessian matrix can be also written in a summation form of h ( j , k ) : = h ( j , k ) + k for the mappers .
the reducer will then sum up the values for gradient and hessian to perform the update for .
neural network ( nn ) we focus on backpropagation ( 123 ) by dening a network struc - ture ( we use a three layer network with two output neurons classifying the data into two categories ) , each mapper propagates its set of data through the network .
for each train - ing example , the error is back propagated to calculate the partial gradient for each of the weights in the network .
the reducer then sums the partial gradient from each mapper and does a batch gradient descent to update the weights of the network .
principal components analysis ( pca ) pca ( 123 ) computes the principle eigenvectors of
( cid : 123 ) t over the data .
in the denition for
the covariance matrix = 123 , the term is already expressed in summation form .
further , we can also express the mean vector as a sum , = 123 i=123 xi .
the sums can be mapped to separate cores , and then the reducer will sum up the partial results to produce the nal empirical independent component analysis ( ica ) ica ( 123 ) tries to identify the independent source vectors based on the assumption that the observed data are linearly transformed from the source data .
in ica , the main goal is to compute the unmixing matrix w .
we implement batch gradient ascent to optimize the w s likelihood .
in this scheme , we can independently
calculate the expression
x ( i ) t in the mappers and sum them up in the
expectation maximization ( em ) for em ( 123 ) we use mixture of gaussian as the underly - ing model as per ( 123 ) .
for parallelization : in the e - step , every mapper processes its subset
j x ( i ) ) and
j ( x ( i ) j ) ( x ( i ) j ) t ) and
of the training data and computes the corresponding w ( i ) ( expected pseudo count ) .
in m - phase , three sets of parameters need to be updated : p ( y ) , , and .
for p ( y ) , every mapper j ) , and the reducer will sum up the partial result and divide it j ) , and by m .
for , each mapper will compute the reducer will sum up the partial result and divide them .
for , every mapper will com - j ) , and the reducer will again sum up the partial result and divide them .
support vector machine ( svm ) linear svms ( 123 , 123 ) primary goal is to optimize the y ( i ) ( wt x ( i ) + b ) 123 following primal problem minw , b ( cid : 123 ) w ( cid : 123 ) 123 + c i where p is either 123 ( hinge loss ) or 123 ( quadratic loss ) .
( 123 ) has shown that the primal problem for quadratic loss can be solved using the following formula where sv are the support vectors : = 123w + 123c isv ( w xi yi ) xi & hessian h = i + c we perform batch gradient descent to optimize the objective function .
the mappers will subgroup ( isv ) ( w xi yi ) xi and the reducer will sum up calculate the partial gradient the partial results to update w vector .
some implementations of machine learning algorithms , such as ica , are commonly done with stochastic gradient ascent , which poses a challenge to parallelization .
the problem is that in ev - ery step of gradient ascent , the algorithm updates a common set of parameters ( e . g .
the unmixing w matrix in ica ) .
when one gradient ascent step ( involving one training sample ) is updating w , it has to lock down this matrix , read it , compute the gradient , update w , and nally release the lock .
this lock - release block creates a bottleneck for parallelization; thus , instead of stochastic gradient ascent , our algorithms above were implemented using batch gradient ascent .
123 algorithm time complexity analysis
table 123 shows the theoretical complexity analysis for the ten algorithms we implemented on top of our framework .
we assume that the dimension of the inputs is n ( i . e . , x rn ) , that we have m training examples , and that there are p cores .
the complexity of iterative algorithms is analyzed for one iteration , and so their actual running time may be slower . 123 a few algorithms require matrix inversion or an eigen - decomposition of an n - by - n matrix; we did not parallelize these steps in our experiments , because for us m >> n , and so their cost is small .
however , there is extensive research in numerical linear algebra on parallelizing these numerical operations ( 123 ) , and in the complexity analysis shown in the table , we have assumed that matrix inversion and eigen - decompositions can be sped up by a factor of p ( cid : 123 ) on p cores .
( in practice , we expect p ( cid : 123 ) p . ) in our own software imple - mentation , we had p ( cid : 123 ) = 123
further , the reduce phase can minimize communication by combining data as its passed back; this accounts for the log ( p ) factor .
as an example of our running - time analysis , for single - core lwlr we have to compute a = i ) , which gives us the mn123 term .
this matrix must be inverted for n123; also , the
reduce step incurs a covariance matrix communication cost of n123
to provide fair comparisons , each algorithm had two different versions : one running map - reduce , and the other a serial implementation without the framework .
we conducted an extensive series of experiments to compare the speed up on data sets of various sizes ( table 123 ) , on eight commonly used machine learning data sets from the uci machine learning repository and two other ones from a ( anonymous ) research group ( helicopter control and sensor data ) .
note that not all the experiments make sense from an output view regression on categorical data but our purpose was to test speedup so we ran every algorithm over all the data .
the rst environment we conducted experiments on was an intel x123 pc with two pentium - iii 123 mhz cpus and 123gb physical memory .
the operating system was linux redhat 123 kernel 123 . 123 -
123if , for example , the number of iterations required grows with m .
however , this would affect single - and
multi - core implementations equally .
o ( mn123 + n123 ) o ( mn123 o ( mn123 + n123 ) o ( mn123 o ( mn + nc ) o ( mn + nc ) o ( mn123 + n123 ) o ( mn123 o ( mn123 + n123 ) o ( mn123 o ( mn123 + n123 ) o ( mn123
o ( mn123 + n123 ) o ( mn123
p ( cid : 123 ) + n123 log ( p ) ) p ( cid : 123 ) + n123 log ( p ) )
p + nc log ( p ) ) p + nc log ( p ) )
p ( cid : 123 ) + n123 log ( p ) ) p ( cid : 123 ) + n123 log ( p ) ) p ( cid : 123 ) + n123 log ( p ) )
p + mn log ( p ) )
p ( cid : 123 ) + n123 log ( p ) )
p + n log ( p ) )
p + n123 p + n123 p + n123 p + n123 p + n123 p + n123
table 123 : time complexity analysis
corel image features synthetic time series kdd cup 123 forest cover type 123 us census
table 123 : data sets size and description
in addition , we also ran extensive comparison experiments on a 123 way sun enterprise 123 , running solaris 123; here , we compared results using 123 , 123 , 123 , 123 , and 123 cores .
123 results and discussion
table 123 shows the speedup on dual processors over all the algorithms on all the data sets .
as can be seen from the table , most of the algorithms achieve more than 123x times performance improvement .
for some of the experiments , e . g .
gda / covertype , ica / ipums , nn / colorhistogram , etc . , we obtain a greater than 123x speedup .
this is because the original algorithms do not utilize all the cpu cycles efciently , but do better when we distribute the tasks to separate threads / processes .
figure 123 shows the speedup of the algorithms over all the data sets for 123 , 123 , 123 and 123 processing cores .
in the gure , the thick lines shows the average speedup , the error bars show the maximum and minimum speedups and the dashed lines show the variance .
speedup is basically linear with number
table 123 : speedups achieved on a dual core processor , without load time .
numbers reported are dual - core time / single - core time .
super linear speedup sometimes occurs due to a reduction in processor idle time with multiple threads .
figure 123 : ( a ) - ( i ) show the speedup from 123 to 123 processors of all the algorithms over all the data sets .
the bold line is the average , error bars are the max and min speedups and the dashed lines are
of cores , but with a slope < 123 .
the reason for the sub - unity slope is increasing communication overhead .
for simplicity and because the number of data points m typically dominates reduction phase communication costs ( typically a factor of n123 but n << m ) , we did not parallelize the reduce phase where we could have combined data on the way back .
even so , our simple svm approach gets about 123% speed up on average over 123 cores whereas the specialized svm cascade ( 123 ) averages only 123% .
finally , the above are runs on multiprocessor machines .
we nish by reporting some conrming results and higher performance on a proprietary multicore simulator over the sensor dataset . 123 nn speedup was ( 123 cores , 123x ) , ( 123 cores , 123x ) , ( 123 cores , 123x ) .
lr speedup was ( 123 cores , 123x ) , ( 123 cores , 123x ) , ( 123 cores , 123x ) .
multicore machines are generally faster than multiprocessor machines because communication internal to the chip is much less costly .
as the intel and amd product roadmaps indicate ( 123 ) , the number of processing cores on a chip will be doubling several times over the next decade , even as individual cores cease to become sig - nicantly faster .
for machine learning to continue reaping the bounty of moores law and apply to ever larger datasets and problems , it is important to adopt a programming architecture which takes advantage of multicore .
in this paper , by taking advantage of the summation form in a map - reduce
123this work was done in collaboration with intel corporation .
framework , we could parallelize a wide range of machine learning algorithms and achieve a 123 times speedup on a dual processor on up to 123 times speedup on 123 cores .
these results are in line with the complexity analysis in table 123
we note that the speedups achieved here involved no special optimizations of the algorithms themselves .
we have demonstrated a simple programming framework where in the future we can just throw cores at the problem of speeding up machine
we would like to thank skip macy from intel for sharing his valuable experience in vtune perfor - mance analyzer .
yirong shen , anya petrovskaya , and su - in lee from stanford university helped us in preparing various data sets used in our experiments .
this research was sponsored in part by the defense advanced research projects agency ( darpa ) under the acip program and grant number
