the ability to simultaneously localize a robot and ac - curately map its surroundings is considered by many to be a key prerequisite of truly autonomous robots .
how - ever , few approaches to this problem scale up to handle the very large number of landmarks present in real envi - ronments .
kalman lter - based algorithms , for example , require time quadratic in the number of landmarks to in - corporate each sensor observation .
this paper presents fastslam , an algorithm that recursively estimates the full posterior distribution over robot pose and landmark locations , yet scales logarithmically with the number of landmarks in the map .
this algorithm is based on an ex - act factorization of the posterior into a product of con - ditional landmark distributions and a distribution over robot paths .
the algorithm has been run successfully on as many as 123 , 123 landmarks , environments far be - yond the reach of previous approaches .
experimental results demonstrate the advantages and limitations of the fastslam algorithm on both simulated and real -
the problem of simultaneous localization and mapping , also known as slam , has attracted immense attention in the mo - bile robotics literature .
slam addresses the problem of building a map of an environment from a sequence of land - mark measurements obtained from a moving robot .
since robot motion is subject to error , the mapping problem neces - sarily induces a robot localization problemhence the name slam .
the ability to simultaneously localize a robot and accurately map its environment is considered by many to be a key prerequisite of truly autonomous robots ( 123 , 123 , 123 ) .
the dominant approach to the slam problem was in - troduced in a seminal paper by smith , self , and cheese - man ( 123 ) .
this paper proposed the use of the extended kalman lter ( ekf ) for incrementally estimating the poste - rior distribution over robot pose along with the positions of the landmarks .
in the last decade , this approach has found widespread acceptance in eld robotics , as a recent tutorial paper ( 123 ) documents .
recent research has focused on scal - ing this approach to larger environments with more than a copyright c ( cid : 123 ) 123 , american association for articial intelli - gence ( www . aaai . org ) .
all rights reserved .
few hundred landmarks ( 123 , 123 , 123 ) and to algorithms for han - dling data association problems ( 123 ) .
a key limitation of ekf - based approaches is their compu - tational complexity .
sensor updates require time quadratic in the number of landmarks k to compute .
this complex - ity stems from the fact that the covariance matrix maintained by the kalman lters has o ( k 123 ) elements , all of which must be updated even if just a single landmark is observed .
the quadratic complexity limits the number of landmarks that can be handled by this approach to only a few hundred whereas natural environment models frequently contain mil - lions of features .
this shortcoming has long been recog - nized by the research community ( 123 , 123 , 123 ) .
in this paper we approach the slam problem from a bayesian point of view .
figure 123 illustrates a generative probabilistic model ( dynamic bayes network ) that underlies the rich corpus of slam literature .
in particular , the robot poses , denoted s123 , s123 , .
, st , evolve over time as a function of the robot controls , denoted u123 , .
each of the land - mark measurements , denoted z123 , .
, zt , is a function of the position k of the landmark measured and of the robot pose at the time the measurement was taken .
from this diagram it is evident that the slam problem exhibits important condi - tional independences .
in particular , knowledge of the robots path s123 , s123 , .
, st renders the individual landmark measure - ments independent .
so for example , if an oracle provided us with the exact path of the robot , the problem of determin - ing the landmark locations could be decoupled into k inde - pendent estimation problems , one for each landmark .
this observation was made previously by murphy ( 123 ) , who de - veloped an efcient particle ltering algorithm for learning
based on this observation , this paper describes an efcient slam algorithm called fastslam .
fastslam decomposes the slam problem into a robot localization problem , and a collection of landmark estimation problems that are con - ditioned on the robot pose estimate .
as remarked in ( 123 ) , this factored representation is exact , due to the natural con - ditional independences in the slam problem .
fastslam uses a modied particle lter for estimating the posterior over robot paths .
each particle possesses k kalman l - ters that estimate the k landmark locations conditioned on the path estimate .
the resulting algorithm is an instance of the rao - blackwellized particle lter ( 123 , 123 ) .
a naive im - plementation of this idea leads to an algorithm that requires
figure 123 : the slam problem : the robot moves from pose s123 through a sequence of controls , u123 , u123 , .
as it moves , it observes nearby landmarks .
at time t = 123 , it observes landmark 123 out of two landmarks , f123 , 123g .
the measurement is denoted z123 ( range and bearing ) .
at time t = 123 , it observes the other landmark , 123 , and at time t = 123 , it observes 123 again .
the slam problem is concerned with estimating the locations of the landmarks and the robots path from the controls u and the measurements z .
the gray shading illustrates a conditional independence relation .
o ( m k ) time , where m is the number of particles in the particle lter and k is the number of landmarks .
we de - velop a tree - based data structure that reduces the running time of fastslam to o ( m log k ) , making it signicantly faster than existing ekf - based slam algorithms .
we also extend the fastslam algorithm to situations with unknown data association and unknown number of landmarks , show - ing that our approach can be extended to the full range of slam problems discussed in the literature .
experimental results using a physical robot and a robot simulator illustrate that the fastslam algorithm can han - dle orders of magnitude more landmarks than present day approaches .
we also nd that in certain situations , an in - creased number of landmarks k leads to a mild reduction of the number of particles m needed to generate accurate mapswhereas in others the number of particles required for accurate mapping may be prohibitively large .
slam problem denition
the slam problem , as dened in the rich body of litera - ture on slam , is best described as a probabilistic markov chain .
the robots pose at time t will be denoted st .
for robots operating in the planewhich is the case in all of our experimentsposes are comprised of a robots x - y coordi - nate in the plane and its heading direction .
ferred to as the motion model :
poses evolve according to a probabilistic law , often re - p ( st j ut , st123 )
thus , st is a probabilistic function of the robot control ut and the previous pose st123
in mobile robotics , the motion model is usually a time - invariant probabilistic generalization of robot kinematics ( 123 ) .
the robots environment possesses k immobile land - marks .
each landmark is characterized by its location in space , denoted k for k = 123 , .
without loss of gen - erality , we will think of landmarks as points in the plane , so that locations are specied by two numerical values .
to map its environment , the robot can sense landmarks .
for example , it may be able to measure range and bearing to
a landmark , relative to its local coordinate frame .
the mea - surement at time t will be denoted zt .
while robots can often sense more than one landmark at a time , we follow com - monplace notation by assuming that sensor measurements correspond to exactly one landmark ( 123 ) .
this convention is adopted solely for mathematical convenience .
it poses no restriction , as multiple landmark sightings at a single time step can be processed sequentially .
often referred to as the measurement model :
sensor measurements are governed by a probabilistic law , p ( zt j st , , nt )
here = f123 , .
, kg is the set of all landmarks , and nt 123 f123 , .
, kg is the index of the landmark perceived at time t .
for example , in figure 123 , we have n123 = 123 , n123 = 123 , and n123 = 123 , since the robot rst observes landmark 123 , then landmark 123 , and nally landmark 123 for a second time .
many measurement models in the literature assume that the robot can measure range and bearing to landmarks , con - founded by measurement noise .
the variable nt is often referred to as correspondence .
most theoretical work in the literature assumes knowledge of the correspondence or , put differently , that landmarks are uniquely identiable .
practi - cal implementations use maximum likelihood estimators for estimating the correspondence on - the - y , which work well if landmarks are spaced sufciently far apart .
in large parts of this paper we will simply assume that landmarks are iden - tiable , but we will also discuss an extension that estimates the correspondences from data .
we are now ready to formulate the slam problem .
most generally , slam is the problem of determining the location of all landmarks and robot poses st from measurements zt = z123 , .
, zt and controls ut = u123 , .
in probabilis - tic terms , this is expressed by the posterior p ( st , j zt , ut ) , where we use the superscript t to refer to a set of variables from time 123 to time t .
if the correspondences are known , the slam problem is simpler :
p ( st , j zt , ut , nt )
as discussed in the introduction , all individual landmark es - timation problems are independent if one knew the robots path st and the correspondence variables nt .
this condi - tional independence is the basis of the fastslam algorithm described in the next section .
fastslam with known correspondences
we begin our consideration with the important case where the correspondences nt = n123 , .
, nt are known , and so is the number of landmarks k observed thus far .
the conditional independence property of the slam prob - lem implies that the posterior ( 123 ) can be factored as follows :
p ( st , j zt , ut , nt )
= p ( st j zt , ut , nt )
p ( k j st , zt , ut , nt )
put verbally , the problem can be decomposed into k+123 esti - mation problems , one problem of estimating a posterior over robot paths st , and k problems of estimating the locations
of the k landmarks conditioned on the path estimate .
this factorization is exact and always applicable in the slam problem , as previously argued in ( 123 ) .
the fastslam algorithm implements the path estimator p ( st j zt , ut , nt ) using a modied particle lter ( 123 ) .
as we argue further below , this lter can sample efciently from this space , providing a good approximation of the poste - rior even under non - linear motion kinematics .
the land - mark pose estimators p ( k j st , zt , ut , nt ) are realized by kalman lters , using separate lters for different landmarks .
because the landmark estimates are conditioned on the path estimate , each particle in the particle lter has its own , lo - cal landmark estimates .
thus , for m particles and k land - marks , there will be a total of km kalman lters , each of dimension 123 ( for the two landmark coordinates ) .
this repre - sentation will now be discussed in detail .
particle filter path estimation fastslam employs a particle lter for estimating the path posterior p ( st j zt , ut , nt ) in ( 123 ) , using a lter that is similar ( but not identical ) to the monte carlo localization ( mcl ) algorithm ( 123 ) .
mcl is an application of particle lter to the problem of robot pose estimation ( localization ) .
at each point in time , both algorithms maintain a set of particles rep - resenting the posterior p ( st j zt , ut , nt ) , denoted st .
each particle st , ( m ) 123 st represents a guess of the robots path : we use the superscript notation ( m ) to refer to the m - th par - ticle in the set .
the particle set st is calculated incrementally , from the set st123 at time t123 , a robot control ut , and a measurement zt .
first , each particle st , ( m ) in st123 is used to generate a probabilistic guess of the robots pose at time t
st = fst , ( m ) gm = fs ( m )
, s ( m )
( cid : 123 ) p ( st j ut , s ( m )
obtained by sampling from the probabilistic motion model .
this estimate is then added to a temporary set of parti - cles , along with the path st123 , ( m ) .
under the assumption that the set of particles in st123 is distributed according to p ( st123 j zt123 , ut123 , nt123 ) ( which is an asymptotically cor - rect approximation ) , the new particle is distributed accord - ing to p ( st j zt123 , ut , nt123 ) .
this distribution is commonly referred to as the proposal distribution of particle ltering .
after generating m particles in this way , the new set st is obtained by sampling from the temporary particle set .
each particle st , ( m ) is drawn ( with replacement ) with a probability proportional to a so - called importance factor w ( m ) , which is calculated as follows ( 123 ) :
p ( st , ( m ) j zt , ut , nt )
p ( st , ( m ) j zt123 , ut , nt123 ) the exact calculation of ( 123 ) will be discussed further below .
the resulting sample set st is distributed according to an ap - proximation to the desired pose posterior p ( st j zt , ut , nt ) , an approximation which is correct as the number of particles m goes to innity .
we also notice that only the most recent robot pose estimate s ( m ) t123 is used when generating the parti - cle set st .
this will allows us to silently forget all other
pose estimates , rendering the size of each particle indepen - dent of the time index t .
landmark location estimation fastslam represents the conditional landmark estimates p ( k j st , zt , ut , nt ) in ( 123 ) by kalman lters .
since this estimate is conditioned on the robot pose , the kalman lters are attached to individual pose particles in st .
more speci - cally , the full posterior over paths and landmark positions in the fastslam algorithm is represented by the sample set
st = fst , ( m ) , ( m )
k , ( m )
is a two - element vector , and ( m )
are mean and covariance of the gaus - sian representing the k - th landmark k , attached to the m - th particle .
in the planar robot navigation scenario , each mean the posterior over the k - th landmark pose k is easily ob - tained .
its computation depends on whether or not nt = k , that is , whether or not k was observed at time t .
for nt = k ,
is a 123 by 123 matrix .
p ( k j st , zt , ut , nt ) bayes / p ( zt j k , st , zt123 , ut , nt ) p ( k j st , zt123 , ut , nt ) markov= p ( zt j k , st , nt ) p ( k j st123 , zt123 , ut123 , nt123 ) for nt 123= k , we simply leave the gaussian unchanged :
p ( k j st , zt , ut , nt ) = p ( k j st123 , zt123 , ut123 , nt123 ) ( 123 ) the fastslam algorithm implements the update equation ( 123 ) using the extended kalman lter ( ekf ) .
as in existing ekf approaches to slam , this lter uses a linearized ver - j st , , nt ) ( 123 ) .
thus , sion of the perceptual model p ( zt fastslams ekf is similar to the traditional ekf for slam ( 123 ) in that it approximates the measurement model using a linear gaussian function .
we note that , with a lin - ear gaussian observation model , the resulting distribution p ( k j st , zt , ut , nt ) is exactly a gaussian , even if the mo - tion model is not linear .
this is a consequence of the use of sampling to approximate the distribution over the robots
one signicant difference between the fastslam algo - rithms use of kalman lters and that of the traditional slam algorithm is that the updates in the fastslam algo - rithm involve only a gaussian of dimension two ( for the two landmark location parameters ) , whereas in the ekf - based slam approach a gaussian of size 123k+123 has to be updated ( with k landmarks and 123 robot pose parameters ) .
this cal - culation can be done in constant time in fastslam , whereas it requires time quadratic in k in standard slam .
calculating the importance weights let us now return to the problem of calculating the impor - tance weights w ( m ) needed for particle lter resampling , as dened in ( 123 ) : p ( st , ( m ) j zt , ut , nt )
p ( st , ( m ) j zt123 , ut , nt123 ) p ( zt , nt j st , ( m ) , zt123 , ut , nt123 )
p ( zt , nt j zt123 , ut , nt123 )
k 123 ? k 123 ?
k 123 ? k 123 ?
k 123 ? k 123 ?
k 123 ? k 123 ?
k 123 ? k 123 ?
k 123 ? k 123 ?
k 123 ? k 123 ?
figure 123 : a tree representing k = 123 landmark estimates within a
p ( st , ( m ) j zt123 , ut , nt ) p ( st , ( m ) j zt123 , ut , nt ) p ( zt , nt j zt123 , ut , nt123 )
p ( zt , nt j st , ( m ) , zt123 , ut , nt123 )
p ( zt , nt j st , ( m ) , zt123 , ut , nt123 )
p ( zt , nt j , st , ( m ) , zt123 , ut , nt123 ) p ( j st , ( m ) , zt123 , ut , nt ) d
, nt ) p ( nt j , s ( m )
p ( zt , nt j , s ( m ) p ( j st123 , ( m ) , zt123 , ut123 , nt123 ) d p ( zt j , s ( m ) p ( j st123 , ( m ) , zt123 , ut123 , nt123 ) d p ( zt j , s ( m ) p ( j st123 , ( m ) , zt123 , ut123 , nt123 ) d p ( zt j ( m )
, nt ) p ( ( m )
nt ) dnt
j , s ( m )
here we assume that the distribution p ( nt uniforma common assumption in slam .
in the last line , ekf makes explicit the use of a linearized model as an ap - proximation to the observation model p ( zt j ( m ) the resulting gaussian posterior p ( ( m ) nt ) .
the nal integra - tion is easily calculated in closed form for a linear gaussian .
nt , s ( m )
the fastslam algorithm , as described thus far , may require time linear in the number of landmarks k for each update iteration if implemented naively .
this is because of the re - sampling step; every time a particle is added to st , its has to be copied .
since each particle contains k landmark esti - mates , this copying procedure requires o ( m k ) time .
how - ever , most of this copying can be avoided .
our approach makes it possible to execute a fastslam iteration in o ( m log k ) time .
the basic idea is that the set of gaussians in each particle is represented by a balanced bi - nary tree .
figure 123 shows such a tree for a single particle , in the case of 123 landmarks .
the gaussian parameters ( m ) are located at the leaves of the tree .
clearly , accessing
k 123 ? k 123 ?
k 123 ? k 123 ?
k 123 ? k 123 ?
k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ?
k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ?
k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ?
k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ?
k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ?
k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ?
k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ? k 123 ?
figure 123 : generating a new particle from an old one , while modi - fying only a single gaussian .
the new particle receives only a par - tial tree , consisting of a path to the modied gaussian .
all other pointers are copied from the generating tree .
each gaussian requires time logarithmic in k .
suppose fastslam incorporates a new control ut and a new measurement zt .
each new particle in st will differ from the corresponding one in st123 in two ways : first , it will possess a different path estimate obtained via ( 123 ) , and second , the gaussian with index nt will be different in ac - cordance with ( 123 ) .
all other gaussians will be equivalent to the generating particle .
when copying the particle , thus , only a single path has to be modied in the tree representing all gaussians .
an example is shown in figure 123 : here we assume nt = 123 , that is , only the gaussian parameters ( m ) instead of generating an entirely new tree , only a single path is created , leading to the gaussian nt = 123
this path is an incomplete tree .
to complete the tree , for all branches that leave this path the corresponding pointers are copied from the tree of the generating particle .
thus , branches that leave the path will point to the same ( unmodied ) subtree as that of the generating tree .
clearly , generating such an incomplete tree takes only time logarithmic in k .
moreover , accessing a gaussian also takes time logarithmic in k , since the number of steps required to navigate to a leaf of the tree is equivalent to the length of the path ( which is by denition logarithmic ) .
thus , both generating and accessing a partial tree can be done in time o ( log k ) .
since in each updating step m new particles are created , an entire update requires time in o ( m log k ) .
in many real - world problems , landmarks are not identi - able , and the total number of landmarks k cannot be ob - tained triviallyas was the case above .
in such situations , the robot has to solve a data association problem between momentary landmarks sightings zt and the set of landmarks in the map .
it also has to determine if a measurement cor - responds to a new , previously unseen landmark , in which case the map should be augmented accordingly .
figure 123 : ( a ) physical robot mapping rocks , in a testbed developed for mars rover research .
( b ) raw range and path data .
( c ) map generated using fastslam ( dots ) , and locations of rocks determined manually ( circles ) .
in most existing slam solutions based on ekfs , these problems are solved via maximum likelihood .
more specif - ically , the probability of a data association nt is given by
p ( nt j zt , ut )
p ( nt j st , zt , ut ) p ( st j zt , ut ) dst p ( nt j st , ( m ) , zt , ut ) p ( nt j s ( m ) p ( zt j s ( m )
the step labeled pf uses the particle lter approxima - tion to the posterior p ( st j zt , ut ) .
the nal step assumes a uniform prior p ( nt j st ) , which is commonly used ( 123 ) .
the maximum likelihood data association is simply the in - dex nt that maximizes ( 123 ) .
if the maximum value of p ( nt j zt , ut ) with careful consideration of all constants in ( 123 ) is below a threshold , the landmark is considered previously unseen and the map is augmented accordingly .
t = argmaxnt
in fastslam , the data association is estimated on a per - particle basis : n ( m ) , nt ) .
as a result , different particles may rely on different values of n ( m ) might even possess different numbers of landmarks in their respective maps .
this constitutes a primary difference to ekf approaches , which determine the data association only once for each sensor measurement .
it has been observed frequently that false data association will make the conven - tional ekf approach fail catastrophically ( 123 ) .
fastslam is more likely to recover , thanks to its ability to pursue multi - ple data associations simultaneously .
particles with wrong data association are ( in expectation ) more likely to disap - pear in the resampling process than those that guess the data
we believe that , under mild assumptions ( e . g . , minimum spacing between landmarks and bounded sensor error ) , the data association search can be implemented in time loga - rithmic in n .
one possibility is the use of kd - trees as an indexing scheme in the tree structures above , instead of the landmark number , as proposed in ( 123 ) .
the fastslam algorithm was tested extensively under vari - ous conditions .
real - world experiments were complimented by systematic simulation experiments , to investigate the scaling abilities of the approach .
overall , the results indicate favorably scaling to large number of landmarks and small particle sets .
a xed number of particles ( e . g . , m = 123 ) appears to work well across a large number of situations .
figure 123a shows the physical robot testbed , which consists of a small arena set up under nasa funding for mars rover research .
a pioneer robot equipped with a sick laser range nder was driven along an approximate straight line , gener - ating the raw data shown in figure 123b .
the resulting map generated with m = 123 samples is depicted in figure 123c , with manually determined landmark locations marked by circles .
the robots estimates are indicated by xs , illustrat - ing the high accuracy of the resulting maps .
fastslam re - sulted in an average residual map error of 123 centimeters , when compared to the manually generated map .
unfortunately , the physical testbed does not allow for sys - tematic experiments regarding the scaling properties of the in extensive simulations , the number of land - marks was increased up to a total of 123 , 123 , which fast - slam successfully mapped with as few as 123 particles .
here , the number of parameters in fastslam is approx - imately 123% of that in the conventional ekf .
maps with 123 , 123 landmarks are out of range for conventional slam techniques , due to their enormous computational complex - ity .
figure 123 shows example maps with smaller numbers of landmarks , for different maximum sensor ranges as indi - cated .
the ellipses in figure 123 visualize the residual uncer - tainty when integrated over all particles and gaussians .
in a set of experiments specically aimed to elucidate the scaling properties of the approach , we evaluated the map and robot pose errors as a function of the number of landmarks k , and the number of particles m , respectively .
the results are graphically depicted in figure 123
figure 123a illustrates that an increase in the number of landmarks k mildly re - duces the error in the map and the robot pose .
this is be - cause the larger the number of landmarks , the smaller the robot pose error at any point in time .
increasing the number of particles m also bears a positive effect on the map and pose errors , as illustrated in figure 123b .
in both diagrams , the bars correspond to 123% condence intervals .
figure 123 : maps and estimated robot path , generated using sensors with ( a ) large and ( b ) small perceptual elds .
the correct landmark locations are shown as dots , and the estimates as ellipses , whose sizes correspond to the residual uncertainty .
we presented the fastslam algorithm , an efcient new so - lution to the concurrent mapping and localization problem .
this algorithm utilizes a rao - blackwellized representation of the posterior , integrating particle lter and kalman lter representations .
similar to murphys work ( 123 ) , fastslam is based on an inherent conditional independence property of the slam problem , using rao - blackwellized particle l - ters in the estimation .
however , murphys approach main - tains grid maps with discrete values similar to occupancy grid maps ( 123 ) , hence does not address the common slam problem of estimating continuous landmark locations .
in fastslam , landmark estimates are efciently repre - sented using tree structures .
updating the posterior requires o ( m log k ) time , where m is the number of particles and k the number of landmarks .
this is in contrast to the o ( k 123 ) complexity of the common kalman - lter based ap - proach to slam .
experimental results illustrate that fast - slam can build maps with orders of magnitude more land - marks than previous methods .
they also demonstrate that under certain conditions , a small number of particles works well regardless of the number of landmarks .
acknowledgments we thank kevin murphy and nando de freitas for insightful discussions on this topic .
this research was sponsored by darpas mars program ( contract number n123 - 123 - c - 123 ) and the national science foundation ( ca - reer grant number iis - 123 and regular grant number iis - 123 ) .
we thank the hertz foundation for their support of michael montemerlos graduate research .
daphne koller was supported by the ofce of naval research , young investigator ( pecase ) grant n123 - 123 - 123 - 123
this work was done while sebastian thrun was visiting stanford university .
