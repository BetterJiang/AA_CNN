neural probabilistic language models ( nplms ) have been shown to be competi - tive with and occasionally superior to the widely - used n - gram language models .
the main drawback of nplms is their extremely long training and testing times .
morin and bengio have proposed a hierarchical language model built around a binary tree of words , which was two orders of magnitude faster than the non - hierarchical model it was based on .
however , it performed considerably worse than its non - hierarchical counterpart in spite of using a word tree created using expert knowledge .
we introduce a fast hierarchical language model along with a simple feature - based algorithm for automatic construction of word trees from the data .
we then show that the resulting models can outperform non - hierarchical neural models as well as the best n - gram models .
statistical language modelling is concerned with building probabilistic models of word sequences .
such models can be used to discriminate probable sequences from improbable ones , a task important for performing speech recognition , information retrieval , and machine translation .
the vast majority of statistical language models are based on the markov assumption , which states that the distribu - tion of a word depends only on some xed number of words that immediately precede it .
while this assumption is clearly false , it is very convenient because it reduces the problem of modelling the probability distribution of word sequences of arbitrary length to the problem of modelling the distribution on the next word given some xed number of preceding words , called the context .
we will denote this distribution by p ( wn|w123 : n123 ) , where wn is the next word and w123 : n123 is the context ( w123 , . . . , wn123 ) .
n - gram language models are the most popular statistical language models due to their simplicity and surprisingly good performance .
these models are simply conditional probability tables for p ( wn|w123 : n123 ) , estimated by counting the n - tuples in the training data and normalizing the counts appropriately .
since the number of n - tuples is exponential in n , smoothing the raw counts is essential for achieving good performance .
there is a large number of smoothing methods available for n - gram models ( 123 ) .
in spite of the sophisticated smoothing methods developed for them , n - gram models are unable to take advantage of large contexts since the data sparsity problem becomes extreme .
the main reason for this behavior is the fact that classical n - gram models are essentially conditional probability tables where different entries are estimated independently of each other .
these models do not take advantage of the fact that similar words occur in similar contexts , because they have no concept of similarity .
class - based n - gram models ( 123 ) aim to address this issue by clustering words and / or contexts into classes based on their usage patterns and then using this class information to improve generalization .
while it can improve n - gram performance , this approach introduces a very rigid kind of similarity , since each word typically belongs to exactly one class .
an alternative and much more exible approach to counteracting the data sparsity problem is to represent each word using a real - valued feature vector that captures its properties , so that words
used in similar contexts will have similar feature vectors .
then the conditional probability of the next word can be modelled as a smooth function of the feature vectors of the context words and the next word .
this approach provides automatic smoothing , since for a given context similar words are now guaranteed to be assigned similar probabilities .
similarly , similar contexts are now likely to have similar representations resulting in similar predictions for the next word .
most models based on this approach use a feed - forward neural network to map the feature vectors of the context words to the distribution for the next word ( e . g .
( 123 ) , ( 123 ) , ( 123 ) ) .
perhaps the best known model of this type is the neural probabilistic language model ( 123 ) , which has been shown to outperform n - gram models on a dataset of about one million words .
123 the hierarchical neural network language model
the main drawback of the nplm and other similar models is that they are very slow to train and test ( 123 ) .
since computing the probability of the next word requires explicitly normalizing over all words in the vocabulary , the cost of computing the probability of the given next word and the cost of computing the full distribution over the next word are virtually the same they take time linear in the vocabulary size .
since computing the exact gradient in such models requires repeatedly computing the probability of the next word given its context and updating the model parameters to increase that probability , training time is also linear in the vocabulary size .
typical natural language datasets have vocabularies containing tens of thousands of words , which means that training nplm - like models the straightforward way is usually too computationally expensive in practice .
one way to speed up the process is to use a specialized importance sampling procedure to approximate the gradients required for learning ( 123 ) .
however , while this method can speed up training substantially , testing remains computationally expensive .
the hierarchical nplm introduced in ( 123 ) , provides an exponential reduction in time complexity of learning and testing as compared to the nplm .
it achieves this reduction by replacing the unstruc - tured vocabulary of the nplm by a binary tree that represents a hierarchical clustering of words in the vocabulary .
each word corresponds to a leaf in the tree and can be uniquely specied by the path from the root to that leaf .
if n is the number of words in the vocabulary and the tree is bal - anced , any word can be specied by a sequence of o ( log n ) binary decisions indicating which of the two children of the current node is to be visited next .
this setup replaces one n - way choice by a sequence of o ( log n ) binary choices .
in probabilistic terms , one n - way normalization is replaced by a sequence of o ( log n ) local ( binary ) normalizations .
as a result , a distribution over words in the vocabulary can be specied by providing the probability of visiting the left child at each of the nodes .
in the hierarchical nplm , these local probabilities are computed by giving a version of the nplm the feature vectors for the context words as well as a feature vector for the current node as inputs .
the probability of the next word is then given by the probability of making a sequence of binary decisions that corresponds to the path to that word .
when applied to a dataset of about one million words , this model outperformed class - based trigrams , but performed considerably worse than the nplm ( 123 ) .
the hierarchical model however was more than two orders of magnitude faster than the nplm .
the main limitation of this work was the procedure used to construct the tree of words for the model .
the tree was obtained by starting with the wordnet is - a taxonomy and converting it into a binary tree through a combination of manual and data - driven processing .
our goal is to replace this procedure by an automated method for building trees from the training data without requiring expert knowledge of any kind .
we will also explore the performance benets of using trees where each word can occur more than once .
123 the log - bilinear model
we will use the log - bilinear language model ( lbl ) ( 123 ) as the foundation of our hierarchical model because of its excellent performance and simplicity .
like virtually all neural language models , the lbl model represents each word with a real - valued feature vector .
we will denote the feature vector for word w by rw and refer to the matrix containing all these feature vectors as r .
to predict the next word wn given the context w123 : n123 , the model computes the predicted feature vector r for the next word by linearly combining the context word feature vectors :
where ci is the weight matrix associated with the context position i .
then the similarity between the predicted feature vector and the feature vector for each word in the vocabulary is computed using the inner product .
the similarities are then exponentiated and normalized to obtain the distribution over the next word :
p ( wn = w|w123 : n123 ) =
exp ( rt rw + bw ) pj exp ( rt rj + bj )
here bw is the bias for word w , which is used to capture the context - independent word frequency .
note that the lbl model can be interpreted as a special kind of a feed - forward neural network with one linear hidden layer and a softmax output layer .
the inputs to the network are the feature vectors for the context words , while the matrix of weights from the hidden layer to the output layer is simply the feature vector matrix r .
the vector of activities of the hidden units corresponds to the the predicted feature vector for the next word .
unlike the nplm , the lbl model needs to compute the hidden activities only once per prediction and has no nonlinearities in its hidden layer .
in spite of its simplicity the lbl model performs very well , outperforming both the nplm and the n - gram models on a fairly large dataset ( 123 ) .
123 the hierarchical log - bilinear model
our hierarchical language model is based on the hierarchical model from ( 123 ) .
the distinguishing features of our model are the use of the log - bilinear language model for computing the probabilities at each node and the ability to handle multiple occurrences of each word in the tree .
note that the idea of using multiple word occurrences in a tree was proposed in ( 123 ) , but it was not implemented .
the rst component of the hierarchical log - bilinear model ( hlbl ) is a binary tree with words at its leaves .
for now , we will assume that each word in the vocabulary is at exactly one leaf .
then each word can be uniquely specied by a path from the root of the tree to the leaf node the word is at .
the path itself can be encoded as a binary string d of decisions made at each node , so that di = 123 corresponds to the decision to visit the left child of the current node .
for example , the string 123 corresponds to a path that starts at the root , visits its left child , and then visits the right child of that child .
this allows each word to be represented by a binary string which we will call a code .
the second component of the hlbl model is the probabilistic model for making the decisions at each node , which in our case is a modied version of the lbl model .
in the hlbl model , just like in its non - hierarchical counterpart , context words are represented using real - valued feature vectors .
each of the non - leaf nodes in the tree also has a feature vector associated with it that is used for discriminating the words in the left subtree form the words in the right subtree of the node .
unlike the context words , the words being predicted are represented using their binary codes that are determined by the word tree .
however , this representation is still quite exible , since each binary digit in the code encodes a decision made at a node , which depends on that nodes feature vector .
in the hlbl model , the probability of the next word being w is the probability of making the sequences of binary decisions specied by the words code , given the context .
since the probability of making a decision at a node depends only on the predicted feature vector , determined by the context , and the feature vector for that node , we can express the probability of the next word as a product of probabilities of the binary decisions :
p ( wn = w|w123 : n123 ) = y
p ( di|qi , w123 : n123 ) ,
where di is ith digit in the code for word w , and qi is the feature vector for the ith node in the path corresponding to that code .
the probability of each decision is given by
where ( x ) is the logistic function and r is the predicted feature vector computed using eq .
bi in the equation is the nodes bias that captures the context - independent tendency to visit the left child when leaving this node .
p ( di = 123|qi , w123 : n123 ) = ( rt qi + bi ) ,
the denition of p ( wn = w|w123 : n123 ) can be extended to multiple codes per word by including a summation over all codes for w as follows :
p ( wn = w|w123 : n123 ) = x
p ( di|qi , w123 : n123 ) ,
where d ( w ) is a set of codes corresponding to word w .
allowing multiple codes per word can allow better prediction of words that have multiple senses or multiple usage patterns .
using multiple codes per word also makes it easy to combine several separate words hierarchies to into a single one to to reect the fact that no single hierarchy can express all the relationships between words .
using the lbl model instead of the nplm for computing the local probabilities allows us to avoid computing the nonlinearities in the hidden layer which makes our hierarchical model faster at mak - ing predictions than the hierarchical nplm .
more importantly , the hierarchical nplm needs to compute the hidden activities once for each of the o ( log n ) decisions , while the hlbl model computes the predicted feature vector just once per prediction .
however , the time complexity of computing the probability for a single binary decision in an lbl model is still quadratic in the feature vector dimensionality d , which might make the use of high - dimensional feature vectors too computationally expensive .
we make the time complexity linear in d by restricting the weight matrices ci to be diagonal . 123 note that for a context of size 123 , this restriction does not reduce the representational power of the model because the context weight matrix c123 can be absorbed into the word feature vectors .
and while this restriction does makes the models with larger contexts slightly less powerful , we believe that this loss is more than compensated for by much faster training times which allow using more complex trees .
hlbl models can be trained by maximizing the ( penalized ) log - likelihood .
since the probability of the next word depends only on the context weights , the feature vectors of the context words , and the feature vectors of the nodes on the paths from the root to the leaves containing the word in question , only a ( logarithmically ) small fraction of the parameters need to be updated for each training case .
123 hierarchical clustering of words
the rst step in training a hierarchical language model is constructing a binary tree of words for the model to use .
this can be done by using expert knowledge , data - driven methods , or a combination of the two .
for example , in ( 123 ) the tree was constructed from the is - a taxonomy dag from wordnet ( 123 ) .
after preprocessing the taxonomy by hand to ensure that each node had only one parent , data - driven hierarchical binary clustering was performed on the children of the nodes in the taxonomy that had more than two children , resulting in a binary tree .
we are interested in using a pure learning approach applicable in situations where the expert knowl - edge is unavailable .
it is also not clear that using expert knowledge , even when it is available , will lead to superior performance .
hierarchical binary clustering of words based on the their usage statistics is a natural choice for generating binary trees of words automatically .
this task is similar to the task of clustering words into classes for training class - based n - gram models , for which a large number of algorithms has been proposed .
we considered several of these algorithms before decid - ing to use our own algorithm which turned out to be surprisingly effective in spite of its simplicity .
however , we will mention two existing algorithms that might be suitable for producing binary word hierarchies .
since we wanted an algorithm that scaled well to large vocabularies , we restricted our attention to the top - down hierarchical clustering algorithms , as they tend to scale better than their agglomerative counterparts ( 123 ) .
the algorithm from ( 123 ) produces exactly the kind of binary trees we need , except that its time complexity is cubic in the vocabulary size . 123 we also considered the distributional clustering algorithm ( 123 ) but decided not to use it because of the difculties involved in using contexts of more than one word for clustering .
this problem is shared by most n - gram clustering algorithms , so we will describe it in some detail .
since we would like to cluster words for easy prediction of the next word based on its context , it is natural to describe each word in terms of the contexts that can precede it .
for example , for a single - word context one such description is the
of context weights for position i and denotes the elementwise product of two vectors .
123thus the feature vector for the next word can now be computed as r = pn123 123more precisely , the time complexity of the algorithm is cubic in the number of the frequent words , but that
is still to slow for our purposes .
ci rwi , where ci is a vector
distribution of words that precede the word of interest in the training data .
the problem becomes apparent when we consider using larger contexts : the number of contexts that can potentially pre - cede a word grows exponentially in the context size .
this is the very same data sparsity problem that affects the n - gram models , which is not surprising , since we are trying to describe words in terms of exponentially large ( normalized ) count vectors .
thus , clustering words based on such large - context representations becomes non - trivial due to the computational cost involved as well as the statistical difculties caused by the sparsity of the data .
we avoid these difculties by operating on low - dimensional real - valued word representations in our tree - building procedure .
since we need to train a model to obtain word feature vectors , we perform the following bootstrapping procedure : we generate a random binary tree of words , train an hlbl model based on it , and use the distributed representations it learns to represent words when building the word tree .
since each word is represented by a distribution over contexts it appears in , we need a way of compressing such a collection of contexts down to a low - dimensional vector .
after training the hlbl model , we summarize each context w123 : n123 with the predicted feature vector produced from it using eq .
then , we condense the distribution of contexts that precede a given word into a feature vector by computing the expectation of the predicted representation w . r . t .
that distribution .
thus , for the purposes of clustering each word is represented by its average predicted feature vector .
after computing the low - dimensional real - valued feature vectors for words , we recursively apply a very simple clustering algorithm to them .
at each step , we t a mixture of two gaussians to the feature vectors and then partition them into two subsets based on the responsibilities of the two mixture components for them .
we then partition each of the subsets using the same procedure , and so on .
the recursion stops when the current set contains only two words .
we t the mixtures by running the em algorithm for 123 steps123
the algorithm updates both the means and the spherical covariances of the components .
since the means of the components are initialized based on a random partitioning of the feature vectors , the algorithm is not deterministic and will produce somewhat different clusterings on different runs .
one appealing property of this algorithm is that the running time of each iteration is linear in the vocabulary size , which is a consequence of representing words using feature vectors of xed dimensionality .
in our experiments , the algorithm took only a few minutes to build a hierarchy for a vocabulary of nearly 123 words based on 123 - dimensional
the goal of an algorithm for generating trees for hierarchical language models is to produce trees that are well - supported by the data and are reasonably well - balanced so that the resulting models generalize well and are fast to train and test .
to explore the trade - off between these two require - ments , we tried several splitting rules in our tree - building algorithm .
the rules are based on the observation that the responsibility of a component for a datapoint can be used as a measure of con - dence about the assignment of the datapoint to the component .
thus , when the responsibilities of both components for a datapoint are close to 123 , we cannot be sure that the datapoint should be in one component but not the other .
our simplest rule aims to produce a balanced tree at any cost .
it sorts the responsibilities and splits the words into two disjoint subsets of equal size based on the sorted order .
the second rule makes splits well - supported by the data even if that results in an unbalanced tree .
it achieves that by assigning the word to the component with the higher responsibility for the word .
the third and the most sophisticated rule is an extension of the second rule , modied to assign a point to both components whenever both responsibilities are within of 123 , for some pre - specied .
this rule is designed to produce multiple codes for words that are difcult to cluster .
we will refer to the algorithms that use these rules as balanced , adaptive , and adaptive ( ) respectively .
finally , as a baseline for comparison with the above algorithms , we will use an algorithm that generates random balanced trees .
it starts with a random permutation of the words and recursively builds the left subtree based one the rst half of the words and the right subtree based on the second half of the words .
we will call this algorithm random .
123running em for more than 123 steps did not make a signicant difference in the quality of the resulting
table 123 : trees of words generated by the feature - based algorithm .
the mean code length is the sum of lengths of codes associated with a word , averaged over the distribution of the words in the training data .
the run - time complexity of the hierarchical model is linear in the mean code length of the tree used .
the mean number of codes per word refers to the number of codes per word averaged over the training data distribution .
since each non - leaf node in a tree has its own feature vector , the number of free parameters associated with the tree is linear in this quantity .
mean code mean number of codes per word
table 123 : the effect of the feature dimensionality and the word tree used on the test set perplexity of
a random tree
a non - random tree
123 experimental results
we compared the performance of our models on the apnews dataset containing the associated press news stories from 123 and 123
the dataset consists of a 123 million word training set , a 123 million word validation set , and 123 million word test set .
the vocabulary size for this dataset is 123
we chose this dataset because it had already been used to compare the performance of neural models to that of n - gram models in ( 123 ) and ( 123 ) , which allowed us to compare our results to the results in those papers .
except for where stated otherwise , the models used for the experiments used 123 dimensional feature vectors and a context size of 123
the details of the training procedure we used are given in the appendix .
all models were compared based on their perplexity score on the test set .
we started by training a model that used a tree generated by the random algorithm ( tree t123 in table 123 ) .
the feature vectors learned by this model were used to build a tree using the balanced algorithm ( tree t123 ) .
we then trained models of various feature vector dimensionality on each of these trees to see whether a highly expressive model can compensate for using a poorly constructed tree .
the test scores for the resulting models are given in table 123
as can be seen from the scores , using a non - random tree results in much better model performance .
though the gap in performance can be reduced by increasing the dimensionality of feature vectors , using a non - random tree drasti - cally improves performance even for the model with 123 - dimensional feature vectors .
it should be noted however , that models that use the random tree are not entirely hopeless .
for example , they outperform the unigram model which achieved the perplexity of 123 by a very large margin .
this suggests that the hlbl architecture is sufciently exible to make effective use of a random tree
since increasing the feature dimensionality beyond 123 did not result in a substantial reduction in perplexity , we used 123 - dimensional feature vectors for all of our models in the following experi - ments .
next we explored the effect of the tree building algorithm on the performance of the resulting hlbl model .
to do that , we used the random , balanced , and adaptive algorithms to generate one tree each .
the adaptive ( ) algorithm was used to generate two trees : one with set
table 123 : test set perplexity results for the hierarchical lbl models .
all the distributed models in the comparison used 123 - dimensional feature vectors and a context size of 123
lbl is the non - hierarchical log - bilinear model .
knn is a kneser - ney n - gram model .
the scores for lbl , kn123 , and kn123 are from ( 123 ) .
the timing for lbl is based on our implementation of the model .
to 123 and the other with set to 123 .
we then generated a 123 overcomplete tree by running the adaptive ( = 123 ) algorithm twice and creating a tree with a root node that had the two generated trees as its subtrees .
since the adaptive ( ) algorithm involves some randomization we tried to improve the model performance by allowing the model to choose dynamically between two possible clusterings .
finally , we generated a 123 overcomplete using the same approach .
table 123 lists the generated trees as well as some statistics for them .
note that trees generated using adaptive ( ) using > 123 result in models with more parameters due to the greater number of tree - nodes and thus tree - node feature vectors , as compared to trees generated using methods producing one code / leaf
table 123 shows the test set perplexities and time per epoch for the resulting models along with the perplexities for models from ( 123 ) .
the results show that the performance of the hlbl models based on non - random trees is comparable to that of the n - gram models .
as expected , building word trees adaptively improves model performance .
the general trend that emerges is that bigger trees tend to lead to better performing models .
for example , a model based on a single tree produced using the adaptive ( 123 ) algorithm , performs as well as the 123 - gram but not as well as the non - hierarchical lbl model .
however , using a 123 overcomplete tree generated using the same algorithm results in a model that outperforms both the n - gram models and the lbl model , and using a 123 overcomplete tree leads to a further reduction in perplexity .
the time - per - epoch statistics reported for the neural models in table 123 shows the great speed advantage of the hlbl models over the lbl model .
indeed , the slowest of our hlbl models is over 123 times faster than the lbl model .
123 discussion and future work
we have demonstrated that a hierarchal neural language model can actually outperform its non - hierarchical counterparts and achieve state - of - the - art performance .
the key to making a hierarchical model perform well is using a carefully constructed hierarchy over words .
we have presented a simple and fast feature - based algorithm for automatic construction of such hierarchies .
creating hierarchies in which every word occurred more than once was essential to getting the models to
an inspection of trees generated by our adaptive algorithm showed that the words with the largest numbers of codes ( i . e .
the word that were replicated the most ) were not the words with multiple distinct senses .
instead , the algorithm appeared to replicate the words that occurred relatively in - frequently in the data and were therefore difcult to cluster .
the failure to use multiple codes for words with several very different senses is probably a consequence of summarizing the distribution over contexts with a single mean feature vector when clustering words .
the sense multimodality of context distributions would be better captured by using a small set of feature vectors found by clustering the contexts .
finally , since our tree building algorithm is based on the feature vectors learned by the model , it is possible to periodically interrupt training of such a model to rebuild the word tree based on the feature vectors provided by the model being trained .
this modied training procedure might produce better models by allowing the word hierarchy to adapt to the probabilistic component of the model and vice versa .
appendix : details of the training procedure
the models have been trained by maximizing the log - likelihood using stochastic gradient ascent .
all model parameters other than the biases were initialized by sampling from a gaussian of small variance .
the biases for the tree nodes were initialized so that the distribution produced by the model with all the non - bias parameters set to zero matched the base rates of the words in the training set .
models were trained using the learning rate of 123 until the perplexity on the validation set started to increase .
then the learning rate was reduced to 123 123 and training was resumed until the validation perplexity started increasing again .
all model parameters were regulated using a small
we thank martin szummer for his comments on a draft of this paper .
this research was supported by nserc and cfi .
geh is a fellow of the canadian institute for advanced research .
