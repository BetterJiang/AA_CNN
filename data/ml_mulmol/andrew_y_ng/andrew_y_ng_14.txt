recent work in unsupervised feature learning and deep learning has shown that be - ing able to train large models can dramatically improve performance .
in this paper , we consider the problem of training a deep network with billions of parameters using tens of thousands of cpu cores .
we have developed a software framework called distbelief that can utilize computing clusters with thousands of machines to train large models .
within this framework , we have developed two algorithms for large - scale distributed training : ( i ) downpour sgd , an asynchronous stochastic gradient descent procedure supporting a large number of model replicas , and ( ii ) sandblaster , a framework that supports a variety of distributed batch optimization procedures , including a distributed implementation of l - bfgs .
downpour sgd and sandblaster l - bfgs both increase the scale and speed of deep network train - ing .
we have successfully used our system to train a deep network 123x larger than previously reported in the literature , and achieves state - of - the - art performance on imagenet , a visual object recognition task with 123 million images and 123k cate - gories .
we show that these same techniques dramatically accelerate the training of a more modestly - sized deep network for a commercial speech recognition ser - vice .
although we focus on and report performance of these methods as applied to training large neural networks , the underlying algorithms are applicable to any gradient - based machine learning algorithm .
deep learning and unsupervised feature learning have shown great promise in many practical ap - plications .
state - of - the - art performance has been reported in several domains , ranging from speech recognition ( 123 , 123 ) , visual object recognition ( 123 , 123 ) , to text processing ( 123 , 123 ) .
it has also been observed that increasing the scale of deep learning , with respect to the number of training examples , the number of model parameters , or both , can drastically improve ultimate classication accuracy ( 123 , 123 , 123 ) .
these results have led to a surge of interest in scaling up the training and inference algorithms used for these models ( 123 ) and in improving applicable optimization procedures ( 123 , 123 ) .
the use of gpus ( 123 , 123 , 123 , 123 ) is a signicant advance in recent years that makes the training of modestly sized deep networks practical .
a known limitation of the gpu approach is that the training speed - up is small when the model does not t in gpu memory ( typically less than 123 gigabytes ) .
to use a gpu effectively , researchers often reduce the size of the data or parameters so that cpu - to - gpu transfers are not a signicant bottleneck .
while data and parameter reduction work well for small problems ( e . g .
acoustic modeling for speech recognition ) , they are less attractive for problems with a large number of examples and dimensions ( e . g . , high - resolution images ) .
in this paper , we describe an alternative approach : using large - scale clusters of machines to distribute training and inference in deep networks .
we have developed a software framework called distbe - lief that enables model parallelism within a machine ( via multithreading ) and across machines ( via
message passing ) , with the details of parallelism , synchronization and communication managed by the framework .
in addition to supporting model parallelism , the distbelief framework also supports data parallelism , where multiple replicas of a model are used to optimize a single objective .
within this framework , we have designed and implemented two novel methods for large - scale distributed training : ( i ) downpour sgd , an asynchronous stochastic gradient descent procedure which lever - ages adaptive learning rates and supports a large number of model replicas , and ( ii ) sandblaster l - bfgs , a distributed implementation of l - bfgs that uses both data and model parallelism . 123 both downpour sgd and sandblaster l - bfgs enjoy signicant speed gains compared to more conven - tional implementations of sgd and l - bfgs .
our experiments reveal several surprising results about large - scale nonconvex optimization .
firstly , asynchronous sgd , rarely applied to nonconvex problems , works very well for training deep net - works , particularly when combined with adagrad ( 123 ) adaptive learning rates .
secondly , we show that given sufcient resources , l - bfgs is competitive with or faster than many variants of sgd .
with regard to specic applications in deep learning , we report two main ndings : that our dis - tributed optimization approach can both greatly accelerate the training of modestly sized models , and that it can also train models that are larger than could be contemplated otherwise .
to illustrate the rst point , we show that we can use a cluster of machines to train a modestly sized speech model to the same classication accuracy in less than 123 / 123th the time required on a gpu .
to illustrate the second point , we trained a large neural network of more than 123 billion parameters and used this network to drastically improve on state - of - the - art performance on the imagenet dataset , one of the largest datasets in computer vision .
123 previous work
in recent years commercial and academic machine learning data sets have grown at an unprece - dented pace .
in response , a great many authors have explored scaling up machine learning algo - rithms through parallelization and distribution ( 123 , 123 , 123 , 123 , 123 , 123 , 123 ) .
much of this research has focused on linear , convex models , where distributed gradient computation is the natural rst step .
within this area , some groups have relaxed synchronization requirements , exploring delayed gradi - ent updates for convex problems ( 123 , 123 ) .
in parallel , other groups working on problems with sparse gradients ( problems where only a tiny fraction of the coordinates of the gradient vector are non - zero for any given training example ) have explored lock - less asynchronous stochastic gradient descent on shared - memory architectures ( i . e .
single machines ) ( 123 , 123 ) .
we are interested in an approach that captures the best of both worlds , allowing the use of a cluster of machines asynchronously computing gradients , but without requiring that the problem be either convex or sparse .
in the context of deep learning , most work has focused on training relatively small models on a single machine ( e . g . , theano ( 123 ) ) .
suggestions for scaling up deep learning include the use of a farm of gpus to train a collection of many small models and subsequently averaging their predictions ( 123 ) , or modifying standard deep networks to make them inherently more parallelizable ( 123 ) .
our focus is scaling deep learning techniques in the direction of training very large models , those with a few billion parameters , but without introducing restrictions on the form of the model .
in special cases where one layer dominates computation , some authors have considered distributing computation in that one layer and replicating computation in the remaining layers ( 123 ) .
but in the general case where many layers of the model are computationally intensive , full model parallelism in a spirit similar to ( 123 ) is required .
to be successful , however , we believe that model parallelism must be combined with clever distributed optimization techniques that leverage data parallelism .
we considered a number of existing large - scale computational tools for application to our prob - lem , mapreduce ( 123 ) and graphlab ( 123 ) being notable examples .
we concluded that mapre - duce , designed for parallel data processing , was ill - suited for the iterative computations inherent in deep network training; whereas graphlab , designed for general ( unstructured ) graph computations , would not exploit computing efciencies available in the structured graphs typically found in deep
123we implemented l - bfgs within the sandblaster framework , but the general approach is also suitable for
a variety of other batch optimization methods .
figure 123 : an example of model parallelism in distbelief .
a ve layer deep neural network with local connectivity is shown here , partitioned across four machines ( blue rectangles ) .
only those nodes with edges that cross partition boundaries ( thick lines ) will need to have their state transmitted between machines .
even in cases where a node has multiple edges crossing a partition boundary , its state is only sent to the machine on the other side of that boundary once .
within each partition , computation for individual nodes will the parallelized across all available cpu cores .
123 model parallelism
to facilitate the training of very large deep networks , we have developed a software framework , distbelief , that supports distributed computation in neural networks and layered graphical models .
the user denes the computation that takes place at each node in each layer of the model , and the messages that should be passed during the upward and downward phases of computation . 123 for large models , the user may partition the model across several machines ( figure 123 ) , so that respon - sibility for the computation for different nodes is assigned to different machines .
the framework automatically parallelizes computation in each machine using all available cores , and manages com - munication , synchronization and data transfer between machines during both training and inference .
the performance benets of distributing a deep network across multiple machines depends on the connectivity structure and computational needs of the model .
models with a large number of param - eters or high computational demands typically benet from access to more cpus and memory , up to the point where communication costs dominate .
we have successfully run large models with up to 123 partitions in the distbelief framework with signicant speedups , while more modestly sized models show decent speedups for up to 123 or 123 partitions .
( see section 123 , under the heading model parallelism benchmarks , for experimental results . ) obviously , models with local connectivity struc - tures tend to be more amenable to extensive distribution than fully - connected structures , given their lower communication requirements .
the typical cause of less - than - ideal speedups is variance in processing times across the different machines , leading to many machines waiting for the single slowest machine to nish a given phase of computation .
nonetheless , for our largest models , we can efciently use 123 machines where each machine achieves an average cpu utilization of 123 cores , for a total of 123 cpu cores training a single large neural network .
when combined with the distributed optimization algorithms described in the next section , which utilize multiple replicas of the entire neural network , it is possible to use tens of thousands of cpu cores for training a single model , leading to signicant reductions in overall training times .
123 distributed optimization algorithms
parallelizing computation within the distbelief framework allows us to instantiate and run neural networks considerably larger than have been previously reported .
but in order to train such large models in a reasonable amount of time , we need to parallelize computation not only within a single
123in the case of a neural network upward and downward might equally well be called feedforward and
backprop , while for a hidden markov model , they might be more familiar as forward and backward .
machine 123machine 123machine 123machine 123 figure 123 : left : downpour sgd .
model replicas asynchronously fetch parameters w and push gra - dients w to the parameter server .
right : sandblaster l - bfgs .
a single coordinator sends small messages to replicas and the parameter server to orchestrate batch optimization .
instance of the model , but to distribute training across multiple model instances .
in this section we describe this second level of parallelism , where we employ a set of distbelief model instances , or replicas , to simultaneously solve a single optimization problem .
we present a comparison of two large - scale distributed optimization procedures : downpour sgd , an online method , and sandblaster l - bfgs , a batch method .
both methods leverage the concept of a centralized sharded parameter server , which model replicas use to share their parameters .
both methods take advantage of the distributed computation distbelief allows within each individual replica .
but most importantly , both methods are designed to tolerate variance in the processing speed of different model replicas , and even the wholesale failure of model replicas which may be taken ofine or restarted at random .
in a sense , these two optimization algorithms implement an intelligent version of data parallelism .
both approaches allow us to simultaneously process distinct training examples in each of the many model replicas , and periodically combine their results to optimize our objective function .
123 downpour sgd
stochastic gradient descent ( sgd ) is perhaps the most commonly used optimization procedure for training deep neural networks ( 123 , 123 , 123 ) .
unfortunately , the traditional formulation of sgd is inherently sequential , making it impractical to apply to very large data sets where the time required to move through the data in an entirely serial fashion is prohibitive .
to apply sgd to large data sets , we introduce downpour sgd , a variant of asynchronous stochas - tic gradient descent that uses multiple replicas of a single distbelief model .
the basic approach is as follows : we divide the training data into a number of subsets and run a copy of the model on each of these subsets .
the models communicate updates through a centralized parameter server , which keeps the current state of all parameters for the model , sharded across many machines ( e . g . , if we have 123 parameter server shards , each shard is responsible for storing and applying updates to 123 / 123th of the model parameters ) ( figure 123 ) .
this approach is asynchronous in two distinct as - pects : the model replicas run independently of each other , and the parameter server shards also run independently of one another .
in the simplest implementation , before processing each mini - batch , a model replica asks the pa - rameter server service for an updated copy of its model parameters .
because distbelief models are themselves partitioned across multiple machines , each machine needs to communicate with just the subset of parameter server shards that hold the model parameters relevant to its partition .
after receiving an updated copy of its parameters , the distbelief model replica processes a mini - batch of data to compute a parameter gradient , and sends the gradient to the parameter server , which then applies the gradient to the current value of the model parameters .
it is possible to reduce the communication overhead of downpour sgd by limiting each model replica to request updated parameters only every nf etch steps and send updated gradient values only every npush steps ( where nf etch might not be equal to npush ) .
in fact , the process of fetching
parameter servermodelreplicasdatashardsw = w - wwwparameter servermodelreplicasdatacoordinator ( small messages ) parameters , pushing gradients , and processing training data can be carried out in three only weakly synchronized threads ( see the appendix for pseudocode ) .
in the experiments reported below we xed nf etch = npush = 123 for simplicity and ease of comparison to traditional sgd .
downpour sgd is more robust to machines failures than standard ( synchronous ) sgd .
for syn - chronous sgd , if one machine fails , the entire training process is delayed; whereas for asynchronous sgd , if one machine in a model replica fails , the other model replicas continue processing their training data and updating the model parameters via the parameter servers .
on the other hand , the multiple forms of asynchronous processing in downpour sgd introduce a great deal of additional stochasticity in the optimization procedure .
most obviously , a model replica is almost certainly computing its gradients based on a set of parameters that are slightly out of date , in that some other model replica will likely have updated the parameters on the parameter server in the meantime .
but there are several other sources of stochasticity beyond this : because the parameter server shards act independently , there is no guarantee that at any given moment the parameters on each shard of the parameter server have undergone the same number of updates , or that the updates were applied in the same order .
moreover , because the model replicas are permitted to fetch parameters and push gradients in separate threads , there may be additional subtle inconsistencies in the timestamps of parameters .
there is little theoretical grounding for the safety of these operations for nonconvex problems , but in practice we found relaxing consistency requirements to be remarkably effective .
one technique that we have found to greatly increase the robustness of downpour sgd is the use of the adagrad ( 123 ) adaptive learning rate procedure .
rather than using a single xed learning rate on the parameter sever ( in figure 123 ) , adagrad uses a separate adaptive learning rate for each parameter .
let i , k be the learning rate of the i - th parameter at iteration k and wi , k its gradient , then we set : i , k = / 123
because these learning rates are computed only from the summed squared gradients of each parameter , adagrad is easily implemented locally within each parameter server shard .
the value of , the constant scaling factor for all learning rates , is generally larger ( perhaps by an order of magnitude ) than the best xed learning rate used without adagrad .
the use of adagrad extends the maximum number of model replicas that can productively work simultaneously , and combined with a practice of warmstarting model training with only a single model replica before unleashing the other replicas , it has virtually eliminated stability concerns in training deep networks using downpour sgd ( see results in section 123 ) .
123 sandblaster l - bfgs
batch methods have been shown to work well in training small deep networks ( 123 ) .
to apply these methods to large models and large datasets , we introduce the sandblaster batch optimization frame - work and discuss an implementation of l - bfgs using this framework .
a key idea in sandblaster is distributed parameter storage and manipulation .
the core of the opti - mization algorithm ( e . g l - bfgs ) resides in a coordinator process ( figure 123 ) , which does not have direct access to the model parameters .
instead , the coordinator issues commands drawn from a small set of operations ( e . g . , dot product , scaling , coefcient - wise addition , multiplication ) that can be performed by each parameter server shard independently , with the results being stored locally on the same shard .
additional information , e . g the history cache for l - bfgs , is also stored on the parameter server shard on which it was computed .
this allows running large models ( billions of parameters ) without incurring the overhead of sending all the parameters and gradients to a single central server .
( see the appendix for pseudocode . ) in typical parallelized implementations of l - bfgs , data is distributed to many machines and each machine is responsible for computing the gradient on a specic subset of data examples .
the gra - dients are sent back to a central server ( or aggregated via a tree ( 123 ) ) .
many such methods wait for the slowest machine , and therefore do not scale well to large shared clusters .
to account for this problem , we employ the following load balancing scheme : the coordinator assigns each of the n model replicas a small portion of work , much smaller than 123 / nth of the total size of a batch , and assigns replicas new portions whenever they are free .
with this approach , faster model replicas do more work than slower replicas .
to further manage slow model replicas at the end of a batch , the coordinator schedules multiple copies of the outstanding portions and uses the result from whichever model replica nishes rst .
this scheme is similar to the use of backup tasks in the mapreduce framework ( 123 ) .
prefetching of data , along with supporting data afnity by assigning sequential
portions of data to the same worker makes data access a non - issue .
in contrast with downpour sgd , which requires relatively high frequency , high bandwidth parameter synchronization with the parameter server , sandblaster workers only fetch parameters at the beginning of each batch ( when they have been updated by the coordinator ) , and only send the gradients every few completed por - tions ( to protect against replica failures and restarts ) .
we evaluated our optimization algorithms by applying them to training models for two different deep learning problems : object recognition in still images and acoustic processing for speech recognition .
the speech recognition task was to classify the central region ( or frame ) in a short snippet of audio as one of several thousand acoustic states .
we used a deep network with ve layers : four hidden layer with sigmoidal activations and 123 nodes each , and a softmax output layer with 123 nodes .
the input representation was 123 consecutive overlapping 123 ms frames of speech , each represented by 123 log - energy values .
the network was fully - connected layer - to - layer , for a total of approximately 123 million model parameters .
we trained on a data set of 123 billion weakly labeled examples , and evaluated on a hold out test set .
see ( 123 ) for similar deep network congurations and training for visual object recognition we trained a larger neural network with locally - connected receptive elds on the imagenet data set of 123 million images , each of which we scaled to 123x123 pixels ( 123 ) .
the network had three stages , each composed of ltering , pooling and local contrast normalization , where each node in the ltering layer was connected to a 123x123 patch in the layer below .
our infrastructure allows many nodes to connect to the same input patch , and we ran experiments varying the number of identically connected nodes from 123 to 123
the output layer consisted of 123 thousand one - vs - all logistic classier nodes , one for each of the imagenet object categories .
see ( 123 ) for similar deep network congurations and training procedures .
model parallelism benchmarks : to explore the scaling behavior of distbelief model parallelism ( section 123 ) , we measured the mean time to process a single mini - batch for simple sgd training as a function of the number of partitions ( machines ) used in a single model instance .
in figure 123 we quantify the impact of parallelizing across n machines by reporting the average training speed - up : the ratio of the time taken using only a single machine to the time taken using n .
speedups for inference steps in these models are similar and are not shown here .
the moderately sized speech model runs fastest on 123 machines , computing 123 faster than using a single machine .
( models were congured to use no more than 123 cores per machine . ) partitioning
figure 123 : training speed - up for four different deep networks as a function of machines allocated to a single distbelief model instance .
models with more parameters benet more from the use of additional machines than do models with fewer parameters .
123machines per model instancetraining speed ( cid : 123 ) up speech : 123m parametersimages : 123m parametersimages : 123m parametersimages : 123b parameters figure 123 : left : training accuracy ( on a portion of the training set ) for different optimization meth - ods .
right : classication accuracy on the hold out test set as a function of training time .
downpour and sandblaster experiments initialized using the same 123 hour warmstart of simple sgd .
the model on more than 123 machines actually slows training , as network overhead starts to dominate in the fully - connected network structure and there is less work for each machine to perform with in contrast , the much larger , locally - connected image models can benet from using many more machines per model replica .
the largest model , with 123 billion parameters benets the most , giving a speedup of more than 123 using 123 machines .
for these large models using more machines continues to increase speed , but with diminishing returns .
optimization method comparisons : to evaluate the proposed distributed optimization proce - dures , we ran the speech model described above in a variety of congurations .
we consider two baseline optimization procedures : training a distbelief model ( on 123 partitions ) using conventional ( single replica ) sgd , and training the identical model on a gpu using cuda ( 123 ) .
the three dis - tributed optimization methods we compare to these baseline methods are : downpour sgd with a xed learning rate , downpour sgd with adagrad learning rates , and sandblaster l - bfgs .
figure 123 shows classication performance as a function of training time for each of these methods on both the training and test sets .
our goal is to obtain the maximum test set accuracy in the minimum amount of training time , regardless of resource requirements .
conventional single replica sgd ( black curves ) is the slowest to train .
downpour sgd with 123 model replicas ( blue curves ) shows a signicant improvement .
downpour sgd with 123 replicas plus adagrad ( orange curve ) is modestly faster .
sandblaster l - bfgs using 123 model replicas ( green curves ) is considerably faster yet again .
the fastest , however , is downpour sgd plus adagrad with 123 model replicas ( red curves ) .
given access to sufcient cpu resourses , both sandblaster l - bfgs and downpour sgd with adagrad can train models substantially faster than a high performance gpu .
though we did not conne the above experiments to a xed resource budget , it is interesting to consider how the various methods trade off resource consumption for performance .
we analyze this by arbitrarily choosing a xed test set accuracy ( 123% ) , and measuring the time each method took to reach that accuracy as a function of machines and utilized cpu cores , figure 123
one of the four points on each traces corresponds to a training conguration shown in figure 123 , the other three points are alternative congurations .
in this plot , points closer to the origin are preferable in that they take less time while using fewer re - sources .
in this regard downpour sgd using adagrad appears to be the best trade - off : for any xed budget of machines or cores , downpour sgd with adagrad takes less time to reach the accuracy target than either downpour sgd with a xed learning rate or sandblaster l - bfgs .
for any allotted training time to reach the accuracy target , downpour sgd with adagrad used few resources than sandblaster l - bfgs , and in many cases downpour sgd with a xed learning rate could not even reach the target within the deadline .
the sandblaster l - bfgs system does show promise in terms
123time ( hours ) average frame accuracy ( % ) accuracy on training set sgd ( 123 ) downpoursgd ( 123 ) downpoursgd ( 123 ) w / adagradsandblaster lbfgs ( 123 ) 123time ( hours ) average frame accuracy ( % ) accuracy on test set sgd ( 123 ) gpu ( 123 ) downpoursgd ( 123 ) downpoursgd ( 123 ) w / adagraddownpoursgd ( 123 ) w / adagradsandblaster lbfgs ( 123 ) figure 123 : time to reach a xed accuracy ( 123% ) for different optimization strategies as a function of number of the machines ( left ) and cores ( right ) .
of its scaling with additional cores , suggesting that it may ultimately produce the fastest training times if used with an extremely large resource budget ( e . g . , 123k cores ) .
application to imagenet : the previous experiments demonstrate that our techniques can accel - erate the training of neural networks with tens of millions of parameters .
however , the more sig - nicant advantage of our cluster - based approach to distributed optimization is its ability to scale to models that are much larger than can be comfortably t on single machine , let alone a single gpu .
as a rst step toward exploring the capabilities of very large neural networks , we used downpour sgd to train the 123 billion parameter image model described above on the imagenet object classi - cation task .
as detailed in ( 123 ) , this network achieved a cross - validated classication accuracy of over 123% , a relative improvement over 123% from the best performance we are aware of on the 123k category imagenet classication task .
in this paper we introduced distbelief , a framework for parallel distributed training of deep net - works .
within this framework , we discovered several effective distributed optimization strategies .
we found that downpour sgd , a highly asynchronous variant of sgd works surprisingly well for training nonconvex deep learning models .
sandblaster l - bfgs , a distributed implementation of l - bfgs , can be competitive with sgd , and its more efcient use of network bandwidth enables it to scale to a larger number of concurrent cores for training a single model .
that said , the combi - nation of downpour sgd with the adagrad adaptive learning rate procedure emerges as the clearly dominant method when working with a computational budget of 123 cpu cores or less .
adagrad was not originally designed to be used with asynchronous sgd , and neither method is typically applied to nonconvex problems .
it is surprising , therefore , that they work so well together , and on highly nonlinear deep networks .
we conjecture that adagrad automatically stabilizes volatile parameters in the face of the urry of asynchronous updates , and naturally adjusts learning rates to the demands of different layers in the deep network .
our experiments show that our new large - scale training methods can use a cluster of machines to train even modestly sized deep networks signicantly faster than a gpu , and without the gpus limitation on the maximum size of the model .
to demonstrate the value of being able to train larger models , we have trained a model with over 123 billion parameters to achieve better than state - of - the - art performance on the imagenet object recognition challenge .
the authors would like to thank samy bengio , tom dean , john duchi , yuval netzer , patrick nguyen , yoram singer , sebastian thrun , and vincent vanhoucke for their indispensable advice , support , and comments .
