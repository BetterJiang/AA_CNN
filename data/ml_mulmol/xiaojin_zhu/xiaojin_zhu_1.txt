guage modeling is devoted to estimating terms of the form
we introduce an exponential language model which mod - els a whole sentence or utterance as a single unit .
by avoid - ing the chain rule , the model treats each sentence as a bag of features , where features are arbitrary computable prop - erties of the sentence .
the new model is computationally more efcient , and more naturally suited to modeling global sentential phenomena , than the conditional exponential ( e . g .
maximum entropy ) models proposed to date .
using the model is straightforward .
training the model requires sam - pling from an exponential distribution .
we describe the challenge of applying monte carlo markov chain ( mcmc ) and other sampling techniques to natural language , and dis - cuss smoothing and step - size selection .
we then present a novel procedure for feature selection , which exploits dis - crepancies between the existing model and the training cor - pus .
we demonstrate our ideas by constructing and analyz - ing competitive models in the switchboard domain , incor - porating lexical and syntactic information .
motivation and outline
conventional statistical language models estimate the prob -
it into a product of conditional probabilities :
ability of a sentence by using the chain rule to decompose
the vast majority of work in statistical lan - ! currently with ibm t . j .
watson research center , yorktown
heights , ny 123
e - mail : stanchen@watson . ibm . com .
is the history when predict -
the application of the chain rule is technically harm - less since it uses an exact equality , not an approximation .
this practice is also understandable from a historical per - spective ( statistical language modeling grew out of the sta - tistical approach to speech recognition , where the search paradigm requires estimating the probability of individual words ) .
nonetheless , it is not always desirable .
terms like
may not be the best way to think about estimating
global sentence information such as grammaticality or semantic coherence is awkward to encode in a con - ditional framework .
some grammatical structure was captured in the structured language model of ( 123 ) and in the conditional exponential model of ( 123 ) .
but such structure had to be formulated in terms of partial parse trees and left - to - right parse states .
similarly , model - ing of semantic coherence was attempted in the con - ditional exponential model of ( 123 ) , but had to be re - stricted to a limited number of pairwise word correla -
external inuences on the sentence ( for example , the effect of preceding utterances , or dialog level vari - ables ) are equally hard to encode efciently .
further - more , such inuences must be factored into the pre - diction of every word in the current sentence , caus - ing small but systematic biases in the estimation to be
is typically approximated by
' for some small (
assumption ) .
even if such a model is improved by including longer distance information , it still makes many implicit independence assumptions .
it is clear from looking at language data that these assumptions are often patently false , and that there are signicant global dependencies both within and across sentences .
as a simple example of the limitations of the chain rule approach , consider one aspect of a sentence : its length
the utterance on its probability cannot be modeled directly .
an ) - gram based model , the effect of the number of words in rather , it is an implicit consequence of the ) - gram predic -
this is later corrected during speech recognition by a word insertion penalty , the usefulness of which proves that length is an important feature .
however , the word inser - tion penalty can only model length as a geometric distribu - tion , which does not t well with empirical data , especially for short utterances .
as an alternative to the conventional conditional for - mulation , this paper proposes a new exponential language model which directly models the probability of an entire sentence or utterance .
the new model is conceptually sim - pler , and more naturally suited to modeling whole - sentence phenomena , than the conditional exponential models pro - posed earlier .
by avoiding the chain rule , the model treats each sentence or utterance as a bag of features , where fea - tures are arbitrary computable properties of the sentence .
the single , universal normalizing constant cannot be com - puted exactly , but this does not interfere with training ( done via sampling ) or with use .
using the model is computation - ally straightforward .
training the model depends crucially on efcient sampling of sentences from an exponential dis -
in what follows , section 123 introduces the model and contrasts it with the conditional exponential models pro - posed to date .
section 123 discusses training the model : it lists several techniques for sampling from exponential dis - tributions , shows how to apply them to the domain of nat - ural language sentences , and compares their relative efca - cies .
step - size selection and smoothing are also discussed here .
section 123 describes experiments we performed with this model , incorporating lexical and syntactic information .
section 123 analyzes the results of the experiments , and sec - tion 123 summarizes and discusses our ongoing effort and fu - ture directions .
various portions of this work were rst de - scribed in ( 123 , 123 , 123 ) .
whole sentence exponential models
a whole sentence exponential language model has the form :
universal normalization constant which depends only on the
s are the parameters of the model , - s , and the
s are arbitrary computable prop - erties , or features , of the sentence .
the prior .
for example , *$123
might be the uniform dis -
is any arbi - trary initial distribution , sometimes loosely referred to as
tribution , or else it might be derived ( using the chain rule )
using the whole sentence model
ture those aspects of the data they consider appropriate or
distance dependencies , global sentence properties , as well as more complex functions based on part - of - speech tagging , parsing , or other types of linguistic processing .
from a conditional distribution such as an ) - gram .
are selected by the modeler to cap - protable .
these can include conventional ) - grams , longer - probability of a given sentence , one need only calculate and the values of the various features123
, and use
equation 123
thus using the model is straightforward and ( as long as the features are not too complex ) computationally trivial .
because the features could depend on any part of the sentence , they can in general only be computed after the entire sentence is known .
therefore , when used for speech recognition , the model is not suitable for the rst pass of the recognizer , and should instead be used to re - score n - best
to use the whole sentence exponential model to estimate the
whole sentence maximum entropy models
the term exponential model refers to any model of the form ( 123 ) .
a particular type of such a model is the so - called maximum entropy ( me ) model , where the parameters are chosen so that the distribution satises certain linear
these target values are typically set to the expectation of
( for binary features , this simply means their frequency in the corpus ) .
then , the constraint
constraints .
specically , for each feature123 , its expec - is constrained to a specic value; * of some train - that feature under the empirical distribution ?
the initial distribution*$123 discrimination information ( mdi ) solution
lution123
furthermore , if the feature target values;
if the constraints ( 123 ) are consistent , there exists a unique solution within the exponential family ( 123 ) which satises them .
among all ( not necessarily exponential ) solutions to equations ( 123 ) , the exponential solution is the one closest to in the kullback - liebler sense , and is thus called the minimum divergence or minimum form , this becomes simply the maximum entropy ( me ) so -
123in the literature , the term maximum entropy or me is used loosely to refer to both situations , i . e .
regardless of whether the initial distribution
is uniform .
we will follow this practice here .
the empirical expectations over some training corpus ( as in equations ( 123 ) ) , the mdi or me solution is also the max - imum likelihood solution of the exponential family .
for more information , see ( 123 , 123 , 123 ) .
in particular ,
the mdi or me solution can be found by an iterative procedure such as the generalized iterative scaling ( gis )
at each itera - tion , the algorithm improves the algorithm ( 123 ) .
gis starts with arbitrary123 values by comparing the expectation of each feature under the current* target value , and modifying the associated123 determines the step size ( see section 123 ) .
computing the expectations<v=$s
quires a summation over all possible sentences , a clearly instead , we estimate<v=$s wt by sampling from the distribution*
and using the sample expecta - .
sampling from an exponential distribution is a
non - trivial task .
efcient sampling is crucial to successful training .
sampling techniques will be discussed in detail in section 123 .
as will be shown later on in this paper , with these techniques it is possible to train whole - sentence me models using very large corpora and very many features .
in training a whole - sentence maximum entropy model ,
as mentioned earlier , the term exponential models refers to all models of the form ( 123 ) , whereas the term me models refers to exponential models where the parameters are set to satisfy equation ( 123 ) .
most of this paper deals with me models .
for a different training criterion for exponen - tial models , see section 123 .
comparison to conditional me models
it is instructive to compare the whole - sentence me model with conditional me models , which have seen considerable success recently in language modeling ( 123 , 123 , 123 , 123 ) .
the conditional model usually has the form :
one must compute
recomputed during training for each word position in the
where the features are functions of a specic word - history
more importantly , - pair , and so is the baseline* is not a true constant it depends on and thus must be training data .
namely , for each training datapoint
quite severe : training a model that incorporates ) - gram and
is the vocabulary .
this computational burden is
long - distance word correlation features on some 123 million words can take hundreds of days of computation ( 123 , p . 123 ) .
it is this bottleneck that has hindered the widespread use of the me framework in language modeling .
in comparison , in our new model the universal normalization constant need not be calculated ( see section 123 ) .
this not only speeds up training , but it also signicantly speeds up using the model in applications such as speech recognition .
in fact , when used with simple features , our model can be applied
model employing a comparable number of parameters .
the main drawbacks of the conditional me model are thus the severe computational bottleneck of training ( espe -
with roughly the same amount of computation as an ) - gram cially of computing - ) , and the difculties in model -
ing whole - sentence phenomena .
the whole - sentence me model addresses both of these issues .
a nal note of comparison : a whole - sentence me model incorporating the same features as a conditional me model is in fact not identical to the latter .
this is because the training procedure used for conditional me models restricts the computation of the feature expectations to histories ob - served in the training data ( see ( 123 ) or ( 123 , section 123 ) ) .
this biases the solution in an interesting and sometimes appro - priate way .
for example , consider word trigger features of
for some wordsm
correlated in the training data , this will affect the solution of the conditional me model .
in fact , if they are perfectly correlated , always co - occurring in the same sentence , the re -
and specically consider the two featuresmon$p sulting123 s will likely be one half of what their value would
have been if only one of the features were used .
this is ben - ecial to the model , since it captures correlations that are likely to recur in new data .
however , a whole - sentence me model incorporating the same features will not use the cor - , unless it is explicitly instructed to do so via a separate feature .
this is because the train - ing data is not actually used in whole - sentence me training , except initially to derive the features target values .
normalization and perplexity
just as it is infeasible to calculate exactly feature expec - tations for whole - sentence models , it is equally infeasible
fortunately , this is not necessary for train -
ing : sampling ( and hence expectation estimation ) can be , as will be shown in section 123
using the model as part of a classier ( e . g . , a speech recog - either , because the relative ranking of the different classes is not changed by a
to compute the normalization constant - done without knowing - nizer ) does not require knowledge of -
single , universal constant .
notice that this is not the case for conditional exponential models .
nonetheless , at times it may be desirable to approximate , perhaps in order to compute perplexity .
with the whole -
sentence model this can be done as follows .
thus z can be approximated to any desired accuracy from a
be the number of sentences and words in it , respectively
v be the unnormalized mod - ication made to the initial model* : 123
by the normalization constraint we have :
from which we get : - 123 of sentences drawn from* 123 .
often , suitably large samplez is based on an ) - gram .
a reasonably efcient sampling technique for ) - grams is described later .
to estimate reduction in per - word perplexity ( ( n ( the* : 123 baseline , letzd| be a test set , and let ) dy ~ | and ) |
z ~ | i arithmetic means
where the arithmetic mean is taken with respect to* : 123 and the geometric mean with respect tozd| .
123 , i . e .
if the test set is also sampled from the baseline
distribution , it follows from the law of inequality of aver - ages that the new perplexity will always be higher .
this , however , is appropriate because any correction to an ini - tial probability distribution will assign a lower likelihood ( and hence higher perplexity ) to data generated by that dis -
substituting in the estimation of z , the estimated perplexity
it follows then that the perplexity reduction ratio is :
discriminative training
until now we discussed primarily maximum entropy or maximum likelihood training .
however , whole - sentence exponential models can also be trained to directly minimize the error rate in an application such as speech recognition .
this is known as minimum classication error ( mce ) train - ing , or discriminative training .
the log - likelihood of a
features is given
the last term is a weighted sum , which can be directly ( albeit only locally ) optimized for mce using a heuristic grid search such as powells algorithm , which searches the
whole - sentence exponential model with (
space dened by the123 s .
in fact , the second term ( mworq
can also be assigned a weight , and scores not related to language modeling can be added to the mix as well , for joint optimization .
this is a generalization of the language weight and word insertion penalty parameters currently used in speech recognition .
for an attempt in this direction ,
conditional whole - sentence models
so far we have discussed non - conditional models of the
re - introduce the conditional form of the exponential model , refer to the sentence history , namely the sequence of sentences from the begin - ning of the document or conversation up to ( but not includ - ing ) the current sentence .
the model then becomes :
in order to model cross - sentence effects , one can albeit with some modications
although the normalization constant is no longer uni - versal , it is still not needed for n - best rescoring of a speech recognizers output .
this is because rescoring is typically done one sentence at a time , with all competing hypotheses sharing the same sentence history .
we will not pursue models of this type any further in this paper , except to note that they can be used to exploit session wide information , such as topics and other dialog
maximum entropy model training
since explicit summation over all sentences we will estimate the expectations<
this section , we describe several statistical techniques for sampling from exponential distributions , and evaluate their efcacy for generating natural language sentences .
t by sampling
gibbs sampling ( 123 ) is a well known technique for sampling from exponential distributions .
it was used in ( 123 ) to sample from the population of character strings .
we will now describe how to use it to generate whole sentences from
cling through all word positions in some order ) .
to allow transitions into sentences of any length , we do
choose a word at random according to the distribu -
an unnormalized joint exponential distribution , then present alternative methods which are more efcient in this domain .
replacement by an ordinary word , which effectively lengthens the sentence by one word .
sentence .
this constitutes a single step in the random walk in the underlying markov eld .
to generate a single sentence from*
, start from any arbitrary sentence , and iterate as follows : 123
choose a word position ( either randomly or by cy - \ be the sentence produced by replacing the word in sentence with the word
in the vocabularya
place that word in position in the
the end - of - sentence position is also considered for when the last word position in the sentence is picked , from the gibbs distribution* draw the initial sentence from a reasonable distri - 123 .
this tends to reduce the necessary num - for an initial sentence use the nal ( or some in - at each iteration , consider only a subset of the vo -
termediate ) sentence from a previous random walk .
this again tends to reduce the necessary number of iterations .
however , the resulting sentence may be somewhat correlated with the previous sample123
generating sample sentences from a gibbs distribution as described above is quite slow .
to speed things up , the following variations are useful :
the end - of - sentence symbol < / s> is also considered .
if chosen , this effectively shortens the sentence by
after enough iterations of the above procedure , the re - sulting sentence is guaranteed to be an unbiased sample
123it is not theoretically known how many iterations are needed to prac - tically guarantee unbiased samples .
in our experiments we used several
bution , such as a unigram based on the training data ,
cabulary for replacement .
any subset can be chosen
ber of iterations per step .
123this is known as the long chain approach .
there is an ongoing and heated debate in the computational statistics community between long chain and short chain supporters .
as long as the underlying markov chain remains er - godic .
this trades off the computational cost per it - eration against the mixing rate of the markov chain ( that is , the rate at which the random walk converges to the underlying equilibrium distribution ) .
sentence is accepted with probability
this new
affects the sampling efciency; in the experiments reported in this paper , we used a unigram distribution .
is retained .
after all word positions have been examined , the resulting sentence is added to the sample , and this process is repeated . 123 the distribution
even with these improvements , gibbs sampling is not the most efcient for this domain , as the probability of a great many sentences must be computed to generate each sample .
metropolis sampling ( 123 ) , another markov chain monte carlo technique , appears more appropriate for this situation .
an initial sentence is chosen as before .
for each is proposed from a in that po -
as in gibbs sampling , adapting the metropolis algo - rithm to sentences of variable - length requires care .
in one solution , we pad each sentence with end - of - sentence tokens
chosen word position , a new word to replace the original word sition , resulting in a proposed new sentence
otherwise , the original word used to generate new word candidates for each position < / s> up to a xed length .
a sentence becomes shorter if distribution123 used to generate new sentence candidates must be similar to the distribution*
we are attempting to in importance sampling , a sample
erated according to some sentence distribution123 similarly must be close to*
correct the bias introduced by sampling from123
, each sample
we evaluated these methods ( except gibbs
in applying metropolis sampling , instead of replacing a single word at a time it is possible to replace larger units .
in particular , in independence sampling we consider replac - ing the whole sentence in each iteration .
for efciency , the
123the sampling procedure is still correct if the current sentence is added to the sample after each word position is examined; however , this process becomes less well - dened when we consider variable - length sentences .
the last non - < / s> token is changed to < / s> , longer if the rst < / s> token is changed to something else .
for efcient sampling .
to times , so that
sampling , which proved too slow ) on some of the models to
which sampling method is best depends on the nature of
table 123 : mean and standard deviation ( of mean ) of feature expectation estimates for sentence - length features for three sampling algorithms over ten runs
specic context , until the end - of - sentence symbol is gen -
from the beginning - of - sentence symbol , and iteratively gen -
be described in section 123
these models employ a trigram
as the initial distribution*
( generating sentences from a ) - gram model can be done quite efciently : one starts erates a single word according to the ) - gram model and the erated .
generating a single word from an ) - gram model steps .
while this computation is not triv - exponential distribution . ) therefore , taking123
ial , it is far more efcient than sampling directly from an to be a tri - gram model for independence and importance sampling is very effective .
to measure the effectiveness of the different sampling algorithms , we did the following .
using an expo - nential model with a baseline trigram trained on 123 million words of switchboard text ( ( 123 ) ) and a vocabulary of some 123 , 123 words , for each of the sampling methods we gen - erated ten independent samples of 123 , 123 sentences .
we estimated the expectations of a set of features on each sam - ple , and calculated the empirical variance in the estimate of these expectations over the ten samples .
more efcient sampling algorithms should yield lower variances .
in our experiments , we found that independence sam - pling and importance sampling both yielded excellent per - formance , while word - based metropolis sampling performed substantially worse .
as an example , we estimated expecta - tions for sentence - length features of the form
over ten samples of size 123 , 123
in table 123 , we display the means and standard deviations of the ten expectation estimates for each of the ve sentence - length features under three sampling algorithms .
the efciency of importance and independence sam - pling depends on the distance between the generating dis -
once the distance becomes too large , metropolis sampling , and the re -
and the desired distribution*
, that distance will grow with each training iteration .
can be used for one iteration , say iteration (
is arguably a better model than the initial
sulting sample retained .
subsequent iterations can re - use that sample via importance or independence sampling with
note that , even if training were to stop at 123 , since it has moved considerably ( by our assump -
using the techniques we discuss above , training a whole - sentence me model is feasible even with large corpora and many features .
and yet , training time is not negligible .
some ideas for reducing the computational burden which we have not yet explored include :
tion ) towards satisfying the feature constraints .
the rst few iterations ( we only need to know the di - rection and rough magnitude of the correction to the
use only rough estimation ( i . e .
small sample size ) in 123 s ) ; increase sample size when approaching conver - determine the sample size dynamically , based on the add features gradually ( this has already proven it -
self effective at least anecdotally , as reported in sec -
number of times each feature was observed so far .
step size
in gis , the step size for feature update is inversely related to the number of active features .
as sentences typically have many features , this may result in very slow convergence .
improved iterative scaling ( iis ) ( 123 ) uses a larger effective step size than gis , but requires a great deal more bookkeep -
nite , we would take
however , when feature expectations are near their target value , iis can be closely approximated with equation ( 123 ) is taken to be a weighted average of the feature
only over the sentences in the sample used to calculate ex - pectations .
this technique resulted in convergence in all of
sum over all sentences; i . e . , if the set of sentences were
in our implementation , we approximatedl from equation ( 123 ) we can see that if<dc introduce a gaussian prior on123
to smooth our model , we use the fuzzy maximum entropy method rst described by ( 123 ) : we
values and search for the
maximum a posterior model instead of the maximum like - lihood model .
this has the effect of changing equation ( 123 )
for some suitable variance parameter
nique , we found that over - training ( overtting ) was never a problem .
for a detailed analysis of this and other smoothing techniques for maximum entropy models , see ( 123 ) .
with this tech -
feature sets and experiments
in this section we describe several experiments with the new model , using various feature sets and sampling tech -
niques .
we start with the simple reconstruction of ) - grams
using gibbs sampling , proceed with longer distance and class based lexical relations using importance sampling , and end with syntactic parse - based features .
for subsequent work using semantic features , see ( 123 ) .
to test the feasibility of gibbs sampling and generally val - idate our approach , we built a whole - sentence me model using a small ( 123k word ) training set of broadcast news to be uniform , and used uni -
gram , bigram and trigram features of the form
( 123 ) utterances123
we set* : 123
# of times ) - gram occurs ino
the features were not introduced all at the same time .
in - stead , the unigram features were introduced rst , and the model was allowed to converge .
next the bigram features were introduced , and the model again allowed to converge .
finally the trigram features were introduced .
this resulted in faster convergence than in the simultaneous introduction of all feature types .
training was done by gibbs sampling
below we provide sample sentences generated by gibbs sampling from various stages of the training procedure .
ta - ble 123 lists sample sentences generated by the initial model ,
before any training took place .
since the initial123 s were all
set to zero , this is the uniform model .
tables 123 through 123 list sample sentences generated by the converged model af - ter the introduction of unigram , bigram and trigram features , respectively .
it can be seen from the example sentences that the model indeed successfully incorporated the information provided by the respective features .
the model described above incorporates only conven - tional features which are easy to incorporate in a simple
123throughout this paper we have been referring to the unit of modeling as a sentence .
but of course , our method can be used to model any word sequence or utterance , whether or not it is consistent with linguistic boundaries .
naturally , linguistically induced features may or may not be applicable to non - sentences .
conditional language mode .
this was done for demonstra - tive purposes only .
the model is unaware of the nature or complexity of the features .
arbitrary features can be accom - modated with virtually no change in the model structure or
<s> enough care greg getting if o .
answer never < / s> <s> death youve both them right back well both < / s> <s> month thats news any youve wrote much mean < / s> <s> a .
honor weve me greg look today n
table 123 : sentences generated by gibbs sampling from an
zero , this is the uniform model .
initial ( untrained ) model .
since all123 s were initialized to
<s> well very dont a are not live the < / s> <s> i right of not so angeles is done < / s> <s> i are four this know dont about of < / s> <s> c .
go are to a it had so < / s> <s> off the more just point want made well < / s>
table 123 : sentences generated by gibbs sampling from a whole - sentence me model trained on unigram features
<s> do you want to dont c .
was you < / s> <s> the i do you have a a us < / s> <s> but a los angeles ask c .
news are < / s> <s> we will you have to be agenda and < / s> <s> the way is the do you think on < / s>
table 123 : adding bigram features .
as we mentioned earlier , gibbs sampling turned out to be the least efcient of all sampling techniques we consid - ered .
as we will show next , much larger corpora and many more features can be feasibly trained with the more efcient
in our next experiment we used a much larger corpus and a richer set of features .
our training data consisted of 123 , 123 , 123 words ( nearly 123 , 123 sentences ) of switchboard text ( swb ) ( 123 ) .
first , we constructed a conventional trigram model on this data using a variation of kneser - ney smoothing ( 123 ) ,
generalized ) - grams and feature selection and used it as our initial distribution*$123 .
we then em - ployed features that constrained the frequency of word ) - grams ( up to ) =123 ) , distance - two ( i . e .
skipping one word ) word ) - grams ( up to ) =123 ) ( 123 ) , and class ) - grams ( up to ) =123 ) ( 123 ) .
we partitioned our vocabulary ( of some 123 , 123
words ) into 123 , 123 , and 123 classes using the word class - ing algorithm of ( 123 ) on our training data .
<s> what do you have to live los angeles < / s> <s> a .
business news tokyo < / s> <s> be of says im not at this it < / s> <s> bill dorman been well i think the most < / s> <s> do you have to be in the way < / s>
table 123 : adding trigram features .
table 123 : top - 123 wer and average rank of best hypothesis using varying feature sets .
a class unigram , and indicates that the trigram model over - generates words from this class .
on further examination , the class turned out to contain a large fraction of the rarest words .
this indicates that perhaps the smoothing of the tri - gram model could be improved .
talking to you know to you know how about you know kind of a
to select specic features we devised the following pro - cedure .
first , we generated an articial corpus by sampling
) - grams with largest discrepancy ( according to statistic ) between training corpus and trigram - generated corpus of same size; ) - grams with token are distance -
notation represents a class whose two most frequent members are from our initial trigram distribution* .
this trigram each ) - gram , we compared its count in the trigram corpus signicantly ( using a feature to our model . 123 we tried thresholds on the 123 , 123 , 123 , 123 , 123 , 123 , 123 and 123 , 123 ) - gram features , re - ) - grams with zero counts were considered to in table 123 , we display the ) - grams with the highest scores .
the majority of these ) - grams involve a 123 - gram
or 123 - gram that occurs zero times in the training corpus and occurs many times in the trigram corpus .
these are clear examples of longer - distance dependencies that are not mod - eled well with a trigram model .
however , the last feature is
to that in the training corpus .
if these two counts differed test ) , we added the corresponding
have 123 counts in this analysis .
tic of 123 , 123 , 123 , 123 , and 123 , resulting in approximately
corpus was of the same size as the training corpus
123the idea of imposing a constraint that is most violated by the current model was rst proposed by robert mercer , who called it nailing down .
we measured the impact of these features by rescoring
each of our feature sets for 123 iterations of iterative scaling; each complete training run took less than three hours on a 123 mhz pentium pro computer .
for each feature set , we trained the corresponding model to 123
we used importance sampling to calculate expectations .
however , instead of generating an entirely new sample for each iteration , we generated a single corpus from our initial trigram model , and re - weighted this corpus for each iteration using importance sampling .
( this technique may result in mutually inconsistent constraints for rare features , but convergence can still be assured by
after initializing all123 reducing the step sizel with each iteration . ) we trained - best lists ( e ll ) which were gen -
test set of 123 , 123 words .
the trigram* served as a base -
for each model , we computed both the top - 123 word er - ror rate and the average rank of the least errorful hypothesis .
these gures were computed rst by combining the new language scores with the existing acoustic scores , and again by considering the language scores only .
results for the three largest feature sets are summarized in table 123 ( for the smaller feature sets improvement was smaller still ) .
while the specic features we selected here made only a small dif - ference in n - best rescoring , they serve to demonstrate the extreme generality of our model : any computable property of the sentence which is currently not adequately modeled can ( and should ) be added into the model .
erated by the janus system ( 123 ) on a switchboard / callhome
syntactic features
in the last set of experiments , we used features based on variable - length syntactic categories to improve on an ini - tial trigram model in the switchboard domain .
our train - ing dataset was the same switchboard corpus used in sec -
due to the often agrammatical nature of switchboard language ( informal , spontaneous telephone conversations ) , we chose to use a shallow parser that , given an utterance , produces only a at sequence of syntactic constituents .
the syntactic features were then dened in terms of these con -
the shallow switchboard parser
the shallow switchboard parser ( 123 ) was designed to parse spontaneous , conversational speech in unrestricted domains .
it is very robust and fast for such sentences .
first , a series of preprocessing steps are carried out .
these include eliminat - ing word repetitions , expanding contractions , and cleaning disuencies .
next , the parser assigns a part - of - speech tag to each word .
for example , the input sentence
okay i uh you know i think it might be correct
will be processed into
i / nnp think / vbp it / prpa might / aux be / vb cor -
as the next step , the parser breaks the preprocessed and tagged sentence into one or more simplex clauses , which are clauses containing an inected verbal form and a subject .
this simplies the input and makes parsing more robust .
in our example above , the parser will generate two simplex
simplex 123 : i / nnp think / vbp simplex 123 : it / prpa might / aux be / vb correct / jj
finally , with a set of handwritten grammar rules , the parser parses each simplex clause into constituents .
the parsing is shallow since it doesnt generate embedded con - stituents; i . e . , the parse tree is at .
in the example , simplex 123 has two constituents :
( np ) ( ( np head ) i / nnp ) ( vb ) ( ( vp head ) think / vbp )
and simplex 123 has three constituents :
( np ) ( ( np head ) it / prpa ) ( vb ) ( might / aux ( vp head ) be / vb ) ( prdadj ) ( correct / jj )
the parser sometimes leaves a few function words ( e . g .
to , of , in ) unparsed in the output .
for the purpose of fea - ture selection , we regarded each of these function words as a constituent .
counted this way , there are a total of 123
feature types
as mentioned above , the shallow parser breaks an input sen - tence into one or more simplex clauses , which are then fur - ther broken down into at sequences of constituents .
we de - ned three types of features based solely on the constituent types; i . e . , we ignored the identities of words within the con -
constituent sequence features : for any constituent
tures resembles traditional class trigram features , ex - cept that they correspond to a variable number of words .
sequence of i laugh is np vb while that of i see a bird is np vb np .
constituent trigram features : for any ordered con -
features is a relaxation of constituent sequence fea - tures , since it doesnt require the position and number of constituents to match exactly .
as an example , both
sequence and simplex clause , 123
=123 if and only if the constituent sequence of simplex clause ex - =123
for instance , 123 np vb i think 123 np vb prdadj it might be correct l , and so forth .
123 np vb it might be correct 123
constituent set features : for any set of constituents ,
=123 if and only if the constituent set of sentence =123
this set of 123 np , vb i laugh 123 np , vb i see a bird + , although the constituent
=123 if and only if sentence contains that contiguous sequence at least
this set of fea -
the same size as the training corpus , by sampling from* : 123 of the initial model* , and that adding such a feature simplex clauses of the articial corpus .
let be and ( be the that in the articial corpus
we ran both corpora through the shallow parser and counted the occurrences of each candidate feature .
if the number of times a feature was active in the training corpus differed sig - nicantly from that in the articial corpus , the feature was considered important and was incorporated into the model .
our reasoning was that the difference is due to a deciency
will x that deciency .
we assumed that our features occur independently , and are therefore binomially distributed .
more precisely , we had two independent sets of bernoulli trials .
one is the set of simplex clauses of the training corpus .
the other is the
feature selection
we followed the procedure described in section 123 to nd useful features .
we generated an articial corpus , roughly
the number of times a feature occurs in the training corpus
true occurrence probabilities associated with each corpus .
( see for example ( 123 , page 123 ) ) .
we incorporated into our
we tested the hypotheses the generalized likelihood ratio test , we rejected
123 was rejected .
model those features whose
= ' = had the most signicant tailed ) .
the feature123 standard score 123 in the test , with =123 occurrences in the swb corpus and =123 in the articial corpus
interesting is the feature123 123 , and =123 , =123
one may suspect that this is where
constituent sequence features : there were 123 , 123 candi - date features of this type that occurred at least once in the two corpora .
of those , 123 , 123 show a signicant difference between the two corpora at a 123% condence level ( two -
the initial trigram model makes up some unlikely phrases .
looking at the 123 simplex clauses conrms this :
f , with
so i have never really interesting and they might practical that we have good that you could last but i would sure and you can convenient
similarly , the feature123 score - 123 , =123 and =123
this feature stands for a perfectly
plausible simplex clause form that has never been gener - ated in the articial corpus , probably because it contains a long - distance dependence .
indeed , the corresponding sim - plex clauses in swb are :
what area do you work in what area do you live in what home do you live in what exercise do you get involved in
score , 123 , is123
constituent set features : these features are more gen - eral than constituent sequence features and thus there are fewer of them .
a total of 123 , 123 candidate constituent set features occurred in either corpus , while 123 showed a sig - nicant difference .
the one with the most signicant
, with =123 and =123
or a totally and a properly if a whatsoever
like constituent sequence features , there were some con - stituent set features that occurred only in the articial cor - - score of 123 with
for example , 123 =123 and =123 :
corpus , such as123 with z - score 123 , =123 signicant .
the feature123 =123 and =123 is another good example of the deciencies
constituent trigram features : 123 , 123 candidate features of this type appeared in the corpora , of which 123 , 123 were
there were also features that only occurred in the swb
but he never some we the gym even some it really some really bad myself sometimes some on channel 123
of the initial trigram model :
perplexity and word error rate
perplexity under the new maximum entropy model was es -
we incorporated the 123 constituent sequence features , 123 constituent set features , and 123 constituent tri - gram features into a whole - sentence maximum entropy lan - guage model , and trained its parameters with the gis algo - rithm .
the baseline perplexity of a 123 , 123 - word swb test
set calculated under the initial model*$123 was 123 .
the timated as 123 123 , a relative improvement of only 123% .
next , we tested speech recognition word error rate by n - best list rescoring .
a 123 - best list with 123 , 123 words was used .
the wer was 123% with the initial model and 123% with all of the syntactic features added , a mere 123%
in trying to understand the disappointing results of the last section , we analyzed the likely effect of features on the - nal model .
the upper bound on improvement from a single is the kullback liebler distance between
the true distribution of123 ( as estimated by the empirical dis - ( the distribution of123 according
to the current model ) ( 123 , p .
the effect of multiple fea - tures is not necessarily additive ( in fact , it could be supra - or sub - additive ) .
nonetheless , the sum of the individual ef - fects may still give some indication of the likely combined
effect .
for the syntactic features we used , we computed :
is signicantly larger .
the second term on the right - hand side is usually negligible .
the two factors affecting this
which translates into an expected perplexity reduction of , where 123 is the average number of words in a sentence ) .
the potential impact of these features is ap -
parently very limited .
we therefore need to seek features123
) and the number are thus the prevalence of the feature ( ? log discrepancy between the truth and the model ( mwoq sense to a human reader ? is such a feature ( where ? l ) .
it is , of course , ai - hard to compute
ever , even a rough approximation of it may be quite use - ful .
based on this analysis , we have subsequently focused our attention on deriving a smaller number of frequent ( and likely more complex ) features , based on the notion of sen - tence coherence ( ( 123 ) ) .
in the features we used , the latter was quite large , but the former was very small .
thus , we need to concentrate on more common features .
an ideal feature should occur frequently enough , yet ex - hibit a signicant discrepancy .
does the sentence make
frequent features are also computationally preferable .
because the training bottleneck in whole - sentence me mod - els is in estimating feature expectations via sampling , the computational cost is determined mostly by how rare the features are and how accurately we want to model them .
the more frequent the features , the less the computation .
note that computational cost of training depends much less on the vocabulary , the amount of training data , or the num - ber of features .
summary and discussion
we presented an approach to incorporating arbitrary linguis - tic information into a statistical model of natural language .
we described efcient algorithms for constructing whole - sentence me models , offering solutions to the questions of sampling , step size and smoothing .
we demonstrated our approach in two domains , using lexical and syntactic fea - tures .
we also introduced a procedure for feature selection which seeks and exploits discrepancies between an existing model and the training corpus .
whole - sentence me models are more efcient than con - ditional me models , and can naturally express sentence - level phenomena .
it is our hope that these improvements
will break the me usability barrier which heretoforth hin - dered exploration and integration of multiple knowledge sources .
this will hopefully open the oodgates to experimentation , by many researchers , with varied knowledge sources which they believe to carry signicant information .
such sources
number agreement , parsability , other parser - supplied
distribution of verbs and tenses in the sentence various aspects of grammaticality ( person agreement , dialog level information prosodic and other time related information ( speaking
since all knowledge sources are incorporated in a uni - form way , a language modeler can focus on which proper - ties of language to model as opposed to how to model them .
attention can thus be shifted to feature induction .
indeed , we have started working on an interactive feature induction methodology , recasting it as a logistic regression problem ( 123 , 123 ) .
taken together , we hope that these efforts will help open the door to putting language back into language
rate , pauses , .
we are grateful to sanjeev khudanpur , fred jelinek and prakash narayan for helpful discussions during the early stages of this work; to larry wasserman for much advice on sampling techniques; to klaus zechner for use of his parser; and to the reviewers for many thoughtful suggestions and
